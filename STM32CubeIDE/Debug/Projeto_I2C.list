
Projeto_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a29c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800a53c  0800a53c  0000b53c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a600  0800a600  0000b600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a608  0800a608  0000b608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a60c  0800a60c  0000b60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800a610  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800a674  0000c064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800a6d4  0000c0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000834  24000124  0800a734  0000c124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000958  0800a734  0000c958  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cdff  00000000  00000000  0000c152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003174  00000000  00000000  00028f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  0002c0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f19  00000000  00000000  0002d420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000385ee  00000000  00000000  0002e339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c5df  00000000  00000000  00066927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016272d  00000000  00000000  00082f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e5633  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005844  00000000  00000000  001e5678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  001eaebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a524 	.word	0x0800a524

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800a524 	.word	0x0800a524

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f000 ff5a 	bl	800153c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f90e 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 fa96 	bl	8000bbc <MX_GPIO_Init>
  MX_ETH_Init();
 8000690:	f000 f98a 	bl	80009a8 <MX_ETH_Init>
  MX_I2C1_Init();
 8000694:	f000 f9d4 	bl	8000a40 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000698:	f000 fa12 	bl	8000ac0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800069c:	f000 fa5c 	bl	8000b58 <MX_USB_OTG_FS_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_UART_Receive_IT(&huart3, rx_buffer, sizeof(rx_buffer));
 80006a0:	2209      	movs	r2, #9
 80006a2:	4904      	ldr	r1, [pc, #16]	@ (80006b4 <main+0x34>)
 80006a4:	4804      	ldr	r0, [pc, #16]	@ (80006b8 <main+0x38>)
 80006a6:	f006 fea1 	bl	80073ec <HAL_UART_Receive_IT>

  	  ExecuteProgram();
 80006aa:	f000 f807 	bl	80006bc <ExecuteProgram>
  {
 80006ae:	bf00      	nop
 80006b0:	e7f6      	b.n	80006a0 <main+0x20>
 80006b2:	bf00      	nop
 80006b4:	240007f4 	.word	0x240007f4
 80006b8:	2400027c 	.word	0x2400027c

080006bc <ExecuteProgram>:
  }
  /* USER CODE END 3 */
}

void ExecuteProgram()
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	if(execute_flag == '1'){
 80006c0:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <ExecuteProgram+0x40>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b31      	cmp	r3, #49	@ 0x31
 80006c6:	d102      	bne.n	80006ce <ExecuteProgram+0x12>
		Read_LDR();
 80006c8:	f000 f81a 	bl	8000700 <Read_LDR>
	}
	else if(execute_flag == '4'){
		Write_DAC();
	}

}
 80006cc:	e013      	b.n	80006f6 <ExecuteProgram+0x3a>
	else if(execute_flag == '2'){
 80006ce:	4b0b      	ldr	r3, [pc, #44]	@ (80006fc <ExecuteProgram+0x40>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b32      	cmp	r3, #50	@ 0x32
 80006d4:	d102      	bne.n	80006dc <ExecuteProgram+0x20>
		Read_Temp();
 80006d6:	f000 f857 	bl	8000788 <Read_Temp>
}
 80006da:	e00c      	b.n	80006f6 <ExecuteProgram+0x3a>
	else if(execute_flag == '3'){
 80006dc:	4b07      	ldr	r3, [pc, #28]	@ (80006fc <ExecuteProgram+0x40>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b33      	cmp	r3, #51	@ 0x33
 80006e2:	d102      	bne.n	80006ea <ExecuteProgram+0x2e>
		Read_Pot();
 80006e4:	f000 f894 	bl	8000810 <Read_Pot>
}
 80006e8:	e005      	b.n	80006f6 <ExecuteProgram+0x3a>
	else if(execute_flag == '4'){
 80006ea:	4b04      	ldr	r3, [pc, #16]	@ (80006fc <ExecuteProgram+0x40>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b34      	cmp	r3, #52	@ 0x34
 80006f0:	d101      	bne.n	80006f6 <ExecuteProgram+0x3a>
		Write_DAC();
 80006f2:	f000 f8d1 	bl	8000898 <Write_DAC>
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	24000000 	.word	0x24000000

08000700 <Read_LDR>:

void Read_LDR(){
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
	 // Read analog data from A0 (channel 0) of the PCF8591
		  uint8_t LDR = PCF8591_ReadAnalog(0);
 8000706:	2000      	movs	r0, #0
 8000708:	f000 fb34 	bl	8000d74 <PCF8591_ReadAnalog>
 800070c:	4603      	mov	r3, r0
 800070e:	73fb      	strb	r3, [r7, #15]
		  HAL_Delay(100); // Wait before next reading
 8000710:	2064      	movs	r0, #100	@ 0x64
 8000712:	f000 ffa5 	bl	8001660 <HAL_Delay>
		  char counterMessage[9];

		  snprintf(counterMessage, 8, "%s\r\n", " AIN0: ");
 8000716:	1d38      	adds	r0, r7, #4
 8000718:	4b16      	ldr	r3, [pc, #88]	@ (8000774 <Read_LDR+0x74>)
 800071a:	4a17      	ldr	r2, [pc, #92]	@ (8000778 <Read_LDR+0x78>)
 800071c:	2108      	movs	r1, #8
 800071e:	f009 fa3b 	bl	8009b98 <sniprintf>
		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff fddb 	bl	80002e0 <strlen>
 800072a:	4603      	mov	r3, r0
 800072c:	b29a      	uxth	r2, r3
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	4619      	mov	r1, r3
 8000732:	4812      	ldr	r0, [pc, #72]	@ (800077c <Read_LDR+0x7c>)
 8000734:	f006 fdc6 	bl	80072c4 <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 8000738:	2064      	movs	r0, #100	@ 0x64
 800073a:	f000 ff91 	bl	8001660 <HAL_Delay>

		  snprintf(counterMessage, 4, "%d\r\n", LDR);
 800073e:	7bfb      	ldrb	r3, [r7, #15]
 8000740:	1d38      	adds	r0, r7, #4
 8000742:	4a0f      	ldr	r2, [pc, #60]	@ (8000780 <Read_LDR+0x80>)
 8000744:	2104      	movs	r1, #4
 8000746:	f009 fa27 	bl	8009b98 <sniprintf>
		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff fdc7 	bl	80002e0 <strlen>
 8000752:	4603      	mov	r3, r0
 8000754:	b29a      	uxth	r2, r3
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4619      	mov	r1, r3
 800075a:	4808      	ldr	r0, [pc, #32]	@ (800077c <Read_LDR+0x7c>)
 800075c:	f006 fdb2 	bl	80072c4 <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 8000760:	2064      	movs	r0, #100	@ 0x64
 8000762:	f000 ff7d 	bl	8001660 <HAL_Delay>
		  execute_flag = '0';
 8000766:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <Read_LDR+0x84>)
 8000768:	2230      	movs	r2, #48	@ 0x30
 800076a:	701a      	strb	r2, [r3, #0]


}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	0800a53c 	.word	0x0800a53c
 8000778:	0800a544 	.word	0x0800a544
 800077c:	2400027c 	.word	0x2400027c
 8000780:	0800a54c 	.word	0x0800a54c
 8000784:	24000000 	.word	0x24000000

08000788 <Read_Temp>:

void Read_Temp(){
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
	 // Read analog data from A1 (channel 1) of the PCF8591
		  uint8_t Temp = PCF8591_ReadAnalog(1);
 800078e:	2001      	movs	r0, #1
 8000790:	f000 faf0 	bl	8000d74 <PCF8591_ReadAnalog>
 8000794:	4603      	mov	r3, r0
 8000796:	73fb      	strb	r3, [r7, #15]
		  HAL_Delay(100); // Wait before next reading
 8000798:	2064      	movs	r0, #100	@ 0x64
 800079a:	f000 ff61 	bl	8001660 <HAL_Delay>
		  char counterMessage[9];

		  snprintf(counterMessage, 8, "%s\r\n", " AIN1: ");
 800079e:	1d38      	adds	r0, r7, #4
 80007a0:	4b16      	ldr	r3, [pc, #88]	@ (80007fc <Read_Temp+0x74>)
 80007a2:	4a17      	ldr	r2, [pc, #92]	@ (8000800 <Read_Temp+0x78>)
 80007a4:	2108      	movs	r1, #8
 80007a6:	f009 f9f7 	bl	8009b98 <sniprintf>
		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fd97 	bl	80002e0 <strlen>
 80007b2:	4603      	mov	r3, r0
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	4619      	mov	r1, r3
 80007ba:	4812      	ldr	r0, [pc, #72]	@ (8000804 <Read_Temp+0x7c>)
 80007bc:	f006 fd82 	bl	80072c4 <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 80007c0:	2064      	movs	r0, #100	@ 0x64
 80007c2:	f000 ff4d 	bl	8001660 <HAL_Delay>

		  snprintf(counterMessage, 4, "%d\r\n", Temp);
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
 80007c8:	1d38      	adds	r0, r7, #4
 80007ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000808 <Read_Temp+0x80>)
 80007cc:	2104      	movs	r1, #4
 80007ce:	f009 f9e3 	bl	8009b98 <sniprintf>
  		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fd83 	bl	80002e0 <strlen>
 80007da:	4603      	mov	r3, r0
 80007dc:	b29a      	uxth	r2, r3
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	4619      	mov	r1, r3
 80007e2:	4808      	ldr	r0, [pc, #32]	@ (8000804 <Read_Temp+0x7c>)
 80007e4:	f006 fd6e 	bl	80072c4 <HAL_UART_Transmit_IT>
  		  HAL_Delay(100);
 80007e8:	2064      	movs	r0, #100	@ 0x64
 80007ea:	f000 ff39 	bl	8001660 <HAL_Delay>
  		  execute_flag = '0';
 80007ee:	4b07      	ldr	r3, [pc, #28]	@ (800080c <Read_Temp+0x84>)
 80007f0:	2230      	movs	r2, #48	@ 0x30
 80007f2:	701a      	strb	r2, [r3, #0]

}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	0800a554 	.word	0x0800a554
 8000800:	0800a544 	.word	0x0800a544
 8000804:	2400027c 	.word	0x2400027c
 8000808:	0800a54c 	.word	0x0800a54c
 800080c:	24000000 	.word	0x24000000

08000810 <Read_Pot>:

void Read_Pot(){
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
	 uint8_t Pot = PCF8591_ReadAnalog(3);
 8000816:	2003      	movs	r0, #3
 8000818:	f000 faac 	bl	8000d74 <PCF8591_ReadAnalog>
 800081c:	4603      	mov	r3, r0
 800081e:	73fb      	strb	r3, [r7, #15]
		  // Process the analog_value or send it over UART/Display it
		  HAL_Delay(100); // Wait for 1 second before next reading
 8000820:	2064      	movs	r0, #100	@ 0x64
 8000822:	f000 ff1d 	bl	8001660 <HAL_Delay>
		  char counterMessage[9];

		  snprintf(counterMessage, 8, "%s\r\n", " AIN3: ");
 8000826:	1d38      	adds	r0, r7, #4
 8000828:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <Read_Pot+0x74>)
 800082a:	4a17      	ldr	r2, [pc, #92]	@ (8000888 <Read_Pot+0x78>)
 800082c:	2108      	movs	r1, #8
 800082e:	f009 f9b3 	bl	8009b98 <sniprintf>
		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fd53 	bl	80002e0 <strlen>
 800083a:	4603      	mov	r3, r0
 800083c:	b29a      	uxth	r2, r3
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	4619      	mov	r1, r3
 8000842:	4812      	ldr	r0, [pc, #72]	@ (800088c <Read_Pot+0x7c>)
 8000844:	f006 fd3e 	bl	80072c4 <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 8000848:	2064      	movs	r0, #100	@ 0x64
 800084a:	f000 ff09 	bl	8001660 <HAL_Delay>

		  snprintf(counterMessage, 4, "%d\r\n", Pot);
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	1d38      	adds	r0, r7, #4
 8000852:	4a0f      	ldr	r2, [pc, #60]	@ (8000890 <Read_Pot+0x80>)
 8000854:	2104      	movs	r1, #4
 8000856:	f009 f99f 	bl	8009b98 <sniprintf>
   		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fd3f 	bl	80002e0 <strlen>
 8000862:	4603      	mov	r3, r0
 8000864:	b29a      	uxth	r2, r3
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	4619      	mov	r1, r3
 800086a:	4808      	ldr	r0, [pc, #32]	@ (800088c <Read_Pot+0x7c>)
 800086c:	f006 fd2a 	bl	80072c4 <HAL_UART_Transmit_IT>
     	  HAL_Delay(100);
 8000870:	2064      	movs	r0, #100	@ 0x64
 8000872:	f000 fef5 	bl	8001660 <HAL_Delay>
   		  execute_flag = '0';
 8000876:	4b07      	ldr	r3, [pc, #28]	@ (8000894 <Read_Pot+0x84>)
 8000878:	2230      	movs	r2, #48	@ 0x30
 800087a:	701a      	strb	r2, [r3, #0]
}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	0800a55c 	.word	0x0800a55c
 8000888:	0800a544 	.word	0x0800a544
 800088c:	2400027c 	.word	0x2400027c
 8000890:	0800a54c 	.word	0x0800a54c
 8000894:	24000000 	.word	0x24000000

08000898 <Write_DAC>:

void Write_DAC(){
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0



}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
	...

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b09c      	sub	sp, #112	@ 0x70
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b2:	224c      	movs	r2, #76	@ 0x4c
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f009 f9a2 	bl	8009c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2220      	movs	r2, #32
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f009 f99c 	bl	8009c00 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008c8:	2002      	movs	r0, #2
 80008ca:	f003 fe4f 	bl	800456c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	4b33      	ldr	r3, [pc, #204]	@ (80009a0 <SystemClock_Config+0xf8>)
 80008d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008d6:	4a32      	ldr	r2, [pc, #200]	@ (80009a0 <SystemClock_Config+0xf8>)
 80008d8:	f023 0301 	bic.w	r3, r3, #1
 80008dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008de:	4b30      	ldr	r3, [pc, #192]	@ (80009a0 <SystemClock_Config+0xf8>)
 80008e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	4b2e      	ldr	r3, [pc, #184]	@ (80009a4 <SystemClock_Config+0xfc>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008f0:	4a2c      	ldr	r2, [pc, #176]	@ (80009a4 <SystemClock_Config+0xfc>)
 80008f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b2a      	ldr	r3, [pc, #168]	@ (80009a4 <SystemClock_Config+0xfc>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000904:	bf00      	nop
 8000906:	4b27      	ldr	r3, [pc, #156]	@ (80009a4 <SystemClock_Config+0xfc>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800090e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000912:	d1f8      	bne.n	8000906 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000914:	2303      	movs	r3, #3
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000918:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800091c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800091e:	2301      	movs	r3, #1
 8000920:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000922:	2340      	movs	r3, #64	@ 0x40
 8000924:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000926:	2302      	movs	r3, #2
 8000928:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092a:	2302      	movs	r3, #2
 800092c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800092e:	2301      	movs	r3, #1
 8000930:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000932:	2318      	movs	r3, #24
 8000934:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000936:	2302      	movs	r3, #2
 8000938:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800093a:	2304      	movs	r3, #4
 800093c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800093e:	2302      	movs	r3, #2
 8000940:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000942:	230c      	movs	r3, #12
 8000944:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000946:	2300      	movs	r3, #0
 8000948:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000952:	4618      	mov	r0, r3
 8000954:	f003 fe54 	bl	8004600 <HAL_RCC_OscConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800095e:	f000 fa73 	bl	8000e48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000962:	233f      	movs	r3, #63	@ 0x3f
 8000964:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2101      	movs	r1, #1
 8000986:	4618      	mov	r0, r3
 8000988:	f004 fa94 	bl	8004eb4 <HAL_RCC_ClockConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000992:	f000 fa59 	bl	8000e48 <Error_Handler>
  }
}
 8000996:	bf00      	nop
 8000998:	3770      	adds	r7, #112	@ 0x70
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	58000400 	.word	0x58000400
 80009a4:	58024800 	.word	0x58024800

080009a8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000a28 <MX_ETH_Init+0x80>)
 80009ae:	4a1f      	ldr	r2, [pc, #124]	@ (8000a2c <MX_ETH_Init+0x84>)
 80009b0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a30 <MX_ETH_Init+0x88>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a30 <MX_ETH_Init+0x88>)
 80009ba:	2280      	movs	r2, #128	@ 0x80
 80009bc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009be:	4b1c      	ldr	r3, [pc, #112]	@ (8000a30 <MX_ETH_Init+0x88>)
 80009c0:	22e1      	movs	r2, #225	@ 0xe1
 80009c2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a30 <MX_ETH_Init+0x88>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009ca:	4b19      	ldr	r3, [pc, #100]	@ (8000a30 <MX_ETH_Init+0x88>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009d0:	4b17      	ldr	r3, [pc, #92]	@ (8000a30 <MX_ETH_Init+0x88>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009d6:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <MX_ETH_Init+0x80>)
 80009d8:	4a15      	ldr	r2, [pc, #84]	@ (8000a30 <MX_ETH_Init+0x88>)
 80009da:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009dc:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <MX_ETH_Init+0x80>)
 80009de:	2201      	movs	r2, #1
 80009e0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009e2:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <MX_ETH_Init+0x80>)
 80009e4:	4a13      	ldr	r2, [pc, #76]	@ (8000a34 <MX_ETH_Init+0x8c>)
 80009e6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <MX_ETH_Init+0x80>)
 80009ea:	4a13      	ldr	r2, [pc, #76]	@ (8000a38 <MX_ETH_Init+0x90>)
 80009ec:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <MX_ETH_Init+0x80>)
 80009f0:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80009f4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009f6:	480c      	ldr	r0, [pc, #48]	@ (8000a28 <MX_ETH_Init+0x80>)
 80009f8:	f001 f9da 	bl	8001db0 <HAL_ETH_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000a02:	f000 fa21 	bl	8000e48 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a06:	2238      	movs	r2, #56	@ 0x38
 8000a08:	2100      	movs	r1, #0
 8000a0a:	480c      	ldr	r0, [pc, #48]	@ (8000a3c <MX_ETH_Init+0x94>)
 8000a0c:	f009 f8f8 	bl	8009c00 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a10:	4b0a      	ldr	r3, [pc, #40]	@ (8000a3c <MX_ETH_Init+0x94>)
 8000a12:	2221      	movs	r2, #33	@ 0x21
 8000a14:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a16:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <MX_ETH_Init+0x94>)
 8000a18:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a1c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a1e:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <MX_ETH_Init+0x94>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	24000178 	.word	0x24000178
 8000a2c:	40028000 	.word	0x40028000
 8000a30:	24000800 	.word	0x24000800
 8000a34:	240000c4 	.word	0x240000c4
 8000a38:	24000064 	.word	0x24000064
 8000a3c:	24000140 	.word	0x24000140

08000a40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a46:	4a1c      	ldr	r2, [pc, #112]	@ (8000ab8 <MX_I2C1_Init+0x78>)
 8000a48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000abc <MX_I2C1_Init+0x7c>)
 8000a4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a50:	4b18      	ldr	r3, [pc, #96]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a56:	4b17      	ldr	r3, [pc, #92]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a62:	4b14      	ldr	r3, [pc, #80]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a68:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a7a:	480e      	ldr	r0, [pc, #56]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a7c:	f001 ff96 	bl	80029ac <HAL_I2C_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a86:	f000 f9df 	bl	8000e48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4809      	ldr	r0, [pc, #36]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a8e:	f003 fba5 	bl	80041dc <HAL_I2CEx_ConfigAnalogFilter>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a98:	f000 f9d6 	bl	8000e48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4805      	ldr	r0, [pc, #20]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000aa0:	f003 fbe7 	bl	8004272 <HAL_I2CEx_ConfigDigitalFilter>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000aaa:	f000 f9cd 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	24000228 	.word	0x24000228
 8000ab8:	40005400 	.word	0x40005400
 8000abc:	10707dbc 	.word	0x10707dbc

08000ac0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ac4:	4b22      	ldr	r3, [pc, #136]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000ac6:	4a23      	ldr	r2, [pc, #140]	@ (8000b54 <MX_USART3_UART_Init+0x94>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aca:	4b21      	ldr	r3, [pc, #132]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000acc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ad0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b1c      	ldr	r3, [pc, #112]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b19      	ldr	r3, [pc, #100]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b17      	ldr	r3, [pc, #92]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af6:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000afc:	4b14      	ldr	r3, [pc, #80]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b02:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b08:	4811      	ldr	r0, [pc, #68]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000b0a:	f006 fb8b 	bl	8007224 <HAL_UART_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b14:	f000 f998 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	480d      	ldr	r0, [pc, #52]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000b1c:	f008 fc69 	bl	80093f2 <HAL_UARTEx_SetTxFifoThreshold>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b26:	f000 f98f 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4808      	ldr	r0, [pc, #32]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000b2e:	f008 fc9e 	bl	800946e <HAL_UARTEx_SetRxFifoThreshold>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b38:	f000 f986 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b3c:	4804      	ldr	r0, [pc, #16]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000b3e:	f008 fc1f 	bl	8009380 <HAL_UARTEx_DisableFifoMode>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b48:	f000 f97e 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	2400027c 	.word	0x2400027c
 8000b54:	40004800 	.word	0x40004800

08000b58 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b5c:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b5e:	4a16      	ldr	r2, [pc, #88]	@ (8000bb8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b60:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b62:	4b14      	ldr	r3, [pc, #80]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b64:	2209      	movs	r2, #9
 8000b66:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b68:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b76:	2202      	movs	r2, #2
 8000b78:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b92:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b9e:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ba0:	f003 fbb3 	bl	800430a <HAL_PCD_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000baa:	f000 f94d 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	24000310 	.word	0x24000310
 8000bb8:	40080000 	.word	0x40080000

08000bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08c      	sub	sp, #48	@ 0x30
 8000bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	4b62      	ldr	r3, [pc, #392]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd8:	4a60      	ldr	r2, [pc, #384]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000bda:	f043 0304 	orr.w	r3, r3, #4
 8000bde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000be2:	4b5e      	ldr	r3, [pc, #376]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be8:	f003 0304 	and.w	r3, r3, #4
 8000bec:	61bb      	str	r3, [r7, #24]
 8000bee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bf0:	4b5a      	ldr	r3, [pc, #360]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf6:	4a59      	ldr	r2, [pc, #356]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c00:	4b56      	ldr	r3, [pc, #344]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b53      	ldr	r3, [pc, #332]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c14:	4a51      	ldr	r2, [pc, #324]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c1e:	4b4f      	ldr	r3, [pc, #316]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2c:	4b4b      	ldr	r3, [pc, #300]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c32:	4a4a      	ldr	r2, [pc, #296]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c3c:	4b47      	ldr	r3, [pc, #284]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4a:	4b44      	ldr	r3, [pc, #272]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c50:	4a42      	ldr	r2, [pc, #264]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c52:	f043 0308 	orr.w	r3, r3, #8
 8000c56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c5a:	4b40      	ldr	r3, [pc, #256]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c60:	f003 0308 	and.w	r3, r3, #8
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c68:	4b3c      	ldr	r3, [pc, #240]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6e:	4a3b      	ldr	r2, [pc, #236]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c78:	4b38      	ldr	r3, [pc, #224]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c86:	4b35      	ldr	r3, [pc, #212]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8c:	4a33      	ldr	r2, [pc, #204]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c8e:	f043 0310 	orr.w	r3, r3, #16
 8000c92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c96:	4b31      	ldr	r3, [pc, #196]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9c:	f003 0310 	and.w	r3, r3, #16
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000caa:	482d      	ldr	r0, [pc, #180]	@ (8000d60 <MX_GPIO_Init+0x1a4>)
 8000cac:	f001 fe64 	bl	8002978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cb6:	482b      	ldr	r0, [pc, #172]	@ (8000d64 <MX_GPIO_Init+0x1a8>)
 8000cb8:	f001 fe5e 	bl	8002978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2102      	movs	r1, #2
 8000cc0:	4829      	ldr	r0, [pc, #164]	@ (8000d68 <MX_GPIO_Init+0x1ac>)
 8000cc2:	f001 fe59 	bl	8002978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4824      	ldr	r0, [pc, #144]	@ (8000d6c <MX_GPIO_Init+0x1b0>)
 8000cdc:	f001 fc9c 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ce0:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4819      	ldr	r0, [pc, #100]	@ (8000d60 <MX_GPIO_Init+0x1a4>)
 8000cfa:	f001 fc8d 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000cfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	4813      	ldr	r0, [pc, #76]	@ (8000d64 <MX_GPIO_Init+0x1a8>)
 8000d18:	f001 fc7e 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d1c:	2380      	movs	r3, #128	@ 0x80
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d20:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480f      	ldr	r0, [pc, #60]	@ (8000d70 <MX_GPIO_Init+0x1b4>)
 8000d32:	f001 fc71 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d36:	2302      	movs	r3, #2
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4806      	ldr	r0, [pc, #24]	@ (8000d68 <MX_GPIO_Init+0x1ac>)
 8000d4e:	f001 fc63 	bl	8002618 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d52:	bf00      	nop
 8000d54:	3730      	adds	r7, #48	@ 0x30
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	58024400 	.word	0x58024400
 8000d60:	58020400 	.word	0x58020400
 8000d64:	58020c00 	.word	0x58020c00
 8000d68:	58021000 	.word	0x58021000
 8000d6c:	58020800 	.word	0x58020800
 8000d70:	58021800 	.word	0x58021800

08000d74 <PCF8591_ReadAnalog>:

/* USER CODE BEGIN 4 */

//Função de leitura no modulo sensor
uint8_t PCF8591_ReadAnalog(uint8_t channel)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af02      	add	r7, sp, #8
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
	uint8_t config_byte = 0x40 | (channel & 0x03); // Select the channel (A0, A1, A2, A3)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	f003 0303 	and.w	r3, r3, #3
 8000d86:	b25b      	sxtb	r3, r3
 8000d88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d8c:	b25b      	sxtb	r3, r3
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	73fb      	strb	r3, [r7, #15]
	uint8_t analog_data[2];

	// Send configuration byte to select the ADC channel
	HAL_I2C_Master_Transmit(&hi2c1, PCF8591_ADDRESS, &config_byte, 1, 1000);
 8000d92:	f107 020f 	add.w	r2, r7, #15
 8000d96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	2190      	movs	r1, #144	@ 0x90
 8000da0:	4808      	ldr	r0, [pc, #32]	@ (8000dc4 <PCF8591_ReadAnalog+0x50>)
 8000da2:	f001 fe9f 	bl	8002ae4 <HAL_I2C_Master_Transmit>

	// Read two bytes: first byte is a dummy, second byte is the actual analog value
	HAL_I2C_Master_Receive(&hi2c1, PCF8591_ADDRESS, analog_data, 2, 1000);
 8000da6:	f107 020c 	add.w	r2, r7, #12
 8000daa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	2302      	movs	r3, #2
 8000db2:	2190      	movs	r1, #144	@ 0x90
 8000db4:	4803      	ldr	r0, [pc, #12]	@ (8000dc4 <PCF8591_ReadAnalog+0x50>)
 8000db6:	f001 ffad 	bl	8002d14 <HAL_I2C_Master_Receive>

	// Return the second byte which contains the valid ADC reading
	return analog_data[1];
 8000dba:	7b7b      	ldrb	r3, [r7, #13]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	24000228 	.word	0x24000228

08000dc8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  if (strncmp(rx_buffer, "Read_AIN0", 9) == 0) {
 8000dd0:	2209      	movs	r2, #9
 8000dd2:	4917      	ldr	r1, [pc, #92]	@ (8000e30 <HAL_UART_RxCpltCallback+0x68>)
 8000dd4:	4817      	ldr	r0, [pc, #92]	@ (8000e34 <HAL_UART_RxCpltCallback+0x6c>)
 8000dd6:	f008 ff1b 	bl	8009c10 <strncmp>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <HAL_UART_RxCpltCallback+0x1e>
	  execute_flag = '1';
 8000de0:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <HAL_UART_RxCpltCallback+0x70>)
 8000de2:	2231      	movs	r2, #49	@ 0x31
 8000de4:	701a      	strb	r2, [r3, #0]
  }
  if (strncmp(rx_buffer, "Read_AIN1", 9) == 0) {
 8000de6:	2209      	movs	r2, #9
 8000de8:	4914      	ldr	r1, [pc, #80]	@ (8000e3c <HAL_UART_RxCpltCallback+0x74>)
 8000dea:	4812      	ldr	r0, [pc, #72]	@ (8000e34 <HAL_UART_RxCpltCallback+0x6c>)
 8000dec:	f008 ff10 	bl	8009c10 <strncmp>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d102      	bne.n	8000dfc <HAL_UART_RxCpltCallback+0x34>
	  execute_flag = '2';
 8000df6:	4b10      	ldr	r3, [pc, #64]	@ (8000e38 <HAL_UART_RxCpltCallback+0x70>)
 8000df8:	2232      	movs	r2, #50	@ 0x32
 8000dfa:	701a      	strb	r2, [r3, #0]
  }
  if (strncmp(rx_buffer, "Read_AIN3", 9) == 0) {
 8000dfc:	2209      	movs	r2, #9
 8000dfe:	4910      	ldr	r1, [pc, #64]	@ (8000e40 <HAL_UART_RxCpltCallback+0x78>)
 8000e00:	480c      	ldr	r0, [pc, #48]	@ (8000e34 <HAL_UART_RxCpltCallback+0x6c>)
 8000e02:	f008 ff05 	bl	8009c10 <strncmp>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d102      	bne.n	8000e12 <HAL_UART_RxCpltCallback+0x4a>
	  execute_flag = '3';
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e38 <HAL_UART_RxCpltCallback+0x70>)
 8000e0e:	2233      	movs	r2, #51	@ 0x33
 8000e10:	701a      	strb	r2, [r3, #0]
  }
  if (strncmp(rx_buffer, "Set_DAC_255", 11) == 0) {
 8000e12:	220b      	movs	r2, #11
 8000e14:	490b      	ldr	r1, [pc, #44]	@ (8000e44 <HAL_UART_RxCpltCallback+0x7c>)
 8000e16:	4807      	ldr	r0, [pc, #28]	@ (8000e34 <HAL_UART_RxCpltCallback+0x6c>)
 8000e18:	f008 fefa 	bl	8009c10 <strncmp>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d102      	bne.n	8000e28 <HAL_UART_RxCpltCallback+0x60>
	  execute_flag = '4';
 8000e22:	4b05      	ldr	r3, [pc, #20]	@ (8000e38 <HAL_UART_RxCpltCallback+0x70>)
 8000e24:	2234      	movs	r2, #52	@ 0x34
 8000e26:	701a      	strb	r2, [r3, #0]
  }

}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	0800a564 	.word	0x0800a564
 8000e34:	240007f4 	.word	0x240007f4
 8000e38:	24000000 	.word	0x24000000
 8000e3c:	0800a570 	.word	0x0800a570
 8000e40:	0800a57c 	.word	0x0800a57c
 8000e44:	0800a588 	.word	0x0800a588

08000e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e4c:	b672      	cpsid	i
}
 8000e4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <Error_Handler+0x8>

08000e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e84 <HAL_MspInit+0x30>)
 8000e5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e60:	4a08      	ldr	r2, [pc, #32]	@ (8000e84 <HAL_MspInit+0x30>)
 8000e62:	f043 0302 	orr.w	r3, r3, #2
 8000e66:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e6a:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <HAL_MspInit+0x30>)
 8000e6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	58024400 	.word	0x58024400

08000e88 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08e      	sub	sp, #56	@ 0x38
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a59      	ldr	r2, [pc, #356]	@ (800100c <HAL_ETH_MspInit+0x184>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	f040 80ab 	bne.w	8001002 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000eac:	4b58      	ldr	r3, [pc, #352]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000eae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000eb2:	4a57      	ldr	r2, [pc, #348]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000eb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000eb8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ebc:	4b54      	ldr	r3, [pc, #336]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000ebe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ec2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ec6:	623b      	str	r3, [r7, #32]
 8000ec8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000eca:	4b51      	ldr	r3, [pc, #324]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000ecc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ed0:	4a4f      	ldr	r2, [pc, #316]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000ed2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ed6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000eda:	4b4d      	ldr	r3, [pc, #308]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000edc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ee4:	61fb      	str	r3, [r7, #28]
 8000ee6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000ee8:	4b49      	ldr	r3, [pc, #292]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000eea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000eee:	4a48      	ldr	r2, [pc, #288]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ef8:	4b45      	ldr	r3, [pc, #276]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000efa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f02:	61bb      	str	r3, [r7, #24]
 8000f04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f06:	4b42      	ldr	r3, [pc, #264]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0c:	4a40      	ldr	r2, [pc, #256]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000f0e:	f043 0304 	orr.w	r3, r3, #4
 8000f12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f16:	4b3e      	ldr	r3, [pc, #248]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f24:	4b3a      	ldr	r3, [pc, #232]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2a:	4a39      	ldr	r2, [pc, #228]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f34:	4b36      	ldr	r3, [pc, #216]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f42:	4b33      	ldr	r3, [pc, #204]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f48:	4a31      	ldr	r2, [pc, #196]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000f4a:	f043 0302 	orr.w	r3, r3, #2
 8000f4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f52:	4b2f      	ldr	r3, [pc, #188]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f60:	4b2b      	ldr	r3, [pc, #172]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f66:	4a2a      	ldr	r2, [pc, #168]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000f68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f70:	4b27      	ldr	r3, [pc, #156]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f7e:	2332      	movs	r3, #50	@ 0x32
 8000f80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	2302      	movs	r3, #2
 8000f84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f8e:	230b      	movs	r3, #11
 8000f90:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f96:	4619      	mov	r1, r3
 8000f98:	481e      	ldr	r0, [pc, #120]	@ (8001014 <HAL_ETH_MspInit+0x18c>)
 8000f9a:	f001 fb3d 	bl	8002618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f9e:	2386      	movs	r3, #134	@ 0x86
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fae:	230b      	movs	r3, #11
 8000fb0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4817      	ldr	r0, [pc, #92]	@ (8001018 <HAL_ETH_MspInit+0x190>)
 8000fba:	f001 fb2d 	bl	8002618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fbe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fd0:	230b      	movs	r3, #11
 8000fd2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4810      	ldr	r0, [pc, #64]	@ (800101c <HAL_ETH_MspInit+0x194>)
 8000fdc:	f001 fb1c 	bl	8002618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000fe0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ff2:	230b      	movs	r3, #11
 8000ff4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ff6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4808      	ldr	r0, [pc, #32]	@ (8001020 <HAL_ETH_MspInit+0x198>)
 8000ffe:	f001 fb0b 	bl	8002618 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001002:	bf00      	nop
 8001004:	3738      	adds	r7, #56	@ 0x38
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40028000 	.word	0x40028000
 8001010:	58024400 	.word	0x58024400
 8001014:	58020800 	.word	0x58020800
 8001018:	58020000 	.word	0x58020000
 800101c:	58020400 	.word	0x58020400
 8001020:	58021800 	.word	0x58021800

08001024 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b0ba      	sub	sp, #232	@ 0xe8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800103c:	f107 0310 	add.w	r3, r7, #16
 8001040:	22c0      	movs	r2, #192	@ 0xc0
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f008 fddb 	bl	8009c00 <memset>
  if(hi2c->Instance==I2C1)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a2f      	ldr	r2, [pc, #188]	@ (800110c <HAL_I2C_MspInit+0xe8>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d156      	bne.n	8001102 <HAL_I2C_MspInit+0xde>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001054:	f04f 0208 	mov.w	r2, #8
 8001058:	f04f 0300 	mov.w	r3, #0
 800105c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	4618      	mov	r0, r3
 800106c:	f004 faae 	bl	80055cc <HAL_RCCEx_PeriphCLKConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001076:	f7ff fee7 	bl	8000e48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	4b25      	ldr	r3, [pc, #148]	@ (8001110 <HAL_I2C_MspInit+0xec>)
 800107c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001080:	4a23      	ldr	r2, [pc, #140]	@ (8001110 <HAL_I2C_MspInit+0xec>)
 8001082:	f043 0302 	orr.w	r3, r3, #2
 8001086:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800108a:	4b21      	ldr	r3, [pc, #132]	@ (8001110 <HAL_I2C_MspInit+0xec>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001098:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800109c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a0:	2312      	movs	r3, #18
 80010a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010b2:	2304      	movs	r3, #4
 80010b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010bc:	4619      	mov	r1, r3
 80010be:	4815      	ldr	r0, [pc, #84]	@ (8001114 <HAL_I2C_MspInit+0xf0>)
 80010c0:	f001 faaa 	bl	8002618 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010c4:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <HAL_I2C_MspInit+0xec>)
 80010c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010ca:	4a11      	ldr	r2, [pc, #68]	@ (8001110 <HAL_I2C_MspInit+0xec>)
 80010cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <HAL_I2C_MspInit+0xec>)
 80010d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	201f      	movs	r0, #31
 80010e8:	f000 fbd9 	bl	800189e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80010ec:	201f      	movs	r0, #31
 80010ee:	f000 fbf0 	bl	80018d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	2020      	movs	r0, #32
 80010f8:	f000 fbd1 	bl	800189e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80010fc:	2020      	movs	r0, #32
 80010fe:	f000 fbe8 	bl	80018d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001102:	bf00      	nop
 8001104:	37e8      	adds	r7, #232	@ 0xe8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40005400 	.word	0x40005400
 8001110:	58024400 	.word	0x58024400
 8001114:	58020400 	.word	0x58020400

08001118 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b0ba      	sub	sp, #232	@ 0xe8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	22c0      	movs	r2, #192	@ 0xc0
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f008 fd61 	bl	8009c00 <memset>
  if(huart->Instance==USART3)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a27      	ldr	r2, [pc, #156]	@ (80011e0 <HAL_UART_MspInit+0xc8>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d146      	bne.n	80011d6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001148:	f04f 0202 	mov.w	r2, #2
 800114c:	f04f 0300 	mov.w	r3, #0
 8001150:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001154:	2300      	movs	r3, #0
 8001156:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800115a:	f107 0310 	add.w	r3, r7, #16
 800115e:	4618      	mov	r0, r3
 8001160:	f004 fa34 	bl	80055cc <HAL_RCCEx_PeriphCLKConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800116a:	f7ff fe6d 	bl	8000e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800116e:	4b1d      	ldr	r3, [pc, #116]	@ (80011e4 <HAL_UART_MspInit+0xcc>)
 8001170:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001174:	4a1b      	ldr	r2, [pc, #108]	@ (80011e4 <HAL_UART_MspInit+0xcc>)
 8001176:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800117a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800117e:	4b19      	ldr	r3, [pc, #100]	@ (80011e4 <HAL_UART_MspInit+0xcc>)
 8001180:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001184:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800118c:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <HAL_UART_MspInit+0xcc>)
 800118e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001192:	4a14      	ldr	r2, [pc, #80]	@ (80011e4 <HAL_UART_MspInit+0xcc>)
 8001194:	f043 0308 	orr.w	r3, r3, #8
 8001198:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800119c:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <HAL_UART_MspInit+0xcc>)
 800119e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80011aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011c4:	2307      	movs	r3, #7
 80011c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ca:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011ce:	4619      	mov	r1, r3
 80011d0:	4805      	ldr	r0, [pc, #20]	@ (80011e8 <HAL_UART_MspInit+0xd0>)
 80011d2:	f001 fa21 	bl	8002618 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80011d6:	bf00      	nop
 80011d8:	37e8      	adds	r7, #232	@ 0xe8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40004800 	.word	0x40004800
 80011e4:	58024400 	.word	0x58024400
 80011e8:	58020c00 	.word	0x58020c00

080011ec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b0ba      	sub	sp, #232	@ 0xe8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	22c0      	movs	r2, #192	@ 0xc0
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f008 fcf7 	bl	8009c00 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a30      	ldr	r2, [pc, #192]	@ (80012d8 <HAL_PCD_MspInit+0xec>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d159      	bne.n	80012d0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800121c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001220:	f04f 0300 	mov.w	r3, #0
 8001224:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001228:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800122c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	4618      	mov	r0, r3
 8001236:	f004 f9c9 	bl	80055cc <HAL_RCCEx_PeriphCLKConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001240:	f7ff fe02 	bl	8000e48 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001244:	f003 f9cc 	bl	80045e0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	4b24      	ldr	r3, [pc, #144]	@ (80012dc <HAL_PCD_MspInit+0xf0>)
 800124a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800124e:	4a23      	ldr	r2, [pc, #140]	@ (80012dc <HAL_PCD_MspInit+0xf0>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001258:	4b20      	ldr	r3, [pc, #128]	@ (80012dc <HAL_PCD_MspInit+0xf0>)
 800125a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001266:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800126a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001280:	230a      	movs	r3, #10
 8001282:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001286:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800128a:	4619      	mov	r1, r3
 800128c:	4814      	ldr	r0, [pc, #80]	@ (80012e0 <HAL_PCD_MspInit+0xf4>)
 800128e:	f001 f9c3 	bl	8002618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001292:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001296:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129a:	2300      	movs	r3, #0
 800129c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012aa:	4619      	mov	r1, r3
 80012ac:	480c      	ldr	r0, [pc, #48]	@ (80012e0 <HAL_PCD_MspInit+0xf4>)
 80012ae:	f001 f9b3 	bl	8002618 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012b2:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <HAL_PCD_MspInit+0xf0>)
 80012b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012b8:	4a08      	ldr	r2, [pc, #32]	@ (80012dc <HAL_PCD_MspInit+0xf0>)
 80012ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80012be:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <HAL_PCD_MspInit+0xf0>)
 80012c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80012d0:	bf00      	nop
 80012d2:	37e8      	adds	r7, #232	@ 0xe8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40080000 	.word	0x40080000
 80012dc:	58024400 	.word	0x58024400
 80012e0:	58020000 	.word	0x58020000

080012e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <NMI_Handler+0x4>

080012ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <HardFault_Handler+0x4>

080012f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <MemManage_Handler+0x4>

080012fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <UsageFault_Handler+0x4>

0800130c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800133a:	f000 f971 	bl	8001620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001348:	4802      	ldr	r0, [pc, #8]	@ (8001354 <I2C1_EV_IRQHandler+0x10>)
 800134a:	f001 fdd9 	bl	8002f00 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	24000228 	.word	0x24000228

08001358 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800135c:	4802      	ldr	r0, [pc, #8]	@ (8001368 <I2C1_ER_IRQHandler+0x10>)
 800135e:	f001 fde9 	bl	8002f34 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	24000228 	.word	0x24000228

0800136c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001374:	4a14      	ldr	r2, [pc, #80]	@ (80013c8 <_sbrk+0x5c>)
 8001376:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <_sbrk+0x60>)
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001380:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <_sbrk+0x64>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d102      	bne.n	800138e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001388:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <_sbrk+0x64>)
 800138a:	4a12      	ldr	r2, [pc, #72]	@ (80013d4 <_sbrk+0x68>)
 800138c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138e:	4b10      	ldr	r3, [pc, #64]	@ (80013d0 <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	429a      	cmp	r2, r3
 800139a:	d207      	bcs.n	80013ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800139c:	f008 fc4a 	bl	8009c34 <__errno>
 80013a0:	4603      	mov	r3, r0
 80013a2:	220c      	movs	r2, #12
 80013a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
 80013aa:	e009      	b.n	80013c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ac:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b2:	4b07      	ldr	r3, [pc, #28]	@ (80013d0 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	4a05      	ldr	r2, [pc, #20]	@ (80013d0 <_sbrk+0x64>)
 80013bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013be:	68fb      	ldr	r3, [r7, #12]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	24080000 	.word	0x24080000
 80013cc:	00000400 	.word	0x00000400
 80013d0:	24000808 	.word	0x24000808
 80013d4:	24000958 	.word	0x24000958

080013d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001410 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013dc:	f000 f826 	bl	800142c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e0:	480c      	ldr	r0, [pc, #48]	@ (8001414 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013e2:	490d      	ldr	r1, [pc, #52]	@ (8001418 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013e4:	4a0d      	ldr	r2, [pc, #52]	@ (800141c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e8:	e002      	b.n	80013f0 <LoopCopyDataInit>

080013ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ee:	3304      	adds	r3, #4

080013f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f4:	d3f9      	bcc.n	80013ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001420 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001424 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013fc:	e001      	b.n	8001402 <LoopFillZerobss>

080013fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001400:	3204      	adds	r2, #4

08001402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001404:	d3fb      	bcc.n	80013fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001406:	f008 fc1b 	bl	8009c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800140a:	f7ff f939 	bl	8000680 <main>
  bx  lr
 800140e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001410:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001414:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001418:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 800141c:	0800a610 	.word	0x0800a610
  ldr r2, =_sbss
 8001420:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 8001424:	24000958 	.word	0x24000958

08001428 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001428:	e7fe      	b.n	8001428 <ADC3_IRQHandler>
	...

0800142c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001430:	4b37      	ldr	r3, [pc, #220]	@ (8001510 <SystemInit+0xe4>)
 8001432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001436:	4a36      	ldr	r2, [pc, #216]	@ (8001510 <SystemInit+0xe4>)
 8001438:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800143c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001440:	4b34      	ldr	r3, [pc, #208]	@ (8001514 <SystemInit+0xe8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 030f 	and.w	r3, r3, #15
 8001448:	2b06      	cmp	r3, #6
 800144a:	d807      	bhi.n	800145c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800144c:	4b31      	ldr	r3, [pc, #196]	@ (8001514 <SystemInit+0xe8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f023 030f 	bic.w	r3, r3, #15
 8001454:	4a2f      	ldr	r2, [pc, #188]	@ (8001514 <SystemInit+0xe8>)
 8001456:	f043 0307 	orr.w	r3, r3, #7
 800145a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800145c:	4b2e      	ldr	r3, [pc, #184]	@ (8001518 <SystemInit+0xec>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a2d      	ldr	r2, [pc, #180]	@ (8001518 <SystemInit+0xec>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001468:	4b2b      	ldr	r3, [pc, #172]	@ (8001518 <SystemInit+0xec>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800146e:	4b2a      	ldr	r3, [pc, #168]	@ (8001518 <SystemInit+0xec>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	4929      	ldr	r1, [pc, #164]	@ (8001518 <SystemInit+0xec>)
 8001474:	4b29      	ldr	r3, [pc, #164]	@ (800151c <SystemInit+0xf0>)
 8001476:	4013      	ands	r3, r2
 8001478:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800147a:	4b26      	ldr	r3, [pc, #152]	@ (8001514 <SystemInit+0xe8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	2b00      	cmp	r3, #0
 8001484:	d007      	beq.n	8001496 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001486:	4b23      	ldr	r3, [pc, #140]	@ (8001514 <SystemInit+0xe8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f023 030f 	bic.w	r3, r3, #15
 800148e:	4a21      	ldr	r2, [pc, #132]	@ (8001514 <SystemInit+0xe8>)
 8001490:	f043 0307 	orr.w	r3, r3, #7
 8001494:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001496:	4b20      	ldr	r3, [pc, #128]	@ (8001518 <SystemInit+0xec>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800149c:	4b1e      	ldr	r3, [pc, #120]	@ (8001518 <SystemInit+0xec>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001518 <SystemInit+0xec>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001518 <SystemInit+0xec>)
 80014aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001520 <SystemInit+0xf4>)
 80014ac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001518 <SystemInit+0xec>)
 80014b0:	4a1c      	ldr	r2, [pc, #112]	@ (8001524 <SystemInit+0xf8>)
 80014b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014b4:	4b18      	ldr	r3, [pc, #96]	@ (8001518 <SystemInit+0xec>)
 80014b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001528 <SystemInit+0xfc>)
 80014b8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014ba:	4b17      	ldr	r3, [pc, #92]	@ (8001518 <SystemInit+0xec>)
 80014bc:	2200      	movs	r2, #0
 80014be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014c0:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <SystemInit+0xec>)
 80014c2:	4a19      	ldr	r2, [pc, #100]	@ (8001528 <SystemInit+0xfc>)
 80014c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014c6:	4b14      	ldr	r3, [pc, #80]	@ (8001518 <SystemInit+0xec>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014cc:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <SystemInit+0xec>)
 80014ce:	4a16      	ldr	r2, [pc, #88]	@ (8001528 <SystemInit+0xfc>)
 80014d0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014d2:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <SystemInit+0xec>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001518 <SystemInit+0xec>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001518 <SystemInit+0xec>)
 80014de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <SystemInit+0xec>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80014ea:	4b10      	ldr	r3, [pc, #64]	@ (800152c <SystemInit+0x100>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <SystemInit+0x104>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80014f6:	d202      	bcs.n	80014fe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80014f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <SystemInit+0x108>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001538 <SystemInit+0x10c>)
 8001500:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001504:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00
 8001514:	52002000 	.word	0x52002000
 8001518:	58024400 	.word	0x58024400
 800151c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001520:	02020200 	.word	0x02020200
 8001524:	01ff0000 	.word	0x01ff0000
 8001528:	01010280 	.word	0x01010280
 800152c:	5c001000 	.word	0x5c001000
 8001530:	ffff0000 	.word	0xffff0000
 8001534:	51008108 	.word	0x51008108
 8001538:	52004000 	.word	0x52004000

0800153c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001542:	2003      	movs	r0, #3
 8001544:	f000 f9a0 	bl	8001888 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001548:	f003 fe6a 	bl	8005220 <HAL_RCC_GetSysClockFreq>
 800154c:	4602      	mov	r2, r0
 800154e:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <HAL_Init+0x68>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	0a1b      	lsrs	r3, r3, #8
 8001554:	f003 030f 	and.w	r3, r3, #15
 8001558:	4913      	ldr	r1, [pc, #76]	@ (80015a8 <HAL_Init+0x6c>)
 800155a:	5ccb      	ldrb	r3, [r1, r3]
 800155c:	f003 031f 	and.w	r3, r3, #31
 8001560:	fa22 f303 	lsr.w	r3, r2, r3
 8001564:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001566:	4b0f      	ldr	r3, [pc, #60]	@ (80015a4 <HAL_Init+0x68>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	4a0e      	ldr	r2, [pc, #56]	@ (80015a8 <HAL_Init+0x6c>)
 8001570:	5cd3      	ldrb	r3, [r2, r3]
 8001572:	f003 031f 	and.w	r3, r3, #31
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	fa22 f303 	lsr.w	r3, r2, r3
 800157c:	4a0b      	ldr	r2, [pc, #44]	@ (80015ac <HAL_Init+0x70>)
 800157e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001580:	4a0b      	ldr	r2, [pc, #44]	@ (80015b0 <HAL_Init+0x74>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001586:	2000      	movs	r0, #0
 8001588:	f000 f814 	bl	80015b4 <HAL_InitTick>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e002      	b.n	800159c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001596:	f7ff fc5d 	bl	8000e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	58024400 	.word	0x58024400
 80015a8:	0800a594 	.word	0x0800a594
 80015ac:	24000008 	.word	0x24000008
 80015b0:	24000004 	.word	0x24000004

080015b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015bc:	4b15      	ldr	r3, [pc, #84]	@ (8001614 <HAL_InitTick+0x60>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e021      	b.n	800160c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015c8:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <HAL_InitTick+0x64>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <HAL_InitTick+0x60>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4619      	mov	r1, r3
 80015d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015da:	fbb2 f3f3 	udiv	r3, r2, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 f985 	bl	80018ee <HAL_SYSTICK_Config>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00e      	b.n	800160c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b0f      	cmp	r3, #15
 80015f2:	d80a      	bhi.n	800160a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f4:	2200      	movs	r2, #0
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295
 80015fc:	f000 f94f 	bl	800189e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001600:	4a06      	ldr	r2, [pc, #24]	@ (800161c <HAL_InitTick+0x68>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	e000      	b.n	800160c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	24000010 	.word	0x24000010
 8001618:	24000004 	.word	0x24000004
 800161c:	2400000c 	.word	0x2400000c

08001620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001624:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <HAL_IncTick+0x20>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <HAL_IncTick+0x24>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4413      	add	r3, r2
 8001630:	4a04      	ldr	r2, [pc, #16]	@ (8001644 <HAL_IncTick+0x24>)
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	24000010 	.word	0x24000010
 8001644:	2400080c 	.word	0x2400080c

08001648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return uwTick;
 800164c:	4b03      	ldr	r3, [pc, #12]	@ (800165c <HAL_GetTick+0x14>)
 800164e:	681b      	ldr	r3, [r3, #0]
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	2400080c 	.word	0x2400080c

08001660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001668:	f7ff ffee 	bl	8001648 <HAL_GetTick>
 800166c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001678:	d005      	beq.n	8001686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800167a:	4b0a      	ldr	r3, [pc, #40]	@ (80016a4 <HAL_Delay+0x44>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4413      	add	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001686:	bf00      	nop
 8001688:	f7ff ffde 	bl	8001648 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	429a      	cmp	r2, r3
 8001696:	d8f7      	bhi.n	8001688 <HAL_Delay+0x28>
  {
  }
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	24000010 	.word	0x24000010

080016a8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016ac:	4b03      	ldr	r3, [pc, #12]	@ (80016bc <HAL_GetREVID+0x14>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	0c1b      	lsrs	r3, r3, #16
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	5c001000 	.word	0x5c001000

080016c0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80016c8:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80016d0:	4904      	ldr	r1, [pc, #16]	@ (80016e4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	604b      	str	r3, [r1, #4]
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	58000400 	.word	0x58000400

080016e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <__NVIC_SetPriorityGrouping+0x40>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001704:	4013      	ands	r3, r2
 8001706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001710:	4b06      	ldr	r3, [pc, #24]	@ (800172c <__NVIC_SetPriorityGrouping+0x44>)
 8001712:	4313      	orrs	r3, r2
 8001714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001716:	4a04      	ldr	r2, [pc, #16]	@ (8001728 <__NVIC_SetPriorityGrouping+0x40>)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	60d3      	str	r3, [r2, #12]
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00
 800172c:	05fa0000 	.word	0x05fa0000

08001730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001734:	4b04      	ldr	r3, [pc, #16]	@ (8001748 <__NVIC_GetPriorityGrouping+0x18>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	0a1b      	lsrs	r3, r3, #8
 800173a:	f003 0307 	and.w	r3, r3, #7
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001756:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800175a:	2b00      	cmp	r3, #0
 800175c:	db0b      	blt.n	8001776 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	f003 021f 	and.w	r2, r3, #31
 8001764:	4907      	ldr	r1, [pc, #28]	@ (8001784 <__NVIC_EnableIRQ+0x38>)
 8001766:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800176a:	095b      	lsrs	r3, r3, #5
 800176c:	2001      	movs	r0, #1
 800176e:	fa00 f202 	lsl.w	r2, r0, r2
 8001772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000e100 	.word	0xe000e100

08001788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001794:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001798:	2b00      	cmp	r3, #0
 800179a:	db0a      	blt.n	80017b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	490c      	ldr	r1, [pc, #48]	@ (80017d4 <__NVIC_SetPriority+0x4c>)
 80017a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017a6:	0112      	lsls	r2, r2, #4
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	440b      	add	r3, r1
 80017ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b0:	e00a      	b.n	80017c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4908      	ldr	r1, [pc, #32]	@ (80017d8 <__NVIC_SetPriority+0x50>)
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	3b04      	subs	r3, #4
 80017c0:	0112      	lsls	r2, r2, #4
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	440b      	add	r3, r1
 80017c6:	761a      	strb	r2, [r3, #24]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000e100 	.word	0xe000e100
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b089      	sub	sp, #36	@ 0x24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f1c3 0307 	rsb	r3, r3, #7
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	bf28      	it	cs
 80017fa:	2304      	movcs	r3, #4
 80017fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3304      	adds	r3, #4
 8001802:	2b06      	cmp	r3, #6
 8001804:	d902      	bls.n	800180c <NVIC_EncodePriority+0x30>
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3b03      	subs	r3, #3
 800180a:	e000      	b.n	800180e <NVIC_EncodePriority+0x32>
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	f04f 32ff 	mov.w	r2, #4294967295
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43da      	mvns	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	401a      	ands	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001824:	f04f 31ff 	mov.w	r1, #4294967295
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa01 f303 	lsl.w	r3, r1, r3
 800182e:	43d9      	mvns	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	4313      	orrs	r3, r2
         );
}
 8001836:	4618      	mov	r0, r3
 8001838:	3724      	adds	r7, #36	@ 0x24
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001854:	d301      	bcc.n	800185a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001856:	2301      	movs	r3, #1
 8001858:	e00f      	b.n	800187a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185a:	4a0a      	ldr	r2, [pc, #40]	@ (8001884 <SysTick_Config+0x40>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3b01      	subs	r3, #1
 8001860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001862:	210f      	movs	r1, #15
 8001864:	f04f 30ff 	mov.w	r0, #4294967295
 8001868:	f7ff ff8e 	bl	8001788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800186c:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <SysTick_Config+0x40>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001872:	4b04      	ldr	r3, [pc, #16]	@ (8001884 <SysTick_Config+0x40>)
 8001874:	2207      	movs	r2, #7
 8001876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	e000e010 	.word	0xe000e010

08001888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff ff29 	bl	80016e8 <__NVIC_SetPriorityGrouping>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b086      	sub	sp, #24
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	4603      	mov	r3, r0
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018ac:	f7ff ff40 	bl	8001730 <__NVIC_GetPriorityGrouping>
 80018b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	6978      	ldr	r0, [r7, #20]
 80018b8:	f7ff ff90 	bl	80017dc <NVIC_EncodePriority>
 80018bc:	4602      	mov	r2, r0
 80018be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff5f 	bl	8001788 <__NVIC_SetPriority>
}
 80018ca:	bf00      	nop
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff33 	bl	800174c <__NVIC_EnableIRQ>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ffa4 	bl	8001844 <SysTick_Config>
 80018fc:	4603      	mov	r3, r0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e237      	b.n	8001d8a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d004      	beq.n	8001930 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2280      	movs	r2, #128	@ 0x80
 800192a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e22c      	b.n	8001d8a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a5c      	ldr	r2, [pc, #368]	@ (8001aa8 <HAL_DMA_Abort_IT+0x1a0>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d04a      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a5b      	ldr	r2, [pc, #364]	@ (8001aac <HAL_DMA_Abort_IT+0x1a4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d045      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a59      	ldr	r2, [pc, #356]	@ (8001ab0 <HAL_DMA_Abort_IT+0x1a8>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d040      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a58      	ldr	r2, [pc, #352]	@ (8001ab4 <HAL_DMA_Abort_IT+0x1ac>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d03b      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a56      	ldr	r2, [pc, #344]	@ (8001ab8 <HAL_DMA_Abort_IT+0x1b0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d036      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a55      	ldr	r2, [pc, #340]	@ (8001abc <HAL_DMA_Abort_IT+0x1b4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d031      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a53      	ldr	r2, [pc, #332]	@ (8001ac0 <HAL_DMA_Abort_IT+0x1b8>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d02c      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a52      	ldr	r2, [pc, #328]	@ (8001ac4 <HAL_DMA_Abort_IT+0x1bc>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d027      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a50      	ldr	r2, [pc, #320]	@ (8001ac8 <HAL_DMA_Abort_IT+0x1c0>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d022      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a4f      	ldr	r2, [pc, #316]	@ (8001acc <HAL_DMA_Abort_IT+0x1c4>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d01d      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a4d      	ldr	r2, [pc, #308]	@ (8001ad0 <HAL_DMA_Abort_IT+0x1c8>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d018      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a4c      	ldr	r2, [pc, #304]	@ (8001ad4 <HAL_DMA_Abort_IT+0x1cc>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d013      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a4a      	ldr	r2, [pc, #296]	@ (8001ad8 <HAL_DMA_Abort_IT+0x1d0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d00e      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a49      	ldr	r2, [pc, #292]	@ (8001adc <HAL_DMA_Abort_IT+0x1d4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d009      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a47      	ldr	r2, [pc, #284]	@ (8001ae0 <HAL_DMA_Abort_IT+0x1d8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d004      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xc8>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a46      	ldr	r2, [pc, #280]	@ (8001ae4 <HAL_DMA_Abort_IT+0x1dc>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d101      	bne.n	80019d4 <HAL_DMA_Abort_IT+0xcc>
 80019d0:	2301      	movs	r3, #1
 80019d2:	e000      	b.n	80019d6 <HAL_DMA_Abort_IT+0xce>
 80019d4:	2300      	movs	r3, #0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 8086 	beq.w	8001ae8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2204      	movs	r2, #4
 80019e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a2f      	ldr	r2, [pc, #188]	@ (8001aa8 <HAL_DMA_Abort_IT+0x1a0>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d04a      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a2e      	ldr	r2, [pc, #184]	@ (8001aac <HAL_DMA_Abort_IT+0x1a4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d045      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a2c      	ldr	r2, [pc, #176]	@ (8001ab0 <HAL_DMA_Abort_IT+0x1a8>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d040      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a2b      	ldr	r2, [pc, #172]	@ (8001ab4 <HAL_DMA_Abort_IT+0x1ac>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d03b      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a29      	ldr	r2, [pc, #164]	@ (8001ab8 <HAL_DMA_Abort_IT+0x1b0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d036      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a28      	ldr	r2, [pc, #160]	@ (8001abc <HAL_DMA_Abort_IT+0x1b4>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d031      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a26      	ldr	r2, [pc, #152]	@ (8001ac0 <HAL_DMA_Abort_IT+0x1b8>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d02c      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a25      	ldr	r2, [pc, #148]	@ (8001ac4 <HAL_DMA_Abort_IT+0x1bc>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d027      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a23      	ldr	r2, [pc, #140]	@ (8001ac8 <HAL_DMA_Abort_IT+0x1c0>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d022      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a22      	ldr	r2, [pc, #136]	@ (8001acc <HAL_DMA_Abort_IT+0x1c4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d01d      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a20      	ldr	r2, [pc, #128]	@ (8001ad0 <HAL_DMA_Abort_IT+0x1c8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d018      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a1f      	ldr	r2, [pc, #124]	@ (8001ad4 <HAL_DMA_Abort_IT+0x1cc>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d013      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a1d      	ldr	r2, [pc, #116]	@ (8001ad8 <HAL_DMA_Abort_IT+0x1d0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d00e      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8001adc <HAL_DMA_Abort_IT+0x1d4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d009      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a1a      	ldr	r2, [pc, #104]	@ (8001ae0 <HAL_DMA_Abort_IT+0x1d8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d004      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x17c>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a19      	ldr	r2, [pc, #100]	@ (8001ae4 <HAL_DMA_Abort_IT+0x1dc>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d108      	bne.n	8001a96 <HAL_DMA_Abort_IT+0x18e>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0201 	bic.w	r2, r2, #1
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	e178      	b.n	8001d88 <HAL_DMA_Abort_IT+0x480>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0201 	bic.w	r2, r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	e16f      	b.n	8001d88 <HAL_DMA_Abort_IT+0x480>
 8001aa8:	40020010 	.word	0x40020010
 8001aac:	40020028 	.word	0x40020028
 8001ab0:	40020040 	.word	0x40020040
 8001ab4:	40020058 	.word	0x40020058
 8001ab8:	40020070 	.word	0x40020070
 8001abc:	40020088 	.word	0x40020088
 8001ac0:	400200a0 	.word	0x400200a0
 8001ac4:	400200b8 	.word	0x400200b8
 8001ac8:	40020410 	.word	0x40020410
 8001acc:	40020428 	.word	0x40020428
 8001ad0:	40020440 	.word	0x40020440
 8001ad4:	40020458 	.word	0x40020458
 8001ad8:	40020470 	.word	0x40020470
 8001adc:	40020488 	.word	0x40020488
 8001ae0:	400204a0 	.word	0x400204a0
 8001ae4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 020e 	bic.w	r2, r2, #14
 8001af6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a6c      	ldr	r2, [pc, #432]	@ (8001cb0 <HAL_DMA_Abort_IT+0x3a8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d04a      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a6b      	ldr	r2, [pc, #428]	@ (8001cb4 <HAL_DMA_Abort_IT+0x3ac>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d045      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a69      	ldr	r2, [pc, #420]	@ (8001cb8 <HAL_DMA_Abort_IT+0x3b0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d040      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a68      	ldr	r2, [pc, #416]	@ (8001cbc <HAL_DMA_Abort_IT+0x3b4>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d03b      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a66      	ldr	r2, [pc, #408]	@ (8001cc0 <HAL_DMA_Abort_IT+0x3b8>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d036      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a65      	ldr	r2, [pc, #404]	@ (8001cc4 <HAL_DMA_Abort_IT+0x3bc>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d031      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a63      	ldr	r2, [pc, #396]	@ (8001cc8 <HAL_DMA_Abort_IT+0x3c0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d02c      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a62      	ldr	r2, [pc, #392]	@ (8001ccc <HAL_DMA_Abort_IT+0x3c4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d027      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a60      	ldr	r2, [pc, #384]	@ (8001cd0 <HAL_DMA_Abort_IT+0x3c8>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d022      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a5f      	ldr	r2, [pc, #380]	@ (8001cd4 <HAL_DMA_Abort_IT+0x3cc>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d01d      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a5d      	ldr	r2, [pc, #372]	@ (8001cd8 <HAL_DMA_Abort_IT+0x3d0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d018      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a5c      	ldr	r2, [pc, #368]	@ (8001cdc <HAL_DMA_Abort_IT+0x3d4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d013      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a5a      	ldr	r2, [pc, #360]	@ (8001ce0 <HAL_DMA_Abort_IT+0x3d8>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d00e      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a59      	ldr	r2, [pc, #356]	@ (8001ce4 <HAL_DMA_Abort_IT+0x3dc>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d009      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a57      	ldr	r2, [pc, #348]	@ (8001ce8 <HAL_DMA_Abort_IT+0x3e0>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d004      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x290>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a56      	ldr	r2, [pc, #344]	@ (8001cec <HAL_DMA_Abort_IT+0x3e4>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d108      	bne.n	8001baa <HAL_DMA_Abort_IT+0x2a2>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0201 	bic.w	r2, r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	e007      	b.n	8001bba <HAL_DMA_Abort_IT+0x2b2>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0201 	bic.w	r2, r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a3c      	ldr	r2, [pc, #240]	@ (8001cb0 <HAL_DMA_Abort_IT+0x3a8>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d072      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a3a      	ldr	r2, [pc, #232]	@ (8001cb4 <HAL_DMA_Abort_IT+0x3ac>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d06d      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a39      	ldr	r2, [pc, #228]	@ (8001cb8 <HAL_DMA_Abort_IT+0x3b0>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d068      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a37      	ldr	r2, [pc, #220]	@ (8001cbc <HAL_DMA_Abort_IT+0x3b4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d063      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a36      	ldr	r2, [pc, #216]	@ (8001cc0 <HAL_DMA_Abort_IT+0x3b8>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d05e      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a34      	ldr	r2, [pc, #208]	@ (8001cc4 <HAL_DMA_Abort_IT+0x3bc>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d059      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a33      	ldr	r2, [pc, #204]	@ (8001cc8 <HAL_DMA_Abort_IT+0x3c0>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d054      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a31      	ldr	r2, [pc, #196]	@ (8001ccc <HAL_DMA_Abort_IT+0x3c4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d04f      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a30      	ldr	r2, [pc, #192]	@ (8001cd0 <HAL_DMA_Abort_IT+0x3c8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d04a      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a2e      	ldr	r2, [pc, #184]	@ (8001cd4 <HAL_DMA_Abort_IT+0x3cc>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d045      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a2d      	ldr	r2, [pc, #180]	@ (8001cd8 <HAL_DMA_Abort_IT+0x3d0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d040      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a2b      	ldr	r2, [pc, #172]	@ (8001cdc <HAL_DMA_Abort_IT+0x3d4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d03b      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a2a      	ldr	r2, [pc, #168]	@ (8001ce0 <HAL_DMA_Abort_IT+0x3d8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d036      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a28      	ldr	r2, [pc, #160]	@ (8001ce4 <HAL_DMA_Abort_IT+0x3dc>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d031      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a27      	ldr	r2, [pc, #156]	@ (8001ce8 <HAL_DMA_Abort_IT+0x3e0>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d02c      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a25      	ldr	r2, [pc, #148]	@ (8001cec <HAL_DMA_Abort_IT+0x3e4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d027      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a24      	ldr	r2, [pc, #144]	@ (8001cf0 <HAL_DMA_Abort_IT+0x3e8>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d022      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a22      	ldr	r2, [pc, #136]	@ (8001cf4 <HAL_DMA_Abort_IT+0x3ec>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d01d      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a21      	ldr	r2, [pc, #132]	@ (8001cf8 <HAL_DMA_Abort_IT+0x3f0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d018      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a1f      	ldr	r2, [pc, #124]	@ (8001cfc <HAL_DMA_Abort_IT+0x3f4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d013      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a1e      	ldr	r2, [pc, #120]	@ (8001d00 <HAL_DMA_Abort_IT+0x3f8>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d00e      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1c      	ldr	r2, [pc, #112]	@ (8001d04 <HAL_DMA_Abort_IT+0x3fc>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d009      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8001d08 <HAL_DMA_Abort_IT+0x400>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d004      	beq.n	8001caa <HAL_DMA_Abort_IT+0x3a2>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a19      	ldr	r2, [pc, #100]	@ (8001d0c <HAL_DMA_Abort_IT+0x404>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d132      	bne.n	8001d10 <HAL_DMA_Abort_IT+0x408>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e031      	b.n	8001d12 <HAL_DMA_Abort_IT+0x40a>
 8001cae:	bf00      	nop
 8001cb0:	40020010 	.word	0x40020010
 8001cb4:	40020028 	.word	0x40020028
 8001cb8:	40020040 	.word	0x40020040
 8001cbc:	40020058 	.word	0x40020058
 8001cc0:	40020070 	.word	0x40020070
 8001cc4:	40020088 	.word	0x40020088
 8001cc8:	400200a0 	.word	0x400200a0
 8001ccc:	400200b8 	.word	0x400200b8
 8001cd0:	40020410 	.word	0x40020410
 8001cd4:	40020428 	.word	0x40020428
 8001cd8:	40020440 	.word	0x40020440
 8001cdc:	40020458 	.word	0x40020458
 8001ce0:	40020470 	.word	0x40020470
 8001ce4:	40020488 	.word	0x40020488
 8001ce8:	400204a0 	.word	0x400204a0
 8001cec:	400204b8 	.word	0x400204b8
 8001cf0:	58025408 	.word	0x58025408
 8001cf4:	5802541c 	.word	0x5802541c
 8001cf8:	58025430 	.word	0x58025430
 8001cfc:	58025444 	.word	0x58025444
 8001d00:	58025458 	.word	0x58025458
 8001d04:	5802546c 	.word	0x5802546c
 8001d08:	58025480 	.word	0x58025480
 8001d0c:	58025494 	.word	0x58025494
 8001d10:	2300      	movs	r3, #0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d028      	beq.n	8001d68 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d24:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d30:	f003 031f 	and.w	r3, r3, #31
 8001d34:	2201      	movs	r2, #1
 8001d36:	409a      	lsls	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001d44:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00c      	beq.n	8001d68 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d5c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001d66:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop

08001d94 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001da2:	b2db      	uxtb	r3, r3
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e0e3      	b.n	8001f8a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d106      	bne.n	8001dda <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2223      	movs	r2, #35	@ 0x23
 8001dd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff f857 	bl	8000e88 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dda:	4b6e      	ldr	r3, [pc, #440]	@ (8001f94 <HAL_ETH_Init+0x1e4>)
 8001ddc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001de0:	4a6c      	ldr	r2, [pc, #432]	@ (8001f94 <HAL_ETH_Init+0x1e4>)
 8001de2:	f043 0302 	orr.w	r3, r3, #2
 8001de6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001dea:	4b6a      	ldr	r3, [pc, #424]	@ (8001f94 <HAL_ETH_Init+0x1e4>)
 8001dec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	7a1b      	ldrb	r3, [r3, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d103      	bne.n	8001e08 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001e00:	2000      	movs	r0, #0
 8001e02:	f7ff fc5d 	bl	80016c0 <HAL_SYSCFG_ETHInterfaceSelect>
 8001e06:	e003      	b.n	8001e10 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001e08:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001e0c:	f7ff fc58 	bl	80016c0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001e10:	4b61      	ldr	r3, [pc, #388]	@ (8001f98 <HAL_ETH_Init+0x1e8>)
 8001e12:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e2a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e2c:	f7ff fc0c 	bl	8001648 <HAL_GetTick>
 8001e30:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001e32:	e011      	b.n	8001e58 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001e34:	f7ff fc08 	bl	8001648 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001e42:	d909      	bls.n	8001e58 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2204      	movs	r2, #4
 8001e48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	22e0      	movs	r2, #224	@ 0xe0
 8001e50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e098      	b.n	8001f8a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1e4      	bne.n	8001e34 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f89e 	bl	8001fac <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001e70:	f003 fb50 	bl	8005514 <HAL_RCC_GetHCLKFreq>
 8001e74:	4603      	mov	r3, r0
 8001e76:	4a49      	ldr	r2, [pc, #292]	@ (8001f9c <HAL_ETH_Init+0x1ec>)
 8001e78:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7c:	0c9a      	lsrs	r2, r3, #18
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	3a01      	subs	r2, #1
 8001e84:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 fa81 	bl	8002390 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e96:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001e9a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001ea6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001eaa:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d009      	beq.n	8001ece <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	22e0      	movs	r2, #224	@ 0xe0
 8001ec6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e05d      	b.n	8001f8a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ed6:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001eda:	4b31      	ldr	r3, [pc, #196]	@ (8001fa0 <HAL_ETH_Init+0x1f0>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6952      	ldr	r2, [r2, #20]
 8001ee2:	0051      	lsls	r1, r2, #1
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	430b      	orrs	r3, r1
 8001eea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001eee:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 fae9 	bl	80024ca <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 fb2f 	bl	800255c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	3305      	adds	r3, #5
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	021a      	lsls	r2, r3, #8
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	4619      	mov	r1, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	3303      	adds	r3, #3
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	061a      	lsls	r2, r3, #24
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	041b      	lsls	r3, r3, #16
 8001f30:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	3301      	adds	r3, #1
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001f3c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001f4a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001f4c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b11      	ldr	r3, [pc, #68]	@ (8001fa4 <HAL_ETH_Init+0x1f4>)
 8001f5e:	430b      	orrs	r3, r1
 8001f60:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa8 <HAL_ETH_Init+0x1f8>)
 8001f72:	430b      	orrs	r3, r1
 8001f74:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2210      	movs	r2, #16
 8001f84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	58024400 	.word	0x58024400
 8001f98:	58000400 	.word	0x58000400
 8001f9c:	431bde83 	.word	0x431bde83
 8001fa0:	ffff8001 	.word	0xffff8001
 8001fa4:	0c020060 	.word	0x0c020060
 8001fa8:	0c20c000 	.word	0x0c20c000

08001fac <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001fbc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001fc4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001fc6:	f003 faa5 	bl	8005514 <HAL_RCC_GetHCLKFreq>
 8001fca:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	4a1a      	ldr	r2, [pc, #104]	@ (8002038 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d804      	bhi.n	8001fde <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	e022      	b.n	8002024 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	4a16      	ldr	r2, [pc, #88]	@ (800203c <HAL_ETH_SetMDIOClockRange+0x90>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d204      	bcs.n	8001ff0 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	e019      	b.n	8002024 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	4a13      	ldr	r2, [pc, #76]	@ (8002040 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d915      	bls.n	8002024 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	4a12      	ldr	r2, [pc, #72]	@ (8002044 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d804      	bhi.n	800200a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	e00c      	b.n	8002024 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	4a0e      	ldr	r2, [pc, #56]	@ (8002048 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d804      	bhi.n	800201c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	e003      	b.n	8002024 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002022:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	02160ebf 	.word	0x02160ebf
 800203c:	03938700 	.word	0x03938700
 8002040:	05f5e0ff 	.word	0x05f5e0ff
 8002044:	08f0d17f 	.word	0x08f0d17f
 8002048:	0ee6b27f 	.word	0x0ee6b27f

0800204c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800205e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	791b      	ldrb	r3, [r3, #4]
 8002064:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002066:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	7b1b      	ldrb	r3, [r3, #12]
 800206c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800206e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	7b5b      	ldrb	r3, [r3, #13]
 8002074:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002076:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	7b9b      	ldrb	r3, [r3, #14]
 800207c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800207e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	7bdb      	ldrb	r3, [r3, #15]
 8002084:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002086:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	7c12      	ldrb	r2, [r2, #16]
 800208c:	2a00      	cmp	r2, #0
 800208e:	d102      	bne.n	8002096 <ETH_SetMACConfig+0x4a>
 8002090:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002094:	e000      	b.n	8002098 <ETH_SetMACConfig+0x4c>
 8002096:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002098:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	7c52      	ldrb	r2, [r2, #17]
 800209e:	2a00      	cmp	r2, #0
 80020a0:	d102      	bne.n	80020a8 <ETH_SetMACConfig+0x5c>
 80020a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020a6:	e000      	b.n	80020aa <ETH_SetMACConfig+0x5e>
 80020a8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80020aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	7c9b      	ldrb	r3, [r3, #18]
 80020b0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80020b2:	431a      	orrs	r2, r3
               macconf->Speed |
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80020b8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80020be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	7f1b      	ldrb	r3, [r3, #28]
 80020c4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80020c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	7f5b      	ldrb	r3, [r3, #29]
 80020cc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80020ce:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	7f92      	ldrb	r2, [r2, #30]
 80020d4:	2a00      	cmp	r2, #0
 80020d6:	d102      	bne.n	80020de <ETH_SetMACConfig+0x92>
 80020d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020dc:	e000      	b.n	80020e0 <ETH_SetMACConfig+0x94>
 80020de:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80020e0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	7fdb      	ldrb	r3, [r3, #31]
 80020e6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80020e8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	f892 2020 	ldrb.w	r2, [r2, #32]
 80020f0:	2a00      	cmp	r2, #0
 80020f2:	d102      	bne.n	80020fa <ETH_SetMACConfig+0xae>
 80020f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020f8:	e000      	b.n	80020fc <ETH_SetMACConfig+0xb0>
 80020fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80020fc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002102:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800210a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800210c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002112:	4313      	orrs	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b56      	ldr	r3, [pc, #344]	@ (8002278 <ETH_SetMACConfig+0x22c>)
 800211e:	4013      	ands	r3, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6812      	ldr	r2, [r2, #0]
 8002124:	68f9      	ldr	r1, [r7, #12]
 8002126:	430b      	orrs	r3, r1
 8002128:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800212e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002136:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002138:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002140:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002142:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800214a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800214c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002154:	2a00      	cmp	r2, #0
 8002156:	d102      	bne.n	800215e <ETH_SetMACConfig+0x112>
 8002158:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800215c:	e000      	b.n	8002160 <ETH_SetMACConfig+0x114>
 800215e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002160:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002166:	4313      	orrs	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	4b42      	ldr	r3, [pc, #264]	@ (800227c <ETH_SetMACConfig+0x230>)
 8002172:	4013      	ands	r3, r2
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	68f9      	ldr	r1, [r7, #12]
 800217a:	430b      	orrs	r3, r1
 800217c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002184:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800218a:	4313      	orrs	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	4b3a      	ldr	r3, [pc, #232]	@ (8002280 <ETH_SetMACConfig+0x234>)
 8002196:	4013      	ands	r3, r2
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	6812      	ldr	r2, [r2, #0]
 800219c:	68f9      	ldr	r1, [r7, #12]
 800219e:	430b      	orrs	r3, r1
 80021a0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80021a8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80021ae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80021b6:	2a00      	cmp	r2, #0
 80021b8:	d101      	bne.n	80021be <ETH_SetMACConfig+0x172>
 80021ba:	2280      	movs	r2, #128	@ 0x80
 80021bc:	e000      	b.n	80021c0 <ETH_SetMACConfig+0x174>
 80021be:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80021c0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021c6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80021c8:	4313      	orrs	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80021d2:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80021d6:	4013      	ands	r3, r2
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	68f9      	ldr	r1, [r7, #12]
 80021de:	430b      	orrs	r3, r1
 80021e0:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80021e8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80021f0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80021f2:	4313      	orrs	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021fe:	f023 0103 	bic.w	r1, r3, #3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	430a      	orrs	r2, r1
 800220a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002216:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002232:	2a00      	cmp	r2, #0
 8002234:	d101      	bne.n	800223a <ETH_SetMACConfig+0x1ee>
 8002236:	2240      	movs	r2, #64	@ 0x40
 8002238:	e000      	b.n	800223c <ETH_SetMACConfig+0x1f0>
 800223a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800223c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002244:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002246:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800224e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002250:	4313      	orrs	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800225c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	430a      	orrs	r2, r1
 8002268:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800226c:	bf00      	nop
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	00048083 	.word	0x00048083
 800227c:	c0f88000 	.word	0xc0f88000
 8002280:	fffffef0 	.word	0xfffffef0

08002284 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b38      	ldr	r3, [pc, #224]	@ (800237c <ETH_SetDMAConfig+0xf8>)
 800229a:	4013      	ands	r3, r2
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	6811      	ldr	r1, [r2, #0]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	430b      	orrs	r3, r1
 80022a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022aa:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	791b      	ldrb	r3, [r3, #4]
 80022b0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80022b6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	7b1b      	ldrb	r3, [r3, #12]
 80022bc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80022be:	4313      	orrs	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002380 <ETH_SetDMAConfig+0xfc>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	68f9      	ldr	r1, [r7, #12]
 80022d6:	430b      	orrs	r3, r1
 80022d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022dc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	7b5b      	ldrb	r3, [r3, #13]
 80022e2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022f4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80022f8:	4b22      	ldr	r3, [pc, #136]	@ (8002384 <ETH_SetDMAConfig+0x100>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	68f9      	ldr	r1, [r7, #12]
 8002302:	430b      	orrs	r3, r1
 8002304:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002308:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	7d1b      	ldrb	r3, [r3, #20]
 8002314:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002316:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	7f5b      	ldrb	r3, [r3, #29]
 800231c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800231e:	4313      	orrs	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800232a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800232e:	4b16      	ldr	r3, [pc, #88]	@ (8002388 <ETH_SetDMAConfig+0x104>)
 8002330:	4013      	ands	r3, r2
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6812      	ldr	r2, [r2, #0]
 8002336:	68f9      	ldr	r1, [r7, #12]
 8002338:	430b      	orrs	r3, r1
 800233a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800233e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	7f1b      	ldrb	r3, [r3, #28]
 8002346:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800234c:	4313      	orrs	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002358:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800235c:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <ETH_SetDMAConfig+0x108>)
 800235e:	4013      	ands	r3, r2
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	68f9      	ldr	r1, [r7, #12]
 8002366:	430b      	orrs	r3, r1
 8002368:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800236c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	ffff87fd 	.word	0xffff87fd
 8002380:	ffff2ffe 	.word	0xffff2ffe
 8002384:	fffec000 	.word	0xfffec000
 8002388:	ffc0efef 	.word	0xffc0efef
 800238c:	7fc0ffff 	.word	0x7fc0ffff

08002390 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b0a4      	sub	sp, #144	@ 0x90
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002398:	2301      	movs	r3, #1
 800239a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800239e:	2300      	movs	r3, #0
 80023a0:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80023a2:	2300      	movs	r3, #0
 80023a4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80023ae:	2301      	movs	r3, #1
 80023b0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80023b4:	2301      	movs	r3, #1
 80023b6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80023ba:	2301      	movs	r3, #1
 80023bc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80023c0:	2300      	movs	r3, #0
 80023c2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80023c6:	2301      	movs	r3, #1
 80023c8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80023cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023d0:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80023d2:	2300      	movs	r3, #0
 80023d4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80023dc:	2300      	movs	r3, #0
 80023de:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80023e8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80023ec:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80023f4:	2300      	movs	r3, #0
 80023f6:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80023f8:	2301      	movs	r3, #1
 80023fa:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80023fe:	2300      	movs	r3, #0
 8002400:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002404:	2300      	movs	r3, #0
 8002406:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800240a:	2300      	movs	r3, #0
 800240c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800240e:	2300      	movs	r3, #0
 8002410:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002412:	2300      	movs	r3, #0
 8002414:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002416:	2300      	movs	r3, #0
 8002418:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800241c:	2300      	movs	r3, #0
 800241e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002422:	2301      	movs	r3, #1
 8002424:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002428:	2320      	movs	r3, #32
 800242a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800242e:	2301      	movs	r3, #1
 8002430:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002434:	2300      	movs	r3, #0
 8002436:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800243a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800243e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002440:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002444:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002446:	2300      	movs	r3, #0
 8002448:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800244c:	2302      	movs	r3, #2
 800244e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002452:	2300      	movs	r3, #0
 8002454:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002458:	2300      	movs	r3, #0
 800245a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800245e:	2300      	movs	r3, #0
 8002460:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002464:	2301      	movs	r3, #1
 8002466:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800246a:	2300      	movs	r3, #0
 800246c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800246e:	2301      	movs	r3, #1
 8002470:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002474:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002478:	4619      	mov	r1, r3
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff fde6 	bl	800204c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002480:	2301      	movs	r3, #1
 8002482:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002484:	2301      	movs	r3, #1
 8002486:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002488:	2300      	movs	r3, #0
 800248a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800248c:	2300      	movs	r3, #0
 800248e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002492:	2300      	movs	r3, #0
 8002494:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002496:	2300      	movs	r3, #0
 8002498:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800249a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800249e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80024a0:	2300      	movs	r3, #0
 80024a2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80024a4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80024a8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80024b0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80024b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80024b6:	f107 0308 	add.w	r3, r7, #8
 80024ba:	4619      	mov	r1, r3
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff fee1 	bl	8002284 <ETH_SetDMAConfig>
}
 80024c2:	bf00      	nop
 80024c4:	3790      	adds	r7, #144	@ 0x90
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b085      	sub	sp, #20
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	e01d      	b.n	8002514 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68d9      	ldr	r1, [r3, #12]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4613      	mov	r3, r2
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	4413      	add	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	440b      	add	r3, r1
 80024e8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2200      	movs	r2, #0
 80024f4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2200      	movs	r2, #0
 8002500:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002502:	68b9      	ldr	r1, [r7, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	3206      	adds	r2, #6
 800250a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	3301      	adds	r3, #1
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2b03      	cmp	r3, #3
 8002518:	d9de      	bls.n	80024d8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002528:	461a      	mov	r2, r3
 800252a:	2303      	movs	r3, #3
 800252c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68da      	ldr	r2, [r3, #12]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800253c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800254c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	e023      	b.n	80025b2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6919      	ldr	r1, [r3, #16]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	4613      	mov	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4413      	add	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	440b      	add	r3, r1
 800257a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2200      	movs	r2, #0
 8002586:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2200      	movs	r2, #0
 800258c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2200      	movs	r2, #0
 8002592:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2200      	movs	r2, #0
 8002598:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2200      	movs	r2, #0
 800259e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	3212      	adds	r2, #18
 80025a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	3301      	adds	r3, #1
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d9d8      	bls.n	800256a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025de:	461a      	mov	r2, r3
 80025e0:	2303      	movs	r3, #3
 80025e2:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691a      	ldr	r2, [r3, #16]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025f2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002606:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800260a:	bf00      	nop
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002618:	b480      	push	{r7}
 800261a:	b089      	sub	sp, #36	@ 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002622:	2300      	movs	r3, #0
 8002624:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002626:	4b89      	ldr	r3, [pc, #548]	@ (800284c <HAL_GPIO_Init+0x234>)
 8002628:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800262a:	e194      	b.n	8002956 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	2101      	movs	r1, #1
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	fa01 f303 	lsl.w	r3, r1, r3
 8002638:	4013      	ands	r3, r2
 800263a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 8186 	beq.w	8002950 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	2b01      	cmp	r3, #1
 800264e:	d005      	beq.n	800265c <HAL_GPIO_Init+0x44>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d130      	bne.n	80026be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	2203      	movs	r2, #3
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002692:	2201      	movs	r2, #1
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	091b      	lsrs	r3, r3, #4
 80026a8:	f003 0201 	and.w	r2, r3, #1
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d017      	beq.n	80026fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	2203      	movs	r2, #3
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d123      	bne.n	800274e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	08da      	lsrs	r2, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3208      	adds	r2, #8
 800270e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	220f      	movs	r2, #15
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	691a      	ldr	r2, [r3, #16]
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4313      	orrs	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	08da      	lsrs	r2, r3, #3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3208      	adds	r2, #8
 8002748:	69b9      	ldr	r1, [r7, #24]
 800274a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	2203      	movs	r2, #3
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 0203 	and.w	r2, r3, #3
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 80e0 	beq.w	8002950 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002790:	4b2f      	ldr	r3, [pc, #188]	@ (8002850 <HAL_GPIO_Init+0x238>)
 8002792:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002796:	4a2e      	ldr	r2, [pc, #184]	@ (8002850 <HAL_GPIO_Init+0x238>)
 8002798:	f043 0302 	orr.w	r3, r3, #2
 800279c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80027a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002850 <HAL_GPIO_Init+0x238>)
 80027a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ae:	4a29      	ldr	r2, [pc, #164]	@ (8002854 <HAL_GPIO_Init+0x23c>)
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	089b      	lsrs	r3, r3, #2
 80027b4:	3302      	adds	r3, #2
 80027b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	220f      	movs	r2, #15
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43db      	mvns	r3, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4013      	ands	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a20      	ldr	r2, [pc, #128]	@ (8002858 <HAL_GPIO_Init+0x240>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d052      	beq.n	8002880 <HAL_GPIO_Init+0x268>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a1f      	ldr	r2, [pc, #124]	@ (800285c <HAL_GPIO_Init+0x244>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d031      	beq.n	8002846 <HAL_GPIO_Init+0x22e>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a1e      	ldr	r2, [pc, #120]	@ (8002860 <HAL_GPIO_Init+0x248>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d02b      	beq.n	8002842 <HAL_GPIO_Init+0x22a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002864 <HAL_GPIO_Init+0x24c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d025      	beq.n	800283e <HAL_GPIO_Init+0x226>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002868 <HAL_GPIO_Init+0x250>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d01f      	beq.n	800283a <HAL_GPIO_Init+0x222>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a1b      	ldr	r2, [pc, #108]	@ (800286c <HAL_GPIO_Init+0x254>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d019      	beq.n	8002836 <HAL_GPIO_Init+0x21e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a1a      	ldr	r2, [pc, #104]	@ (8002870 <HAL_GPIO_Init+0x258>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d013      	beq.n	8002832 <HAL_GPIO_Init+0x21a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a19      	ldr	r2, [pc, #100]	@ (8002874 <HAL_GPIO_Init+0x25c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00d      	beq.n	800282e <HAL_GPIO_Init+0x216>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a18      	ldr	r2, [pc, #96]	@ (8002878 <HAL_GPIO_Init+0x260>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d007      	beq.n	800282a <HAL_GPIO_Init+0x212>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a17      	ldr	r2, [pc, #92]	@ (800287c <HAL_GPIO_Init+0x264>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d101      	bne.n	8002826 <HAL_GPIO_Init+0x20e>
 8002822:	2309      	movs	r3, #9
 8002824:	e02d      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 8002826:	230a      	movs	r3, #10
 8002828:	e02b      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 800282a:	2308      	movs	r3, #8
 800282c:	e029      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 800282e:	2307      	movs	r3, #7
 8002830:	e027      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 8002832:	2306      	movs	r3, #6
 8002834:	e025      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 8002836:	2305      	movs	r3, #5
 8002838:	e023      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 800283a:	2304      	movs	r3, #4
 800283c:	e021      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 800283e:	2303      	movs	r3, #3
 8002840:	e01f      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 8002842:	2302      	movs	r3, #2
 8002844:	e01d      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 8002846:	2301      	movs	r3, #1
 8002848:	e01b      	b.n	8002882 <HAL_GPIO_Init+0x26a>
 800284a:	bf00      	nop
 800284c:	58000080 	.word	0x58000080
 8002850:	58024400 	.word	0x58024400
 8002854:	58000400 	.word	0x58000400
 8002858:	58020000 	.word	0x58020000
 800285c:	58020400 	.word	0x58020400
 8002860:	58020800 	.word	0x58020800
 8002864:	58020c00 	.word	0x58020c00
 8002868:	58021000 	.word	0x58021000
 800286c:	58021400 	.word	0x58021400
 8002870:	58021800 	.word	0x58021800
 8002874:	58021c00 	.word	0x58021c00
 8002878:	58022000 	.word	0x58022000
 800287c:	58022400 	.word	0x58022400
 8002880:	2300      	movs	r3, #0
 8002882:	69fa      	ldr	r2, [r7, #28]
 8002884:	f002 0203 	and.w	r2, r2, #3
 8002888:	0092      	lsls	r2, r2, #2
 800288a:	4093      	lsls	r3, r2
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002892:	4938      	ldr	r1, [pc, #224]	@ (8002974 <HAL_GPIO_Init+0x35c>)
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	089b      	lsrs	r3, r3, #2
 8002898:	3302      	adds	r3, #2
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	43db      	mvns	r3, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4013      	ands	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80028c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80028ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80028f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	3301      	adds	r3, #1
 8002954:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	fa22 f303 	lsr.w	r3, r2, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	f47f ae63 	bne.w	800262c <HAL_GPIO_Init+0x14>
  }
}
 8002966:	bf00      	nop
 8002968:	bf00      	nop
 800296a:	3724      	adds	r7, #36	@ 0x24
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	58000400 	.word	0x58000400

08002978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	807b      	strh	r3, [r7, #2]
 8002984:	4613      	mov	r3, r2
 8002986:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002988:	787b      	ldrb	r3, [r7, #1]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800298e:	887a      	ldrh	r2, [r7, #2]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002994:	e003      	b.n	800299e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002996:	887b      	ldrh	r3, [r7, #2]
 8002998:	041a      	lsls	r2, r3, #16
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	619a      	str	r2, [r3, #24]
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
	...

080029ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e08b      	b.n	8002ad6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d106      	bne.n	80029d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7fe fb26 	bl	8001024 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2224      	movs	r2, #36	@ 0x24
 80029dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0201 	bic.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d107      	bne.n	8002a26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	e006      	b.n	8002a34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002a32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d108      	bne.n	8002a4e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a4a:	605a      	str	r2, [r3, #4]
 8002a4c:	e007      	b.n	8002a5e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6859      	ldr	r1, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae0 <HAL_I2C_Init+0x134>)
 8002a6a:	430b      	orrs	r3, r1
 8002a6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691a      	ldr	r2, [r3, #16]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69d9      	ldr	r1, [r3, #28]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1a      	ldr	r2, [r3, #32]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	02008000 	.word	0x02008000

08002ae4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af02      	add	r7, sp, #8
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	461a      	mov	r2, r3
 8002af0:	460b      	mov	r3, r1
 8002af2:	817b      	strh	r3, [r7, #10]
 8002af4:	4613      	mov	r3, r2
 8002af6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b20      	cmp	r3, #32
 8002b02:	f040 80fd 	bne.w	8002d00 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d101      	bne.n	8002b14 <HAL_I2C_Master_Transmit+0x30>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e0f6      	b.n	8002d02 <HAL_I2C_Master_Transmit+0x21e>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b1c:	f7fe fd94 	bl	8001648 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	2319      	movs	r3, #25
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f001 f875 	bl	8003c1e <I2C_WaitOnFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e0e1      	b.n	8002d02 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2221      	movs	r2, #33	@ 0x21
 8002b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2210      	movs	r2, #16
 8002b4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	893a      	ldrh	r2, [r7, #8]
 8002b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2bff      	cmp	r3, #255	@ 0xff
 8002b6e:	d906      	bls.n	8002b7e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	22ff      	movs	r2, #255	@ 0xff
 8002b74:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002b76:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	e007      	b.n	8002b8e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002b88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b8c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d024      	beq.n	8002be0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9a:	781a      	ldrb	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	3301      	adds	r3, #1
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	8979      	ldrh	r1, [r7, #10]
 8002bd2:	4b4e      	ldr	r3, [pc, #312]	@ (8002d0c <HAL_I2C_Master_Transmit+0x228>)
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f001 fa6f 	bl	80040bc <I2C_TransferConfig>
 8002bde:	e066      	b.n	8002cae <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	8979      	ldrh	r1, [r7, #10]
 8002be8:	4b48      	ldr	r3, [pc, #288]	@ (8002d0c <HAL_I2C_Master_Transmit+0x228>)
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f001 fa64 	bl	80040bc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002bf4:	e05b      	b.n	8002cae <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	6a39      	ldr	r1, [r7, #32]
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f001 f868 	bl	8003cd0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e07b      	b.n	8002d02 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0e:	781a      	ldrb	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c32:	3b01      	subs	r3, #1
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d034      	beq.n	8002cae <HAL_I2C_Master_Transmit+0x1ca>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d130      	bne.n	8002cae <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	2200      	movs	r2, #0
 8002c54:	2180      	movs	r1, #128	@ 0x80
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 ffe1 	bl	8003c1e <I2C_WaitOnFlagUntilTimeout>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e04d      	b.n	8002d02 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2bff      	cmp	r3, #255	@ 0xff
 8002c6e:	d90e      	bls.n	8002c8e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	22ff      	movs	r2, #255	@ 0xff
 8002c74:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	8979      	ldrh	r1, [r7, #10]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f001 fa18 	bl	80040bc <I2C_TransferConfig>
 8002c8c:	e00f      	b.n	8002cae <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	8979      	ldrh	r1, [r7, #10]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f001 fa07 	bl	80040bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d19e      	bne.n	8002bf6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	6a39      	ldr	r1, [r7, #32]
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f001 f84e 	bl	8003d5e <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e01a      	b.n	8002d02 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6859      	ldr	r1, [r3, #4]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	4b0c      	ldr	r3, [pc, #48]	@ (8002d10 <HAL_I2C_Master_Transmit+0x22c>)
 8002ce0:	400b      	ands	r3, r1
 8002ce2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	e000      	b.n	8002d02 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002d00:	2302      	movs	r3, #2
  }
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	80002000 	.word	0x80002000
 8002d10:	fe00e800 	.word	0xfe00e800

08002d14 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	460b      	mov	r3, r1
 8002d22:	817b      	strh	r3, [r7, #10]
 8002d24:	4613      	mov	r3, r2
 8002d26:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	f040 80db 	bne.w	8002eec <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_I2C_Master_Receive+0x30>
 8002d40:	2302      	movs	r3, #2
 8002d42:	e0d4      	b.n	8002eee <HAL_I2C_Master_Receive+0x1da>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d4c:	f7fe fc7c 	bl	8001648 <HAL_GetTick>
 8002d50:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	2319      	movs	r3, #25
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 ff5d 	bl	8003c1e <I2C_WaitOnFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e0bf      	b.n	8002eee <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2222      	movs	r2, #34	@ 0x22
 8002d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2210      	movs	r2, #16
 8002d7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	893a      	ldrh	r2, [r7, #8]
 8002d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	2bff      	cmp	r3, #255	@ 0xff
 8002d9e:	d90e      	bls.n	8002dbe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	22ff      	movs	r2, #255	@ 0xff
 8002da4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	8979      	ldrh	r1, [r7, #10]
 8002dae:	4b52      	ldr	r3, [pc, #328]	@ (8002ef8 <HAL_I2C_Master_Receive+0x1e4>)
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f001 f980 	bl	80040bc <I2C_TransferConfig>
 8002dbc:	e06d      	b.n	8002e9a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	8979      	ldrh	r1, [r7, #10]
 8002dd0:	4b49      	ldr	r3, [pc, #292]	@ (8002ef8 <HAL_I2C_Master_Receive+0x1e4>)
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f001 f96f 	bl	80040bc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002dde:	e05c      	b.n	8002e9a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	6a39      	ldr	r1, [r7, #32]
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 fffd 	bl	8003de4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e07c      	b.n	8002eee <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e06:	1c5a      	adds	r2, r3, #1
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d034      	beq.n	8002e9a <HAL_I2C_Master_Receive+0x186>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d130      	bne.n	8002e9a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2180      	movs	r1, #128	@ 0x80
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 feeb 	bl	8003c1e <I2C_WaitOnFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e04d      	b.n	8002eee <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	2bff      	cmp	r3, #255	@ 0xff
 8002e5a:	d90e      	bls.n	8002e7a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	22ff      	movs	r2, #255	@ 0xff
 8002e60:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	8979      	ldrh	r1, [r7, #10]
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f001 f922 	bl	80040bc <I2C_TransferConfig>
 8002e78:	e00f      	b.n	8002e9a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	8979      	ldrh	r1, [r7, #10]
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f001 f911 	bl	80040bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d19d      	bne.n	8002de0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	6a39      	ldr	r1, [r7, #32]
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 ff58 	bl	8003d5e <I2C_WaitOnSTOPFlagUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e01a      	b.n	8002eee <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6859      	ldr	r1, [r3, #4]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	4b0c      	ldr	r3, [pc, #48]	@ (8002efc <HAL_I2C_Master_Receive+0x1e8>)
 8002ecc:	400b      	ands	r3, r1
 8002ece:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	e000      	b.n	8002eee <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002eec:	2302      	movs	r3, #2
  }
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	80002400 	.word	0x80002400
 8002efc:	fe00e800 	.word	0xfe00e800

08002f00 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	68f9      	ldr	r1, [r7, #12]
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	4798      	blx	r3
  }
}
 8002f2c:	bf00      	nop
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00f      	beq.n	8002f76 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f64:	f043 0201 	orr.w	r2, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f74:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00f      	beq.n	8002fa0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f8e:	f043 0208 	orr.w	r2, r3, #8
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f9e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00f      	beq.n	8002fca <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00a      	beq.n	8002fca <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb8:	f043 0202 	orr.w	r2, r3, #2
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fc8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f003 030b 	and.w	r3, r3, #11
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002fda:	68f9      	ldr	r1, [r7, #12]
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fcc5 	bl	800396c <I2C_ITError>
  }
}
 8002fe2:	bf00      	nop
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
 800301a:	460b      	mov	r3, r1
 800301c:	70fb      	strb	r3, [r7, #3]
 800301e:	4613      	mov	r3, r2
 8003020:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b086      	sub	sp, #24
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <I2C_Slave_ISR_IT+0x24>
 800308a:	2302      	movs	r3, #2
 800308c:	e0e2      	b.n	8003254 <I2C_Slave_ISR_IT+0x1ea>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f003 0320 	and.w	r3, r3, #32
 800309c:	2b00      	cmp	r3, #0
 800309e:	d009      	beq.n	80030b4 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d004      	beq.n	80030b4 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80030aa:	6939      	ldr	r1, [r7, #16]
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f9b5 	bl	800341c <I2C_ITSlaveCplt>
 80030b2:	e0ca      	b.n	800324a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f003 0310 	and.w	r3, r3, #16
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d04b      	beq.n	8003156 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d046      	beq.n	8003156 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d128      	bne.n	8003124 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b28      	cmp	r3, #40	@ 0x28
 80030dc:	d108      	bne.n	80030f0 <I2C_Slave_ISR_IT+0x86>
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030e4:	d104      	bne.n	80030f0 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80030e6:	6939      	ldr	r1, [r7, #16]
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 fbeb 	bl	80038c4 <I2C_ITListenCplt>
 80030ee:	e031      	b.n	8003154 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b29      	cmp	r3, #41	@ 0x29
 80030fa:	d10e      	bne.n	800311a <I2C_Slave_ISR_IT+0xb0>
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003102:	d00a      	beq.n	800311a <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2210      	movs	r2, #16
 800310a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 fd44 	bl	8003b9a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 f926 	bl	8003364 <I2C_ITSlaveSeqCplt>
 8003118:	e01c      	b.n	8003154 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2210      	movs	r2, #16
 8003120:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003122:	e08f      	b.n	8003244 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2210      	movs	r2, #16
 800312a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003130:	f043 0204 	orr.w	r2, r3, #4
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <I2C_Slave_ISR_IT+0xdc>
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003144:	d17e      	bne.n	8003244 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314a:	4619      	mov	r1, r3
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 fc0d 	bl	800396c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003152:	e077      	b.n	8003244 <I2C_Slave_ISR_IT+0x1da>
 8003154:	e076      	b.n	8003244 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	d02f      	beq.n	80031c0 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003166:	2b00      	cmp	r3, #0
 8003168:	d02a      	beq.n	80031c0 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d018      	beq.n	80031a6 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003190:	3b01      	subs	r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800319c:	b29b      	uxth	r3, r3
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d14b      	bne.n	8003248 <I2C_Slave_ISR_IT+0x1de>
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80031b6:	d047      	beq.n	8003248 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 f8d3 	bl	8003364 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80031be:	e043      	b.n	8003248 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d009      	beq.n	80031de <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d004      	beq.n	80031de <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80031d4:	6939      	ldr	r1, [r7, #16]
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 f840 	bl	800325c <I2C_ITAddrCplt>
 80031dc:	e035      	b.n	800324a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d030      	beq.n	800324a <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d02b      	beq.n	800324a <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d018      	beq.n	800322e <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003200:	781a      	ldrb	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003216:	b29b      	uxth	r3, r3
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800322c:	e00d      	b.n	800324a <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003234:	d002      	beq.n	800323c <I2C_Slave_ISR_IT+0x1d2>
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d106      	bne.n	800324a <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 f891 	bl	8003364 <I2C_ITSlaveSeqCplt>
 8003242:	e002      	b.n	800324a <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8003244:	bf00      	nop
 8003246:	e000      	b.n	800324a <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8003248:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800326c:	b2db      	uxtb	r3, r3
 800326e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003272:	2b28      	cmp	r3, #40	@ 0x28
 8003274:	d16a      	bne.n	800334c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	0c1b      	lsrs	r3, r3, #16
 800327e:	b2db      	uxtb	r3, r3
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	0c1b      	lsrs	r3, r3, #16
 800328e:	b29b      	uxth	r3, r3
 8003290:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003294:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	b29b      	uxth	r3, r3
 800329e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032a2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80032b0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d138      	bne.n	800332c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80032ba:	897b      	ldrh	r3, [r7, #10]
 80032bc:	09db      	lsrs	r3, r3, #7
 80032be:	b29a      	uxth	r2, r3
 80032c0:	89bb      	ldrh	r3, [r7, #12]
 80032c2:	4053      	eors	r3, r2
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	f003 0306 	and.w	r3, r3, #6
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d11c      	bne.n	8003308 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80032ce:	897b      	ldrh	r3, [r7, #10]
 80032d0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d13b      	bne.n	800335c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2208      	movs	r2, #8
 80032f0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80032fa:	89ba      	ldrh	r2, [r7, #12]
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	4619      	mov	r1, r3
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7ff fe86 	bl	8003012 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003306:	e029      	b.n	800335c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003308:	893b      	ldrh	r3, [r7, #8]
 800330a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800330c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 ff05 	bl	8004120 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800331e:	89ba      	ldrh	r2, [r7, #12]
 8003320:	7bfb      	ldrb	r3, [r7, #15]
 8003322:	4619      	mov	r1, r3
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff fe74 	bl	8003012 <HAL_I2C_AddrCallback>
}
 800332a:	e017      	b.n	800335c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800332c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 fef5 	bl	8004120 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800333e:	89ba      	ldrh	r2, [r7, #12]
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	4619      	mov	r1, r3
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7ff fe64 	bl	8003012 <HAL_I2C_AddrCallback>
}
 800334a:	e007      	b.n	800335c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2208      	movs	r2, #8
 8003352:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800335c:	bf00      	nop
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d008      	beq.n	8003398 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	e00c      	b.n	80033b2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d007      	beq.n	80033b2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033b0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b29      	cmp	r3, #41	@ 0x29
 80033bc:	d112      	bne.n	80033e4 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2228      	movs	r2, #40	@ 0x28
 80033c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2221      	movs	r2, #33	@ 0x21
 80033ca:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80033cc:	2101      	movs	r1, #1
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 fea6 	bl	8004120 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7ff fe04 	bl	8002fea <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80033e2:	e017      	b.n	8003414 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80033ee:	d111      	bne.n	8003414 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2228      	movs	r2, #40	@ 0x28
 80033f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2222      	movs	r2, #34	@ 0x22
 80033fc:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80033fe:	2102      	movs	r1, #2
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fe8d 	bl	8004120 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff fdf5 	bl	8002ffe <HAL_I2C_SlaveRxCpltCallback>
}
 8003414:	bf00      	nop
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003436:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800343e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2220      	movs	r2, #32
 8003446:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003448:	7afb      	ldrb	r3, [r7, #11]
 800344a:	2b21      	cmp	r3, #33	@ 0x21
 800344c:	d002      	beq.n	8003454 <I2C_ITSlaveCplt+0x38>
 800344e:	7afb      	ldrb	r3, [r7, #11]
 8003450:	2b29      	cmp	r3, #41	@ 0x29
 8003452:	d108      	bne.n	8003466 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003454:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fe61 	bl	8004120 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2221      	movs	r2, #33	@ 0x21
 8003462:	631a      	str	r2, [r3, #48]	@ 0x30
 8003464:	e019      	b.n	800349a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003466:	7afb      	ldrb	r3, [r7, #11]
 8003468:	2b22      	cmp	r3, #34	@ 0x22
 800346a:	d002      	beq.n	8003472 <I2C_ITSlaveCplt+0x56>
 800346c:	7afb      	ldrb	r3, [r7, #11]
 800346e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003470:	d108      	bne.n	8003484 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003472:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fe52 	bl	8004120 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2222      	movs	r2, #34	@ 0x22
 8003480:	631a      	str	r2, [r3, #48]	@ 0x30
 8003482:	e00a      	b.n	800349a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003484:	7afb      	ldrb	r3, [r7, #11]
 8003486:	2b28      	cmp	r3, #40	@ 0x28
 8003488:	d107      	bne.n	800349a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800348a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fe46 	bl	8004120 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034a8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6859      	ldr	r1, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	4b7f      	ldr	r3, [pc, #508]	@ (80036b4 <I2C_ITSlaveCplt+0x298>)
 80034b6:	400b      	ands	r3, r1
 80034b8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 fb6d 	bl	8003b9a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d07a      	beq.n	80035c0 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80034d8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 8111 	beq.w	8003706 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a73      	ldr	r2, [pc, #460]	@ (80036b8 <I2C_ITSlaveCplt+0x29c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d059      	beq.n	80035a4 <I2C_ITSlaveCplt+0x188>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a71      	ldr	r2, [pc, #452]	@ (80036bc <I2C_ITSlaveCplt+0x2a0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d053      	beq.n	80035a4 <I2C_ITSlaveCplt+0x188>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a6f      	ldr	r2, [pc, #444]	@ (80036c0 <I2C_ITSlaveCplt+0x2a4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d04d      	beq.n	80035a4 <I2C_ITSlaveCplt+0x188>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a6d      	ldr	r2, [pc, #436]	@ (80036c4 <I2C_ITSlaveCplt+0x2a8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d047      	beq.n	80035a4 <I2C_ITSlaveCplt+0x188>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a6b      	ldr	r2, [pc, #428]	@ (80036c8 <I2C_ITSlaveCplt+0x2ac>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d041      	beq.n	80035a4 <I2C_ITSlaveCplt+0x188>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a69      	ldr	r2, [pc, #420]	@ (80036cc <I2C_ITSlaveCplt+0x2b0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d03b      	beq.n	80035a4 <I2C_ITSlaveCplt+0x188>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a67      	ldr	r2, [pc, #412]	@ (80036d0 <I2C_ITSlaveCplt+0x2b4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d035      	beq.n	80035a4 <I2C_ITSlaveCplt+0x188>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a65      	ldr	r2, [pc, #404]	@ (80036d4 <I2C_ITSlaveCplt+0x2b8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d02f      	beq.n	80035a4 <I2C_ITSlaveCplt+0x188>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a63      	ldr	r2, [pc, #396]	@ (80036d8 <I2C_ITSlaveCplt+0x2bc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d029      	beq.n	80035a4 <I2C_ITSlaveCplt+0x188>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a61      	ldr	r2, [pc, #388]	@ (80036dc <I2C_ITSlaveCplt+0x2c0>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d023      	beq.n	80035a4 <I2C_ITSlaveCplt+0x188>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a5f      	ldr	r2, [pc, #380]	@ (80036e0 <I2C_ITSlaveCplt+0x2c4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d01d      	beq.n	80035a4 <I2C_ITSlaveCplt+0x188>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a5d      	ldr	r2, [pc, #372]	@ (80036e4 <I2C_ITSlaveCplt+0x2c8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d017      	beq.n	80035a4 <I2C_ITSlaveCplt+0x188>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a5b      	ldr	r2, [pc, #364]	@ (80036e8 <I2C_ITSlaveCplt+0x2cc>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d011      	beq.n	80035a4 <I2C_ITSlaveCplt+0x188>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a59      	ldr	r2, [pc, #356]	@ (80036ec <I2C_ITSlaveCplt+0x2d0>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d00b      	beq.n	80035a4 <I2C_ITSlaveCplt+0x188>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a57      	ldr	r2, [pc, #348]	@ (80036f0 <I2C_ITSlaveCplt+0x2d4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d005      	beq.n	80035a4 <I2C_ITSlaveCplt+0x188>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a55      	ldr	r2, [pc, #340]	@ (80036f4 <I2C_ITSlaveCplt+0x2d8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d105      	bne.n	80035b0 <I2C_ITSlaveCplt+0x194>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	e004      	b.n	80035ba <I2C_ITSlaveCplt+0x19e>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	8553      	strh	r3, [r2, #42]	@ 0x2a
 80035be:	e0a2      	b.n	8003706 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 809d 	beq.w	8003706 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035da:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 8090 	beq.w	8003706 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a32      	ldr	r2, [pc, #200]	@ (80036b8 <I2C_ITSlaveCplt+0x29c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d059      	beq.n	80036a6 <I2C_ITSlaveCplt+0x28a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a30      	ldr	r2, [pc, #192]	@ (80036bc <I2C_ITSlaveCplt+0x2a0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d053      	beq.n	80036a6 <I2C_ITSlaveCplt+0x28a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a2e      	ldr	r2, [pc, #184]	@ (80036c0 <I2C_ITSlaveCplt+0x2a4>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d04d      	beq.n	80036a6 <I2C_ITSlaveCplt+0x28a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a2c      	ldr	r2, [pc, #176]	@ (80036c4 <I2C_ITSlaveCplt+0x2a8>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d047      	beq.n	80036a6 <I2C_ITSlaveCplt+0x28a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a2a      	ldr	r2, [pc, #168]	@ (80036c8 <I2C_ITSlaveCplt+0x2ac>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d041      	beq.n	80036a6 <I2C_ITSlaveCplt+0x28a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a28      	ldr	r2, [pc, #160]	@ (80036cc <I2C_ITSlaveCplt+0x2b0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d03b      	beq.n	80036a6 <I2C_ITSlaveCplt+0x28a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a26      	ldr	r2, [pc, #152]	@ (80036d0 <I2C_ITSlaveCplt+0x2b4>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d035      	beq.n	80036a6 <I2C_ITSlaveCplt+0x28a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a24      	ldr	r2, [pc, #144]	@ (80036d4 <I2C_ITSlaveCplt+0x2b8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d02f      	beq.n	80036a6 <I2C_ITSlaveCplt+0x28a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a22      	ldr	r2, [pc, #136]	@ (80036d8 <I2C_ITSlaveCplt+0x2bc>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d029      	beq.n	80036a6 <I2C_ITSlaveCplt+0x28a>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a20      	ldr	r2, [pc, #128]	@ (80036dc <I2C_ITSlaveCplt+0x2c0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d023      	beq.n	80036a6 <I2C_ITSlaveCplt+0x28a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a1e      	ldr	r2, [pc, #120]	@ (80036e0 <I2C_ITSlaveCplt+0x2c4>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d01d      	beq.n	80036a6 <I2C_ITSlaveCplt+0x28a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a1c      	ldr	r2, [pc, #112]	@ (80036e4 <I2C_ITSlaveCplt+0x2c8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d017      	beq.n	80036a6 <I2C_ITSlaveCplt+0x28a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a1a      	ldr	r2, [pc, #104]	@ (80036e8 <I2C_ITSlaveCplt+0x2cc>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d011      	beq.n	80036a6 <I2C_ITSlaveCplt+0x28a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a18      	ldr	r2, [pc, #96]	@ (80036ec <I2C_ITSlaveCplt+0x2d0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d00b      	beq.n	80036a6 <I2C_ITSlaveCplt+0x28a>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a16      	ldr	r2, [pc, #88]	@ (80036f0 <I2C_ITSlaveCplt+0x2d4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d005      	beq.n	80036a6 <I2C_ITSlaveCplt+0x28a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a14      	ldr	r2, [pc, #80]	@ (80036f4 <I2C_ITSlaveCplt+0x2d8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d128      	bne.n	80036f8 <I2C_ITSlaveCplt+0x2dc>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	e027      	b.n	8003702 <I2C_ITSlaveCplt+0x2e6>
 80036b2:	bf00      	nop
 80036b4:	fe00e800 	.word	0xfe00e800
 80036b8:	40020010 	.word	0x40020010
 80036bc:	40020028 	.word	0x40020028
 80036c0:	40020040 	.word	0x40020040
 80036c4:	40020058 	.word	0x40020058
 80036c8:	40020070 	.word	0x40020070
 80036cc:	40020088 	.word	0x40020088
 80036d0:	400200a0 	.word	0x400200a0
 80036d4:	400200b8 	.word	0x400200b8
 80036d8:	40020410 	.word	0x40020410
 80036dc:	40020428 	.word	0x40020428
 80036e0:	40020440 	.word	0x40020440
 80036e4:	40020458 	.word	0x40020458
 80036e8:	40020470 	.word	0x40020470
 80036ec:	40020488 	.word	0x40020488
 80036f0:	400204a0 	.word	0x400204a0
 80036f4:	400204b8 	.word	0x400204b8
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	b29b      	uxth	r3, r3
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d020      	beq.n	8003752 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f023 0304 	bic.w	r3, r3, #4
 8003716:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00c      	beq.n	8003752 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003748:	b29b      	uxth	r3, r3
 800374a:	3b01      	subs	r3, #1
 800374c:	b29a      	uxth	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003756:	b29b      	uxth	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d005      	beq.n	8003768 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003760:	f043 0204 	orr.w	r2, r3, #4
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f003 0310 	and.w	r3, r3, #16
 800376e:	2b00      	cmp	r3, #0
 8003770:	d049      	beq.n	8003806 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003778:	2b00      	cmp	r3, #0
 800377a:	d044      	beq.n	8003806 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003780:	b29b      	uxth	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d128      	bne.n	80037d8 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b28      	cmp	r3, #40	@ 0x28
 8003790:	d108      	bne.n	80037a4 <I2C_ITSlaveCplt+0x388>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003798:	d104      	bne.n	80037a4 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800379a:	6979      	ldr	r1, [r7, #20]
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f891 	bl	80038c4 <I2C_ITListenCplt>
 80037a2:	e030      	b.n	8003806 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b29      	cmp	r3, #41	@ 0x29
 80037ae:	d10e      	bne.n	80037ce <I2C_ITSlaveCplt+0x3b2>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80037b6:	d00a      	beq.n	80037ce <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2210      	movs	r2, #16
 80037be:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f9ea 	bl	8003b9a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7ff fdcc 	bl	8003364 <I2C_ITSlaveSeqCplt>
 80037cc:	e01b      	b.n	8003806 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2210      	movs	r2, #16
 80037d4:	61da      	str	r2, [r3, #28]
 80037d6:	e016      	b.n	8003806 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2210      	movs	r2, #16
 80037de:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e4:	f043 0204 	orr.w	r2, r3, #4
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <I2C_ITSlaveCplt+0x3de>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037f8:	d105      	bne.n	8003806 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fe:	4619      	mov	r1, r3
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f8b3 	bl	800396c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003818:	2b00      	cmp	r3, #0
 800381a:	d010      	beq.n	800383e <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003820:	4619      	mov	r1, r3
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f8a2 	bl	800396c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b28      	cmp	r3, #40	@ 0x28
 8003832:	d141      	bne.n	80038b8 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003834:	6979      	ldr	r1, [r7, #20]
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f844 	bl	80038c4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800383c:	e03c      	b.n	80038b8 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003842:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003846:	d014      	beq.n	8003872 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff fd8b 	bl	8003364 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a1b      	ldr	r2, [pc, #108]	@ (80038c0 <I2C_ITSlaveCplt+0x4a4>)
 8003852:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff fbdf 	bl	800302e <HAL_I2C_ListenCpltCallback>
}
 8003870:	e022      	b.n	80038b8 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b22      	cmp	r3, #34	@ 0x22
 800387c:	d10e      	bne.n	800389c <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7ff fbb2 	bl	8002ffe <HAL_I2C_SlaveRxCpltCallback>
}
 800389a:	e00d      	b.n	80038b8 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7ff fb99 	bl	8002fea <HAL_I2C_SlaveTxCpltCallback>
}
 80038b8:	bf00      	nop
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	ffff0000 	.word	0xffff0000

080038c4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a25      	ldr	r2, [pc, #148]	@ (8003968 <I2C_ITListenCplt+0xa4>)
 80038d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2220      	movs	r2, #32
 80038de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d022      	beq.n	8003940 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003916:	2b00      	cmp	r3, #0
 8003918:	d012      	beq.n	8003940 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003938:	f043 0204 	orr.w	r2, r3, #4
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003940:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 fbeb 	bl	8004120 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2210      	movs	r2, #16
 8003950:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff fb67 	bl	800302e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003960:	bf00      	nop
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	ffff0000 	.word	0xffff0000

0800396c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800397c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a6d      	ldr	r2, [pc, #436]	@ (8003b40 <I2C_ITError+0x1d4>)
 800398a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800399e:	7bfb      	ldrb	r3, [r7, #15]
 80039a0:	2b28      	cmp	r3, #40	@ 0x28
 80039a2:	d005      	beq.n	80039b0 <I2C_ITError+0x44>
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
 80039a6:	2b29      	cmp	r3, #41	@ 0x29
 80039a8:	d002      	beq.n	80039b0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
 80039ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80039ae:	d10b      	bne.n	80039c8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80039b0:	2103      	movs	r1, #3
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fbb4 	bl	8004120 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2228      	movs	r2, #40	@ 0x28
 80039bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a60      	ldr	r2, [pc, #384]	@ (8003b44 <I2C_ITError+0x1d8>)
 80039c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80039c6:	e030      	b.n	8003a2a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80039c8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 fba7 	bl	8004120 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f8e1 	bl	8003b9a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b60      	cmp	r3, #96	@ 0x60
 80039e2:	d01f      	beq.n	8003a24 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	d114      	bne.n	8003a24 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	f003 0310 	and.w	r3, r3, #16
 8003a04:	2b10      	cmp	r3, #16
 8003a06:	d109      	bne.n	8003a1c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2210      	movs	r2, #16
 8003a0e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a14:	f043 0204 	orr.w	r2, r3, #4
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2220      	movs	r2, #32
 8003a22:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d039      	beq.n	8003aac <I2C_ITError+0x140>
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b11      	cmp	r3, #17
 8003a3c:	d002      	beq.n	8003a44 <I2C_ITError+0xd8>
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b21      	cmp	r3, #33	@ 0x21
 8003a42:	d133      	bne.n	8003aac <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a52:	d107      	bne.n	8003a64 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003a62:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fe f993 	bl	8001d94 <HAL_DMA_GetState>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d017      	beq.n	8003aa4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a78:	4a33      	ldr	r2, [pc, #204]	@ (8003b48 <I2C_ITError+0x1dc>)
 8003a7a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fd ff3d 	bl	8001908 <HAL_DMA_Abort_IT>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d04d      	beq.n	8003b30 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a9e:	4610      	mov	r0, r2
 8003aa0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003aa2:	e045      	b.n	8003b30 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f851 	bl	8003b4c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003aaa:	e041      	b.n	8003b30 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d039      	beq.n	8003b28 <I2C_ITError+0x1bc>
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b12      	cmp	r3, #18
 8003ab8:	d002      	beq.n	8003ac0 <I2C_ITError+0x154>
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b22      	cmp	r3, #34	@ 0x22
 8003abe:	d133      	bne.n	8003b28 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003aca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ace:	d107      	bne.n	8003ae0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ade:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fe f955 	bl	8001d94 <HAL_DMA_GetState>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d017      	beq.n	8003b20 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af4:	4a14      	ldr	r2, [pc, #80]	@ (8003b48 <I2C_ITError+0x1dc>)
 8003af6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fd feff 	bl	8001908 <HAL_DMA_Abort_IT>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d011      	beq.n	8003b34 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b1e:	e009      	b.n	8003b34 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f813 	bl	8003b4c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b26:	e005      	b.n	8003b34 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f80f 	bl	8003b4c <I2C_TreatErrorCallback>
  }
}
 8003b2e:	e002      	b.n	8003b36 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b30:	bf00      	nop
 8003b32:	e000      	b.n	8003b36 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b34:	bf00      	nop
}
 8003b36:	bf00      	nop
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	ffff0000 	.word	0xffff0000
 8003b44:	0800306b 	.word	0x0800306b
 8003b48:	08003be3 	.word	0x08003be3

08003b4c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b60      	cmp	r3, #96	@ 0x60
 8003b5e:	d10e      	bne.n	8003b7e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff fa6d 	bl	8003056 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b7c:	e009      	b.n	8003b92 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff fa58 	bl	8003042 <HAL_I2C_ErrorCallback>
}
 8003b92:	bf00      	nop
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d103      	bne.n	8003bb8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d007      	beq.n	8003bd6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699a      	ldr	r2, [r3, #24]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0201 	orr.w	r2, r2, #1
 8003bd4:	619a      	str	r2, [r3, #24]
  }
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b084      	sub	sp, #16
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f7ff ff9b 	bl	8003b4c <I2C_TreatErrorCallback>
}
 8003c16:	bf00      	nop
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b084      	sub	sp, #16
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	60f8      	str	r0, [r7, #12]
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	603b      	str	r3, [r7, #0]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c2e:	e03b      	b.n	8003ca8 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	6839      	ldr	r1, [r7, #0]
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 f961 	bl	8003efc <I2C_IsErrorOccurred>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e041      	b.n	8003cc8 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4a:	d02d      	beq.n	8003ca8 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4c:	f7fd fcfc 	bl	8001648 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d302      	bcc.n	8003c62 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d122      	bne.n	8003ca8 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	699a      	ldr	r2, [r3, #24]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	bf0c      	ite	eq
 8003c72:	2301      	moveq	r3, #1
 8003c74:	2300      	movne	r3, #0
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	461a      	mov	r2, r3
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d113      	bne.n	8003ca8 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c84:	f043 0220 	orr.w	r2, r3, #32
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e00f      	b.n	8003cc8 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699a      	ldr	r2, [r3, #24]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	bf0c      	ite	eq
 8003cb8:	2301      	moveq	r3, #1
 8003cba:	2300      	movne	r3, #0
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	79fb      	ldrb	r3, [r7, #7]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d0b4      	beq.n	8003c30 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cdc:	e033      	b.n	8003d46 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	68b9      	ldr	r1, [r7, #8]
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f90a 	bl	8003efc <I2C_IsErrorOccurred>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e031      	b.n	8003d56 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf8:	d025      	beq.n	8003d46 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cfa:	f7fd fca5 	bl	8001648 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d302      	bcc.n	8003d10 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d11a      	bne.n	8003d46 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d013      	beq.n	8003d46 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d22:	f043 0220 	orr.w	r2, r3, #32
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e007      	b.n	8003d56 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d1c4      	bne.n	8003cde <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b084      	sub	sp, #16
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d6a:	e02f      	b.n	8003dcc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	68b9      	ldr	r1, [r7, #8]
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 f8c3 	bl	8003efc <I2C_IsErrorOccurred>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e02d      	b.n	8003ddc <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d80:	f7fd fc62 	bl	8001648 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d302      	bcc.n	8003d96 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d11a      	bne.n	8003dcc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	f003 0320 	and.w	r3, r3, #32
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	d013      	beq.n	8003dcc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da8:	f043 0220 	orr.w	r2, r3, #32
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e007      	b.n	8003ddc <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	f003 0320 	and.w	r3, r3, #32
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	d1c8      	bne.n	8003d6c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003df0:	2300      	movs	r3, #0
 8003df2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003df4:	e071      	b.n	8003eda <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	68b9      	ldr	r1, [r7, #8]
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 f87e 	bl	8003efc <I2C_IsErrorOccurred>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	f003 0320 	and.w	r3, r3, #32
 8003e14:	2b20      	cmp	r3, #32
 8003e16:	d13b      	bne.n	8003e90 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003e18:	7dfb      	ldrb	r3, [r7, #23]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d138      	bne.n	8003e90 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d105      	bne.n	8003e38 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003e34:	2300      	movs	r3, #0
 8003e36:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	f003 0310 	and.w	r3, r3, #16
 8003e42:	2b10      	cmp	r3, #16
 8003e44:	d121      	bne.n	8003e8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2210      	movs	r2, #16
 8003e4c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2204      	movs	r2, #4
 8003e52:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6859      	ldr	r1, [r3, #4]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	4b24      	ldr	r3, [pc, #144]	@ (8003ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003e68:	400b      	ands	r3, r1
 8003e6a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	75fb      	strb	r3, [r7, #23]
 8003e88:	e002      	b.n	8003e90 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003e90:	f7fd fbda 	bl	8001648 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d302      	bcc.n	8003ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d119      	bne.n	8003eda <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003ea6:	7dfb      	ldrb	r3, [r7, #23]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d116      	bne.n	8003eda <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d00f      	beq.n	8003eda <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ebe:	f043 0220 	orr.w	r2, r3, #32
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d002      	beq.n	8003eee <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003ee8:	7dfb      	ldrb	r3, [r7, #23]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d083      	beq.n	8003df6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	fe00e800 	.word	0xfe00e800

08003efc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08a      	sub	sp, #40	@ 0x28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003f16:	2300      	movs	r3, #0
 8003f18:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d068      	beq.n	8003ffa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2210      	movs	r2, #16
 8003f2e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f30:	e049      	b.n	8003fc6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f38:	d045      	beq.n	8003fc6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f3a:	f7fd fb85 	bl	8001648 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d302      	bcc.n	8003f50 <I2C_IsErrorOccurred+0x54>
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d13a      	bne.n	8003fc6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f5a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f62:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f72:	d121      	bne.n	8003fb8 <I2C_IsErrorOccurred+0xbc>
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f7a:	d01d      	beq.n	8003fb8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003f7c:	7cfb      	ldrb	r3, [r7, #19]
 8003f7e:	2b20      	cmp	r3, #32
 8003f80:	d01a      	beq.n	8003fb8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f90:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003f92:	f7fd fb59 	bl	8001648 <HAL_GetTick>
 8003f96:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f98:	e00e      	b.n	8003fb8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003f9a:	f7fd fb55 	bl	8001648 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b19      	cmp	r3, #25
 8003fa6:	d907      	bls.n	8003fb8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	f043 0320 	orr.w	r3, r3, #32
 8003fae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003fb6:	e006      	b.n	8003fc6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	f003 0320 	and.w	r3, r3, #32
 8003fc2:	2b20      	cmp	r3, #32
 8003fc4:	d1e9      	bne.n	8003f9a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	f003 0320 	and.w	r3, r3, #32
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	d003      	beq.n	8003fdc <I2C_IsErrorOccurred+0xe0>
 8003fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0aa      	beq.n	8003f32 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d103      	bne.n	8003fec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	f043 0304 	orr.w	r3, r3, #4
 8003ff2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00b      	beq.n	8004024 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	f043 0301 	orr.w	r3, r3, #1
 8004012:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800401c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00b      	beq.n	8004046 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	f043 0308 	orr.w	r3, r3, #8
 8004034:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800403e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00b      	beq.n	8004068 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	f043 0302 	orr.w	r3, r3, #2
 8004056:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004060:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004068:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800406c:	2b00      	cmp	r3, #0
 800406e:	d01c      	beq.n	80040aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f7ff fd92 	bl	8003b9a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6859      	ldr	r1, [r3, #4]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	4b0d      	ldr	r3, [pc, #52]	@ (80040b8 <I2C_IsErrorOccurred+0x1bc>)
 8004082:	400b      	ands	r3, r1
 8004084:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	431a      	orrs	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2220      	movs	r2, #32
 8004096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80040aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3728      	adds	r7, #40	@ 0x28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	fe00e800 	.word	0xfe00e800

080040bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	607b      	str	r3, [r7, #4]
 80040c6:	460b      	mov	r3, r1
 80040c8:	817b      	strh	r3, [r7, #10]
 80040ca:	4613      	mov	r3, r2
 80040cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040ce:	897b      	ldrh	r3, [r7, #10]
 80040d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040d4:	7a7b      	ldrb	r3, [r7, #9]
 80040d6:	041b      	lsls	r3, r3, #16
 80040d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	0d5b      	lsrs	r3, r3, #21
 80040f6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80040fa:	4b08      	ldr	r3, [pc, #32]	@ (800411c <I2C_TransferConfig+0x60>)
 80040fc:	430b      	orrs	r3, r1
 80040fe:	43db      	mvns	r3, r3
 8004100:	ea02 0103 	and.w	r1, r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	430a      	orrs	r2, r1
 800410c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800410e:	bf00      	nop
 8004110:	371c      	adds	r7, #28
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	03ff63ff 	.word	0x03ff63ff

08004120 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004130:	887b      	ldrh	r3, [r7, #2]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00f      	beq.n	800415a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004140:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004148:	b2db      	uxtb	r3, r3
 800414a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800414e:	2b28      	cmp	r3, #40	@ 0x28
 8004150:	d003      	beq.n	800415a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004158:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800415a:	887b      	ldrh	r3, [r7, #2]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00f      	beq.n	8004184 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800416a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004172:	b2db      	uxtb	r3, r3
 8004174:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004178:	2b28      	cmp	r3, #40	@ 0x28
 800417a:	d003      	beq.n	8004184 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004182:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004184:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004188:	2b00      	cmp	r3, #0
 800418a:	da03      	bge.n	8004194 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004192:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004194:	887b      	ldrh	r3, [r7, #2]
 8004196:	2b10      	cmp	r3, #16
 8004198:	d103      	bne.n	80041a2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80041a0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80041a2:	887b      	ldrh	r3, [r7, #2]
 80041a4:	2b20      	cmp	r3, #32
 80041a6:	d103      	bne.n	80041b0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f043 0320 	orr.w	r3, r3, #32
 80041ae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80041b0:	887b      	ldrh	r3, [r7, #2]
 80041b2:	2b40      	cmp	r3, #64	@ 0x40
 80041b4:	d103      	bne.n	80041be <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041bc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6819      	ldr	r1, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	43da      	mvns	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	400a      	ands	r2, r1
 80041ce:	601a      	str	r2, [r3, #0]
}
 80041d0:	bf00      	nop
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b20      	cmp	r3, #32
 80041f0:	d138      	bne.n	8004264 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d101      	bne.n	8004200 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041fc:	2302      	movs	r3, #2
 80041fe:	e032      	b.n	8004266 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2224      	movs	r2, #36	@ 0x24
 800420c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0201 	bic.w	r2, r2, #1
 800421e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800422e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6819      	ldr	r1, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0201 	orr.w	r2, r2, #1
 800424e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004260:	2300      	movs	r3, #0
 8004262:	e000      	b.n	8004266 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004264:	2302      	movs	r3, #2
  }
}
 8004266:	4618      	mov	r0, r3
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004272:	b480      	push	{r7}
 8004274:	b085      	sub	sp, #20
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
 800427a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b20      	cmp	r3, #32
 8004286:	d139      	bne.n	80042fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800428e:	2b01      	cmp	r3, #1
 8004290:	d101      	bne.n	8004296 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004292:	2302      	movs	r3, #2
 8004294:	e033      	b.n	80042fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2224      	movs	r2, #36	@ 0x24
 80042a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0201 	bic.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80042c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	021b      	lsls	r3, r3, #8
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	e000      	b.n	80042fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042fc:	2302      	movs	r3, #2
  }
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b086      	sub	sp, #24
 800430e:	af02      	add	r7, sp, #8
 8004310:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e0fe      	b.n	800451a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d106      	bne.n	8004336 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7fc ff5b 	bl	80011ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2203      	movs	r2, #3
 800433a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f005 f992 	bl	800966c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6818      	ldr	r0, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	7c1a      	ldrb	r2, [r3, #16]
 8004350:	f88d 2000 	strb.w	r2, [sp]
 8004354:	3304      	adds	r3, #4
 8004356:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004358:	f005 f916 	bl	8009588 <USB_CoreInit>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d005      	beq.n	800436e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2202      	movs	r2, #2
 8004366:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e0d5      	b.n	800451a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2100      	movs	r1, #0
 8004374:	4618      	mov	r0, r3
 8004376:	f005 f98a 	bl	800968e <USB_SetCurrentMode>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e0c6      	b.n	800451a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800438c:	2300      	movs	r3, #0
 800438e:	73fb      	strb	r3, [r7, #15]
 8004390:	e04a      	b.n	8004428 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004392:	7bfa      	ldrb	r2, [r7, #15]
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	4613      	mov	r3, r2
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	4413      	add	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	440b      	add	r3, r1
 80043a0:	3315      	adds	r3, #21
 80043a2:	2201      	movs	r2, #1
 80043a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80043a6:	7bfa      	ldrb	r2, [r7, #15]
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	4613      	mov	r3, r2
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	4413      	add	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	3314      	adds	r3, #20
 80043b6:	7bfa      	ldrb	r2, [r7, #15]
 80043b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80043ba:	7bfa      	ldrb	r2, [r7, #15]
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
 80043be:	b298      	uxth	r0, r3
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	4613      	mov	r3, r2
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	4413      	add	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	440b      	add	r3, r1
 80043cc:	332e      	adds	r3, #46	@ 0x2e
 80043ce:	4602      	mov	r2, r0
 80043d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80043d2:	7bfa      	ldrb	r2, [r7, #15]
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	4613      	mov	r3, r2
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	4413      	add	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	440b      	add	r3, r1
 80043e0:	3318      	adds	r3, #24
 80043e2:	2200      	movs	r2, #0
 80043e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80043e6:	7bfa      	ldrb	r2, [r7, #15]
 80043e8:	6879      	ldr	r1, [r7, #4]
 80043ea:	4613      	mov	r3, r2
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	4413      	add	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	440b      	add	r3, r1
 80043f4:	331c      	adds	r3, #28
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80043fa:	7bfa      	ldrb	r2, [r7, #15]
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	4413      	add	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	440b      	add	r3, r1
 8004408:	3320      	adds	r3, #32
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800440e:	7bfa      	ldrb	r2, [r7, #15]
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	4613      	mov	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	4413      	add	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	440b      	add	r3, r1
 800441c:	3324      	adds	r3, #36	@ 0x24
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	3301      	adds	r3, #1
 8004426:	73fb      	strb	r3, [r7, #15]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	791b      	ldrb	r3, [r3, #4]
 800442c:	7bfa      	ldrb	r2, [r7, #15]
 800442e:	429a      	cmp	r2, r3
 8004430:	d3af      	bcc.n	8004392 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004432:	2300      	movs	r3, #0
 8004434:	73fb      	strb	r3, [r7, #15]
 8004436:	e044      	b.n	80044c2 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004438:	7bfa      	ldrb	r2, [r7, #15]
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	4613      	mov	r3, r2
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	4413      	add	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800444a:	2200      	movs	r2, #0
 800444c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800444e:	7bfa      	ldrb	r2, [r7, #15]
 8004450:	6879      	ldr	r1, [r7, #4]
 8004452:	4613      	mov	r3, r2
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	440b      	add	r3, r1
 800445c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004460:	7bfa      	ldrb	r2, [r7, #15]
 8004462:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004464:	7bfa      	ldrb	r2, [r7, #15]
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	4613      	mov	r3, r2
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	4413      	add	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004476:	2200      	movs	r2, #0
 8004478:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800447a:	7bfa      	ldrb	r2, [r7, #15]
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	440b      	add	r3, r1
 8004488:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004490:	7bfa      	ldrb	r2, [r7, #15]
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	4613      	mov	r3, r2
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	4413      	add	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80044a6:	7bfa      	ldrb	r2, [r7, #15]
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	4613      	mov	r3, r2
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	4413      	add	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	3301      	adds	r3, #1
 80044c0:	73fb      	strb	r3, [r7, #15]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	791b      	ldrb	r3, [r3, #4]
 80044c6:	7bfa      	ldrb	r2, [r7, #15]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d3b5      	bcc.n	8004438 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6818      	ldr	r0, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	7c1a      	ldrb	r2, [r3, #16]
 80044d4:	f88d 2000 	strb.w	r2, [sp]
 80044d8:	3304      	adds	r3, #4
 80044da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044dc:	f005 f924 	bl	8009728 <USB_DevInit>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d005      	beq.n	80044f2 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2202      	movs	r2, #2
 80044ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e013      	b.n	800451a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	7b1b      	ldrb	r3, [r3, #12]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d102      	bne.n	800450e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f80b 	bl	8004524 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f005 fadf 	bl	8009ad6 <USB_DevDisconnect>

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
	...

08004524 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004552:	4b05      	ldr	r3, [pc, #20]	@ (8004568 <HAL_PCDEx_ActivateLPM+0x44>)
 8004554:	4313      	orrs	r3, r2
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	10000003 	.word	0x10000003

0800456c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004574:	4b19      	ldr	r3, [pc, #100]	@ (80045dc <HAL_PWREx_ConfigSupply+0x70>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b04      	cmp	r3, #4
 800457e:	d00a      	beq.n	8004596 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004580:	4b16      	ldr	r3, [pc, #88]	@ (80045dc <HAL_PWREx_ConfigSupply+0x70>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	429a      	cmp	r2, r3
 800458c:	d001      	beq.n	8004592 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e01f      	b.n	80045d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004592:	2300      	movs	r3, #0
 8004594:	e01d      	b.n	80045d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004596:	4b11      	ldr	r3, [pc, #68]	@ (80045dc <HAL_PWREx_ConfigSupply+0x70>)
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f023 0207 	bic.w	r2, r3, #7
 800459e:	490f      	ldr	r1, [pc, #60]	@ (80045dc <HAL_PWREx_ConfigSupply+0x70>)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80045a6:	f7fd f84f 	bl	8001648 <HAL_GetTick>
 80045aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80045ac:	e009      	b.n	80045c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80045ae:	f7fd f84b 	bl	8001648 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045bc:	d901      	bls.n	80045c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e007      	b.n	80045d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80045c2:	4b06      	ldr	r3, [pc, #24]	@ (80045dc <HAL_PWREx_ConfigSupply+0x70>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045ce:	d1ee      	bne.n	80045ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	58024800 	.word	0x58024800

080045e0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80045e4:	4b05      	ldr	r3, [pc, #20]	@ (80045fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	4a04      	ldr	r2, [pc, #16]	@ (80045fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80045ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045ee:	60d3      	str	r3, [r2, #12]
}
 80045f0:	bf00      	nop
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	58024800 	.word	0x58024800

08004600 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08c      	sub	sp, #48	@ 0x30
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d102      	bne.n	8004614 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	f000 bc48 	b.w	8004ea4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 8088 	beq.w	8004732 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004622:	4b99      	ldr	r3, [pc, #612]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800462a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800462c:	4b96      	ldr	r3, [pc, #600]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 800462e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004630:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004634:	2b10      	cmp	r3, #16
 8004636:	d007      	beq.n	8004648 <HAL_RCC_OscConfig+0x48>
 8004638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800463a:	2b18      	cmp	r3, #24
 800463c:	d111      	bne.n	8004662 <HAL_RCC_OscConfig+0x62>
 800463e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004640:	f003 0303 	and.w	r3, r3, #3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d10c      	bne.n	8004662 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004648:	4b8f      	ldr	r3, [pc, #572]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d06d      	beq.n	8004730 <HAL_RCC_OscConfig+0x130>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d169      	bne.n	8004730 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	f000 bc21 	b.w	8004ea4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800466a:	d106      	bne.n	800467a <HAL_RCC_OscConfig+0x7a>
 800466c:	4b86      	ldr	r3, [pc, #536]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a85      	ldr	r2, [pc, #532]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 8004672:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	e02e      	b.n	80046d8 <HAL_RCC_OscConfig+0xd8>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10c      	bne.n	800469c <HAL_RCC_OscConfig+0x9c>
 8004682:	4b81      	ldr	r3, [pc, #516]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a80      	ldr	r2, [pc, #512]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 8004688:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	4b7e      	ldr	r3, [pc, #504]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a7d      	ldr	r2, [pc, #500]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 8004694:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	e01d      	b.n	80046d8 <HAL_RCC_OscConfig+0xd8>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046a4:	d10c      	bne.n	80046c0 <HAL_RCC_OscConfig+0xc0>
 80046a6:	4b78      	ldr	r3, [pc, #480]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a77      	ldr	r2, [pc, #476]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 80046ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	4b75      	ldr	r3, [pc, #468]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a74      	ldr	r2, [pc, #464]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 80046b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	e00b      	b.n	80046d8 <HAL_RCC_OscConfig+0xd8>
 80046c0:	4b71      	ldr	r3, [pc, #452]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a70      	ldr	r2, [pc, #448]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 80046c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046ca:	6013      	str	r3, [r2, #0]
 80046cc:	4b6e      	ldr	r3, [pc, #440]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a6d      	ldr	r2, [pc, #436]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 80046d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d013      	beq.n	8004708 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e0:	f7fc ffb2 	bl	8001648 <HAL_GetTick>
 80046e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046e8:	f7fc ffae 	bl	8001648 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b64      	cmp	r3, #100	@ 0x64
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e3d4      	b.n	8004ea4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046fa:	4b63      	ldr	r3, [pc, #396]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0f0      	beq.n	80046e8 <HAL_RCC_OscConfig+0xe8>
 8004706:	e014      	b.n	8004732 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004708:	f7fc ff9e 	bl	8001648 <HAL_GetTick>
 800470c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004710:	f7fc ff9a 	bl	8001648 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b64      	cmp	r3, #100	@ 0x64
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e3c0      	b.n	8004ea4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004722:	4b59      	ldr	r3, [pc, #356]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f0      	bne.n	8004710 <HAL_RCC_OscConfig+0x110>
 800472e:	e000      	b.n	8004732 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 80ca 	beq.w	80048d4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004740:	4b51      	ldr	r3, [pc, #324]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004748:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800474a:	4b4f      	ldr	r3, [pc, #316]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 800474c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d007      	beq.n	8004766 <HAL_RCC_OscConfig+0x166>
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	2b18      	cmp	r3, #24
 800475a:	d156      	bne.n	800480a <HAL_RCC_OscConfig+0x20a>
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d151      	bne.n	800480a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004766:	4b48      	ldr	r3, [pc, #288]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0304 	and.w	r3, r3, #4
 800476e:	2b00      	cmp	r3, #0
 8004770:	d005      	beq.n	800477e <HAL_RCC_OscConfig+0x17e>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e392      	b.n	8004ea4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800477e:	4b42      	ldr	r3, [pc, #264]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f023 0219 	bic.w	r2, r3, #25
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	493f      	ldr	r1, [pc, #252]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 800478c:	4313      	orrs	r3, r2
 800478e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004790:	f7fc ff5a 	bl	8001648 <HAL_GetTick>
 8004794:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004798:	f7fc ff56 	bl	8001648 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e37c      	b.n	8004ea4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047aa:	4b37      	ldr	r3, [pc, #220]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0304 	and.w	r3, r3, #4
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0f0      	beq.n	8004798 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b6:	f7fc ff77 	bl	80016a8 <HAL_GetREVID>
 80047ba:	4603      	mov	r3, r0
 80047bc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d817      	bhi.n	80047f4 <HAL_RCC_OscConfig+0x1f4>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	2b40      	cmp	r3, #64	@ 0x40
 80047ca:	d108      	bne.n	80047de <HAL_RCC_OscConfig+0x1de>
 80047cc:	4b2e      	ldr	r3, [pc, #184]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80047d4:	4a2c      	ldr	r2, [pc, #176]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 80047d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047da:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047dc:	e07a      	b.n	80048d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047de:	4b2a      	ldr	r3, [pc, #168]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	031b      	lsls	r3, r3, #12
 80047ec:	4926      	ldr	r1, [pc, #152]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047f2:	e06f      	b.n	80048d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f4:	4b24      	ldr	r3, [pc, #144]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	061b      	lsls	r3, r3, #24
 8004802:	4921      	ldr	r1, [pc, #132]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 8004804:	4313      	orrs	r3, r2
 8004806:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004808:	e064      	b.n	80048d4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d047      	beq.n	80048a2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004812:	4b1d      	ldr	r3, [pc, #116]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f023 0219 	bic.w	r2, r3, #25
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	491a      	ldr	r1, [pc, #104]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 8004820:	4313      	orrs	r3, r2
 8004822:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004824:	f7fc ff10 	bl	8001648 <HAL_GetTick>
 8004828:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800482c:	f7fc ff0c 	bl	8001648 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e332      	b.n	8004ea4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800483e:	4b12      	ldr	r3, [pc, #72]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0f0      	beq.n	800482c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800484a:	f7fc ff2d 	bl	80016a8 <HAL_GetREVID>
 800484e:	4603      	mov	r3, r0
 8004850:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004854:	4293      	cmp	r3, r2
 8004856:	d819      	bhi.n	800488c <HAL_RCC_OscConfig+0x28c>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	2b40      	cmp	r3, #64	@ 0x40
 800485e:	d108      	bne.n	8004872 <HAL_RCC_OscConfig+0x272>
 8004860:	4b09      	ldr	r3, [pc, #36]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004868:	4a07      	ldr	r2, [pc, #28]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 800486a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800486e:	6053      	str	r3, [r2, #4]
 8004870:	e030      	b.n	80048d4 <HAL_RCC_OscConfig+0x2d4>
 8004872:	4b05      	ldr	r3, [pc, #20]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	031b      	lsls	r3, r3, #12
 8004880:	4901      	ldr	r1, [pc, #4]	@ (8004888 <HAL_RCC_OscConfig+0x288>)
 8004882:	4313      	orrs	r3, r2
 8004884:	604b      	str	r3, [r1, #4]
 8004886:	e025      	b.n	80048d4 <HAL_RCC_OscConfig+0x2d4>
 8004888:	58024400 	.word	0x58024400
 800488c:	4b9a      	ldr	r3, [pc, #616]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	061b      	lsls	r3, r3, #24
 800489a:	4997      	ldr	r1, [pc, #604]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 800489c:	4313      	orrs	r3, r2
 800489e:	604b      	str	r3, [r1, #4]
 80048a0:	e018      	b.n	80048d4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048a2:	4b95      	ldr	r3, [pc, #596]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a94      	ldr	r2, [pc, #592]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 80048a8:	f023 0301 	bic.w	r3, r3, #1
 80048ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ae:	f7fc fecb 	bl	8001648 <HAL_GetTick>
 80048b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048b6:	f7fc fec7 	bl	8001648 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e2ed      	b.n	8004ea4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80048c8:	4b8b      	ldr	r3, [pc, #556]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1f0      	bne.n	80048b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0310 	and.w	r3, r3, #16
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 80a9 	beq.w	8004a34 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048e2:	4b85      	ldr	r3, [pc, #532]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048ea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048ec:	4b82      	ldr	r3, [pc, #520]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 80048ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d007      	beq.n	8004908 <HAL_RCC_OscConfig+0x308>
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	2b18      	cmp	r3, #24
 80048fc:	d13a      	bne.n	8004974 <HAL_RCC_OscConfig+0x374>
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f003 0303 	and.w	r3, r3, #3
 8004904:	2b01      	cmp	r3, #1
 8004906:	d135      	bne.n	8004974 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004908:	4b7b      	ldr	r3, [pc, #492]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004910:	2b00      	cmp	r3, #0
 8004912:	d005      	beq.n	8004920 <HAL_RCC_OscConfig+0x320>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	2b80      	cmp	r3, #128	@ 0x80
 800491a:	d001      	beq.n	8004920 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e2c1      	b.n	8004ea4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004920:	f7fc fec2 	bl	80016a8 <HAL_GetREVID>
 8004924:	4603      	mov	r3, r0
 8004926:	f241 0203 	movw	r2, #4099	@ 0x1003
 800492a:	4293      	cmp	r3, r2
 800492c:	d817      	bhi.n	800495e <HAL_RCC_OscConfig+0x35e>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	2b20      	cmp	r3, #32
 8004934:	d108      	bne.n	8004948 <HAL_RCC_OscConfig+0x348>
 8004936:	4b70      	ldr	r3, [pc, #448]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800493e:	4a6e      	ldr	r2, [pc, #440]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 8004940:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004944:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004946:	e075      	b.n	8004a34 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004948:	4b6b      	ldr	r3, [pc, #428]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	069b      	lsls	r3, r3, #26
 8004956:	4968      	ldr	r1, [pc, #416]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 8004958:	4313      	orrs	r3, r2
 800495a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800495c:	e06a      	b.n	8004a34 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800495e:	4b66      	ldr	r3, [pc, #408]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	061b      	lsls	r3, r3, #24
 800496c:	4962      	ldr	r1, [pc, #392]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 800496e:	4313      	orrs	r3, r2
 8004970:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004972:	e05f      	b.n	8004a34 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d042      	beq.n	8004a02 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800497c:	4b5e      	ldr	r3, [pc, #376]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a5d      	ldr	r2, [pc, #372]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 8004982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004988:	f7fc fe5e 	bl	8001648 <HAL_GetTick>
 800498c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004990:	f7fc fe5a 	bl	8001648 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e280      	b.n	8004ea4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049a2:	4b55      	ldr	r3, [pc, #340]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0f0      	beq.n	8004990 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049ae:	f7fc fe7b 	bl	80016a8 <HAL_GetREVID>
 80049b2:	4603      	mov	r3, r0
 80049b4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d817      	bhi.n	80049ec <HAL_RCC_OscConfig+0x3ec>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	2b20      	cmp	r3, #32
 80049c2:	d108      	bne.n	80049d6 <HAL_RCC_OscConfig+0x3d6>
 80049c4:	4b4c      	ldr	r3, [pc, #304]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80049cc:	4a4a      	ldr	r2, [pc, #296]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 80049ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80049d2:	6053      	str	r3, [r2, #4]
 80049d4:	e02e      	b.n	8004a34 <HAL_RCC_OscConfig+0x434>
 80049d6:	4b48      	ldr	r3, [pc, #288]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	069b      	lsls	r3, r3, #26
 80049e4:	4944      	ldr	r1, [pc, #272]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	604b      	str	r3, [r1, #4]
 80049ea:	e023      	b.n	8004a34 <HAL_RCC_OscConfig+0x434>
 80049ec:	4b42      	ldr	r3, [pc, #264]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	061b      	lsls	r3, r3, #24
 80049fa:	493f      	ldr	r1, [pc, #252]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	60cb      	str	r3, [r1, #12]
 8004a00:	e018      	b.n	8004a34 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004a02:	4b3d      	ldr	r3, [pc, #244]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a3c      	ldr	r2, [pc, #240]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 8004a08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0e:	f7fc fe1b 	bl	8001648 <HAL_GetTick>
 8004a12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004a16:	f7fc fe17 	bl	8001648 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e23d      	b.n	8004ea4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a28:	4b33      	ldr	r3, [pc, #204]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1f0      	bne.n	8004a16 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0308 	and.w	r3, r3, #8
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d036      	beq.n	8004aae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d019      	beq.n	8004a7c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a48:	4b2b      	ldr	r3, [pc, #172]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 8004a4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a4c:	4a2a      	ldr	r2, [pc, #168]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 8004a4e:	f043 0301 	orr.w	r3, r3, #1
 8004a52:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a54:	f7fc fdf8 	bl	8001648 <HAL_GetTick>
 8004a58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a5c:	f7fc fdf4 	bl	8001648 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e21a      	b.n	8004ea4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a6e:	4b22      	ldr	r3, [pc, #136]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 8004a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0f0      	beq.n	8004a5c <HAL_RCC_OscConfig+0x45c>
 8004a7a:	e018      	b.n	8004aae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 8004a7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a80:	4a1d      	ldr	r2, [pc, #116]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 8004a82:	f023 0301 	bic.w	r3, r3, #1
 8004a86:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a88:	f7fc fdde 	bl	8001648 <HAL_GetTick>
 8004a8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a90:	f7fc fdda 	bl	8001648 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e200      	b.n	8004ea4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004aa2:	4b15      	ldr	r3, [pc, #84]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 8004aa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1f0      	bne.n	8004a90 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d039      	beq.n	8004b2e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d01c      	beq.n	8004afc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a0c      	ldr	r2, [pc, #48]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 8004ac8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004acc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ace:	f7fc fdbb 	bl	8001648 <HAL_GetTick>
 8004ad2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ad6:	f7fc fdb7 	bl	8001648 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e1dd      	b.n	8004ea4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ae8:	4b03      	ldr	r3, [pc, #12]	@ (8004af8 <HAL_RCC_OscConfig+0x4f8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0f0      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x4d6>
 8004af4:	e01b      	b.n	8004b2e <HAL_RCC_OscConfig+0x52e>
 8004af6:	bf00      	nop
 8004af8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004afc:	4b9b      	ldr	r3, [pc, #620]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a9a      	ldr	r2, [pc, #616]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004b02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b06:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b08:	f7fc fd9e 	bl	8001648 <HAL_GetTick>
 8004b0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b10:	f7fc fd9a 	bl	8001648 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e1c0      	b.n	8004ea4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b22:	4b92      	ldr	r3, [pc, #584]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f0      	bne.n	8004b10 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0304 	and.w	r3, r3, #4
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 8081 	beq.w	8004c3e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b3c:	4b8c      	ldr	r3, [pc, #560]	@ (8004d70 <HAL_RCC_OscConfig+0x770>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a8b      	ldr	r2, [pc, #556]	@ (8004d70 <HAL_RCC_OscConfig+0x770>)
 8004b42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b48:	f7fc fd7e 	bl	8001648 <HAL_GetTick>
 8004b4c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b50:	f7fc fd7a 	bl	8001648 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b64      	cmp	r3, #100	@ 0x64
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e1a0      	b.n	8004ea4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b62:	4b83      	ldr	r3, [pc, #524]	@ (8004d70 <HAL_RCC_OscConfig+0x770>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0f0      	beq.n	8004b50 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d106      	bne.n	8004b84 <HAL_RCC_OscConfig+0x584>
 8004b76:	4b7d      	ldr	r3, [pc, #500]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b7a:	4a7c      	ldr	r2, [pc, #496]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004b7c:	f043 0301 	orr.w	r3, r3, #1
 8004b80:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b82:	e02d      	b.n	8004be0 <HAL_RCC_OscConfig+0x5e0>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10c      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x5a6>
 8004b8c:	4b77      	ldr	r3, [pc, #476]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b90:	4a76      	ldr	r2, [pc, #472]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004b92:	f023 0301 	bic.w	r3, r3, #1
 8004b96:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b98:	4b74      	ldr	r3, [pc, #464]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b9c:	4a73      	ldr	r2, [pc, #460]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004b9e:	f023 0304 	bic.w	r3, r3, #4
 8004ba2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ba4:	e01c      	b.n	8004be0 <HAL_RCC_OscConfig+0x5e0>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	2b05      	cmp	r3, #5
 8004bac:	d10c      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x5c8>
 8004bae:	4b6f      	ldr	r3, [pc, #444]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb2:	4a6e      	ldr	r2, [pc, #440]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004bb4:	f043 0304 	orr.w	r3, r3, #4
 8004bb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bba:	4b6c      	ldr	r3, [pc, #432]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bbe:	4a6b      	ldr	r2, [pc, #428]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004bc0:	f043 0301 	orr.w	r3, r3, #1
 8004bc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bc6:	e00b      	b.n	8004be0 <HAL_RCC_OscConfig+0x5e0>
 8004bc8:	4b68      	ldr	r3, [pc, #416]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bcc:	4a67      	ldr	r2, [pc, #412]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004bce:	f023 0301 	bic.w	r3, r3, #1
 8004bd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bd4:	4b65      	ldr	r3, [pc, #404]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd8:	4a64      	ldr	r2, [pc, #400]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004bda:	f023 0304 	bic.w	r3, r3, #4
 8004bde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d015      	beq.n	8004c14 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be8:	f7fc fd2e 	bl	8001648 <HAL_GetTick>
 8004bec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bee:	e00a      	b.n	8004c06 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf0:	f7fc fd2a 	bl	8001648 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e14e      	b.n	8004ea4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c06:	4b59      	ldr	r3, [pc, #356]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0ee      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x5f0>
 8004c12:	e014      	b.n	8004c3e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c14:	f7fc fd18 	bl	8001648 <HAL_GetTick>
 8004c18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c1a:	e00a      	b.n	8004c32 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c1c:	f7fc fd14 	bl	8001648 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e138      	b.n	8004ea4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c32:	4b4e      	ldr	r3, [pc, #312]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1ee      	bne.n	8004c1c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 812d 	beq.w	8004ea2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004c48:	4b48      	ldr	r3, [pc, #288]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c50:	2b18      	cmp	r3, #24
 8004c52:	f000 80bd 	beq.w	8004dd0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	f040 809e 	bne.w	8004d9c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c60:	4b42      	ldr	r3, [pc, #264]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a41      	ldr	r2, [pc, #260]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004c66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6c:	f7fc fcec 	bl	8001648 <HAL_GetTick>
 8004c70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c74:	f7fc fce8 	bl	8001648 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e10e      	b.n	8004ea4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c86:	4b39      	ldr	r3, [pc, #228]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1f0      	bne.n	8004c74 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c92:	4b36      	ldr	r3, [pc, #216]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004c94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c96:	4b37      	ldr	r3, [pc, #220]	@ (8004d74 <HAL_RCC_OscConfig+0x774>)
 8004c98:	4013      	ands	r3, r2
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ca2:	0112      	lsls	r2, r2, #4
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	4931      	ldr	r1, [pc, #196]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	628b      	str	r3, [r1, #40]	@ 0x28
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	025b      	lsls	r3, r3, #9
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	041b      	lsls	r3, r3, #16
 8004cca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	061b      	lsls	r3, r3, #24
 8004cd8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004cdc:	4923      	ldr	r1, [pc, #140]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004ce2:	4b22      	ldr	r3, [pc, #136]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce6:	4a21      	ldr	r2, [pc, #132]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004ce8:	f023 0301 	bic.w	r3, r3, #1
 8004cec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004cee:	4b1f      	ldr	r3, [pc, #124]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004cf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cf2:	4b21      	ldr	r3, [pc, #132]	@ (8004d78 <HAL_RCC_OscConfig+0x778>)
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004cfa:	00d2      	lsls	r2, r2, #3
 8004cfc:	491b      	ldr	r1, [pc, #108]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004d02:	4b1a      	ldr	r3, [pc, #104]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d06:	f023 020c 	bic.w	r2, r3, #12
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0e:	4917      	ldr	r1, [pc, #92]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004d14:	4b15      	ldr	r3, [pc, #84]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d18:	f023 0202 	bic.w	r2, r3, #2
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d20:	4912      	ldr	r1, [pc, #72]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d26:	4b11      	ldr	r3, [pc, #68]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2a:	4a10      	ldr	r2, [pc, #64]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d32:	4b0e      	ldr	r3, [pc, #56]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d36:	4a0d      	ldr	r2, [pc, #52]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d42:	4a0a      	ldr	r2, [pc, #40]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004d44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004d4a:	4b08      	ldr	r3, [pc, #32]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4e:	4a07      	ldr	r2, [pc, #28]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004d50:	f043 0301 	orr.w	r3, r3, #1
 8004d54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d56:	4b05      	ldr	r3, [pc, #20]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a04      	ldr	r2, [pc, #16]	@ (8004d6c <HAL_RCC_OscConfig+0x76c>)
 8004d5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d62:	f7fc fc71 	bl	8001648 <HAL_GetTick>
 8004d66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d68:	e011      	b.n	8004d8e <HAL_RCC_OscConfig+0x78e>
 8004d6a:	bf00      	nop
 8004d6c:	58024400 	.word	0x58024400
 8004d70:	58024800 	.word	0x58024800
 8004d74:	fffffc0c 	.word	0xfffffc0c
 8004d78:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d7c:	f7fc fc64 	bl	8001648 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e08a      	b.n	8004ea4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d8e:	4b47      	ldr	r3, [pc, #284]	@ (8004eac <HAL_RCC_OscConfig+0x8ac>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0f0      	beq.n	8004d7c <HAL_RCC_OscConfig+0x77c>
 8004d9a:	e082      	b.n	8004ea2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d9c:	4b43      	ldr	r3, [pc, #268]	@ (8004eac <HAL_RCC_OscConfig+0x8ac>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a42      	ldr	r2, [pc, #264]	@ (8004eac <HAL_RCC_OscConfig+0x8ac>)
 8004da2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da8:	f7fc fc4e 	bl	8001648 <HAL_GetTick>
 8004dac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004dae:	e008      	b.n	8004dc2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db0:	f7fc fc4a 	bl	8001648 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e070      	b.n	8004ea4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004dc2:	4b3a      	ldr	r3, [pc, #232]	@ (8004eac <HAL_RCC_OscConfig+0x8ac>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1f0      	bne.n	8004db0 <HAL_RCC_OscConfig+0x7b0>
 8004dce:	e068      	b.n	8004ea2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004dd0:	4b36      	ldr	r3, [pc, #216]	@ (8004eac <HAL_RCC_OscConfig+0x8ac>)
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004dd6:	4b35      	ldr	r3, [pc, #212]	@ (8004eac <HAL_RCC_OscConfig+0x8ac>)
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dda:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d031      	beq.n	8004e48 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	f003 0203 	and.w	r2, r3, #3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d12a      	bne.n	8004e48 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	091b      	lsrs	r3, r3, #4
 8004df6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d122      	bne.n	8004e48 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d11a      	bne.n	8004e48 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	0a5b      	lsrs	r3, r3, #9
 8004e16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e1e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d111      	bne.n	8004e48 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	0c1b      	lsrs	r3, r3, #16
 8004e28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e30:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d108      	bne.n	8004e48 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	0e1b      	lsrs	r3, r3, #24
 8004e3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e42:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d001      	beq.n	8004e4c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e02b      	b.n	8004ea4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004e4c:	4b17      	ldr	r3, [pc, #92]	@ (8004eac <HAL_RCC_OscConfig+0x8ac>)
 8004e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e50:	08db      	lsrs	r3, r3, #3
 8004e52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e56:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d01f      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004e62:	4b12      	ldr	r3, [pc, #72]	@ (8004eac <HAL_RCC_OscConfig+0x8ac>)
 8004e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e66:	4a11      	ldr	r2, [pc, #68]	@ (8004eac <HAL_RCC_OscConfig+0x8ac>)
 8004e68:	f023 0301 	bic.w	r3, r3, #1
 8004e6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e6e:	f7fc fbeb 	bl	8001648 <HAL_GetTick>
 8004e72:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004e74:	bf00      	nop
 8004e76:	f7fc fbe7 	bl	8001648 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d0f9      	beq.n	8004e76 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004e82:	4b0a      	ldr	r3, [pc, #40]	@ (8004eac <HAL_RCC_OscConfig+0x8ac>)
 8004e84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e86:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb0 <HAL_RCC_OscConfig+0x8b0>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004e8e:	00d2      	lsls	r2, r2, #3
 8004e90:	4906      	ldr	r1, [pc, #24]	@ (8004eac <HAL_RCC_OscConfig+0x8ac>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004e96:	4b05      	ldr	r3, [pc, #20]	@ (8004eac <HAL_RCC_OscConfig+0x8ac>)
 8004e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9a:	4a04      	ldr	r2, [pc, #16]	@ (8004eac <HAL_RCC_OscConfig+0x8ac>)
 8004e9c:	f043 0301 	orr.w	r3, r3, #1
 8004ea0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3730      	adds	r7, #48	@ 0x30
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	58024400 	.word	0x58024400
 8004eb0:	ffff0007 	.word	0xffff0007

08004eb4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e19c      	b.n	8005202 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ec8:	4b8a      	ldr	r3, [pc, #552]	@ (80050f4 <HAL_RCC_ClockConfig+0x240>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 030f 	and.w	r3, r3, #15
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d910      	bls.n	8004ef8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed6:	4b87      	ldr	r3, [pc, #540]	@ (80050f4 <HAL_RCC_ClockConfig+0x240>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f023 020f 	bic.w	r2, r3, #15
 8004ede:	4985      	ldr	r1, [pc, #532]	@ (80050f4 <HAL_RCC_ClockConfig+0x240>)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee6:	4b83      	ldr	r3, [pc, #524]	@ (80050f4 <HAL_RCC_ClockConfig+0x240>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 030f 	and.w	r3, r3, #15
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d001      	beq.n	8004ef8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e184      	b.n	8005202 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d010      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691a      	ldr	r2, [r3, #16]
 8004f08:	4b7b      	ldr	r3, [pc, #492]	@ (80050f8 <HAL_RCC_ClockConfig+0x244>)
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d908      	bls.n	8004f26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f14:	4b78      	ldr	r3, [pc, #480]	@ (80050f8 <HAL_RCC_ClockConfig+0x244>)
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	4975      	ldr	r1, [pc, #468]	@ (80050f8 <HAL_RCC_ClockConfig+0x244>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0308 	and.w	r3, r3, #8
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d010      	beq.n	8004f54 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	695a      	ldr	r2, [r3, #20]
 8004f36:	4b70      	ldr	r3, [pc, #448]	@ (80050f8 <HAL_RCC_ClockConfig+0x244>)
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d908      	bls.n	8004f54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f42:	4b6d      	ldr	r3, [pc, #436]	@ (80050f8 <HAL_RCC_ClockConfig+0x244>)
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	496a      	ldr	r1, [pc, #424]	@ (80050f8 <HAL_RCC_ClockConfig+0x244>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0310 	and.w	r3, r3, #16
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d010      	beq.n	8004f82 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	699a      	ldr	r2, [r3, #24]
 8004f64:	4b64      	ldr	r3, [pc, #400]	@ (80050f8 <HAL_RCC_ClockConfig+0x244>)
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d908      	bls.n	8004f82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f70:	4b61      	ldr	r3, [pc, #388]	@ (80050f8 <HAL_RCC_ClockConfig+0x244>)
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	495e      	ldr	r1, [pc, #376]	@ (80050f8 <HAL_RCC_ClockConfig+0x244>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0320 	and.w	r3, r3, #32
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d010      	beq.n	8004fb0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69da      	ldr	r2, [r3, #28]
 8004f92:	4b59      	ldr	r3, [pc, #356]	@ (80050f8 <HAL_RCC_ClockConfig+0x244>)
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d908      	bls.n	8004fb0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004f9e:	4b56      	ldr	r3, [pc, #344]	@ (80050f8 <HAL_RCC_ClockConfig+0x244>)
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	4953      	ldr	r1, [pc, #332]	@ (80050f8 <HAL_RCC_ClockConfig+0x244>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d010      	beq.n	8004fde <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68da      	ldr	r2, [r3, #12]
 8004fc0:	4b4d      	ldr	r3, [pc, #308]	@ (80050f8 <HAL_RCC_ClockConfig+0x244>)
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	f003 030f 	and.w	r3, r3, #15
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d908      	bls.n	8004fde <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fcc:	4b4a      	ldr	r3, [pc, #296]	@ (80050f8 <HAL_RCC_ClockConfig+0x244>)
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	f023 020f 	bic.w	r2, r3, #15
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	4947      	ldr	r1, [pc, #284]	@ (80050f8 <HAL_RCC_ClockConfig+0x244>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d055      	beq.n	8005096 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004fea:	4b43      	ldr	r3, [pc, #268]	@ (80050f8 <HAL_RCC_ClockConfig+0x244>)
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	4940      	ldr	r1, [pc, #256]	@ (80050f8 <HAL_RCC_ClockConfig+0x244>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2b02      	cmp	r3, #2
 8005002:	d107      	bne.n	8005014 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005004:	4b3c      	ldr	r3, [pc, #240]	@ (80050f8 <HAL_RCC_ClockConfig+0x244>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d121      	bne.n	8005054 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e0f6      	b.n	8005202 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2b03      	cmp	r3, #3
 800501a:	d107      	bne.n	800502c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800501c:	4b36      	ldr	r3, [pc, #216]	@ (80050f8 <HAL_RCC_ClockConfig+0x244>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d115      	bne.n	8005054 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e0ea      	b.n	8005202 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d107      	bne.n	8005044 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005034:	4b30      	ldr	r3, [pc, #192]	@ (80050f8 <HAL_RCC_ClockConfig+0x244>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800503c:	2b00      	cmp	r3, #0
 800503e:	d109      	bne.n	8005054 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e0de      	b.n	8005202 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005044:	4b2c      	ldr	r3, [pc, #176]	@ (80050f8 <HAL_RCC_ClockConfig+0x244>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e0d6      	b.n	8005202 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005054:	4b28      	ldr	r3, [pc, #160]	@ (80050f8 <HAL_RCC_ClockConfig+0x244>)
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	f023 0207 	bic.w	r2, r3, #7
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	4925      	ldr	r1, [pc, #148]	@ (80050f8 <HAL_RCC_ClockConfig+0x244>)
 8005062:	4313      	orrs	r3, r2
 8005064:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005066:	f7fc faef 	bl	8001648 <HAL_GetTick>
 800506a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800506c:	e00a      	b.n	8005084 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800506e:	f7fc faeb 	bl	8001648 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	f241 3288 	movw	r2, #5000	@ 0x1388
 800507c:	4293      	cmp	r3, r2
 800507e:	d901      	bls.n	8005084 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e0be      	b.n	8005202 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005084:	4b1c      	ldr	r3, [pc, #112]	@ (80050f8 <HAL_RCC_ClockConfig+0x244>)
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	00db      	lsls	r3, r3, #3
 8005092:	429a      	cmp	r2, r3
 8005094:	d1eb      	bne.n	800506e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d010      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68da      	ldr	r2, [r3, #12]
 80050a6:	4b14      	ldr	r3, [pc, #80]	@ (80050f8 <HAL_RCC_ClockConfig+0x244>)
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	f003 030f 	and.w	r3, r3, #15
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d208      	bcs.n	80050c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050b2:	4b11      	ldr	r3, [pc, #68]	@ (80050f8 <HAL_RCC_ClockConfig+0x244>)
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	f023 020f 	bic.w	r2, r3, #15
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	490e      	ldr	r1, [pc, #56]	@ (80050f8 <HAL_RCC_ClockConfig+0x244>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050c4:	4b0b      	ldr	r3, [pc, #44]	@ (80050f4 <HAL_RCC_ClockConfig+0x240>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 030f 	and.w	r3, r3, #15
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d214      	bcs.n	80050fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050d2:	4b08      	ldr	r3, [pc, #32]	@ (80050f4 <HAL_RCC_ClockConfig+0x240>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f023 020f 	bic.w	r2, r3, #15
 80050da:	4906      	ldr	r1, [pc, #24]	@ (80050f4 <HAL_RCC_ClockConfig+0x240>)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	4313      	orrs	r3, r2
 80050e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050e2:	4b04      	ldr	r3, [pc, #16]	@ (80050f4 <HAL_RCC_ClockConfig+0x240>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d005      	beq.n	80050fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e086      	b.n	8005202 <HAL_RCC_ClockConfig+0x34e>
 80050f4:	52002000 	.word	0x52002000
 80050f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b00      	cmp	r3, #0
 8005106:	d010      	beq.n	800512a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691a      	ldr	r2, [r3, #16]
 800510c:	4b3f      	ldr	r3, [pc, #252]	@ (800520c <HAL_RCC_ClockConfig+0x358>)
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005114:	429a      	cmp	r2, r3
 8005116:	d208      	bcs.n	800512a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005118:	4b3c      	ldr	r3, [pc, #240]	@ (800520c <HAL_RCC_ClockConfig+0x358>)
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	4939      	ldr	r1, [pc, #228]	@ (800520c <HAL_RCC_ClockConfig+0x358>)
 8005126:	4313      	orrs	r3, r2
 8005128:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	2b00      	cmp	r3, #0
 8005134:	d010      	beq.n	8005158 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	695a      	ldr	r2, [r3, #20]
 800513a:	4b34      	ldr	r3, [pc, #208]	@ (800520c <HAL_RCC_ClockConfig+0x358>)
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005142:	429a      	cmp	r2, r3
 8005144:	d208      	bcs.n	8005158 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005146:	4b31      	ldr	r3, [pc, #196]	@ (800520c <HAL_RCC_ClockConfig+0x358>)
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	492e      	ldr	r1, [pc, #184]	@ (800520c <HAL_RCC_ClockConfig+0x358>)
 8005154:	4313      	orrs	r3, r2
 8005156:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0310 	and.w	r3, r3, #16
 8005160:	2b00      	cmp	r3, #0
 8005162:	d010      	beq.n	8005186 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	699a      	ldr	r2, [r3, #24]
 8005168:	4b28      	ldr	r3, [pc, #160]	@ (800520c <HAL_RCC_ClockConfig+0x358>)
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005170:	429a      	cmp	r2, r3
 8005172:	d208      	bcs.n	8005186 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005174:	4b25      	ldr	r3, [pc, #148]	@ (800520c <HAL_RCC_ClockConfig+0x358>)
 8005176:	69db      	ldr	r3, [r3, #28]
 8005178:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	4922      	ldr	r1, [pc, #136]	@ (800520c <HAL_RCC_ClockConfig+0x358>)
 8005182:	4313      	orrs	r3, r2
 8005184:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0320 	and.w	r3, r3, #32
 800518e:	2b00      	cmp	r3, #0
 8005190:	d010      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69da      	ldr	r2, [r3, #28]
 8005196:	4b1d      	ldr	r3, [pc, #116]	@ (800520c <HAL_RCC_ClockConfig+0x358>)
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800519e:	429a      	cmp	r2, r3
 80051a0:	d208      	bcs.n	80051b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80051a2:	4b1a      	ldr	r3, [pc, #104]	@ (800520c <HAL_RCC_ClockConfig+0x358>)
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	4917      	ldr	r1, [pc, #92]	@ (800520c <HAL_RCC_ClockConfig+0x358>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80051b4:	f000 f834 	bl	8005220 <HAL_RCC_GetSysClockFreq>
 80051b8:	4602      	mov	r2, r0
 80051ba:	4b14      	ldr	r3, [pc, #80]	@ (800520c <HAL_RCC_ClockConfig+0x358>)
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	0a1b      	lsrs	r3, r3, #8
 80051c0:	f003 030f 	and.w	r3, r3, #15
 80051c4:	4912      	ldr	r1, [pc, #72]	@ (8005210 <HAL_RCC_ClockConfig+0x35c>)
 80051c6:	5ccb      	ldrb	r3, [r1, r3]
 80051c8:	f003 031f 	and.w	r3, r3, #31
 80051cc:	fa22 f303 	lsr.w	r3, r2, r3
 80051d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80051d2:	4b0e      	ldr	r3, [pc, #56]	@ (800520c <HAL_RCC_ClockConfig+0x358>)
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	f003 030f 	and.w	r3, r3, #15
 80051da:	4a0d      	ldr	r2, [pc, #52]	@ (8005210 <HAL_RCC_ClockConfig+0x35c>)
 80051dc:	5cd3      	ldrb	r3, [r2, r3]
 80051de:	f003 031f 	and.w	r3, r3, #31
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	fa22 f303 	lsr.w	r3, r2, r3
 80051e8:	4a0a      	ldr	r2, [pc, #40]	@ (8005214 <HAL_RCC_ClockConfig+0x360>)
 80051ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051ec:	4a0a      	ldr	r2, [pc, #40]	@ (8005218 <HAL_RCC_ClockConfig+0x364>)
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80051f2:	4b0a      	ldr	r3, [pc, #40]	@ (800521c <HAL_RCC_ClockConfig+0x368>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fc f9dc 	bl	80015b4 <HAL_InitTick>
 80051fc:	4603      	mov	r3, r0
 80051fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005200:	7bfb      	ldrb	r3, [r7, #15]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3718      	adds	r7, #24
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	58024400 	.word	0x58024400
 8005210:	0800a594 	.word	0x0800a594
 8005214:	24000008 	.word	0x24000008
 8005218:	24000004 	.word	0x24000004
 800521c:	2400000c 	.word	0x2400000c

08005220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005220:	b480      	push	{r7}
 8005222:	b089      	sub	sp, #36	@ 0x24
 8005224:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005226:	4bb3      	ldr	r3, [pc, #716]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800522e:	2b18      	cmp	r3, #24
 8005230:	f200 8155 	bhi.w	80054de <HAL_RCC_GetSysClockFreq+0x2be>
 8005234:	a201      	add	r2, pc, #4	@ (adr r2, 800523c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523a:	bf00      	nop
 800523c:	080052a1 	.word	0x080052a1
 8005240:	080054df 	.word	0x080054df
 8005244:	080054df 	.word	0x080054df
 8005248:	080054df 	.word	0x080054df
 800524c:	080054df 	.word	0x080054df
 8005250:	080054df 	.word	0x080054df
 8005254:	080054df 	.word	0x080054df
 8005258:	080054df 	.word	0x080054df
 800525c:	080052c7 	.word	0x080052c7
 8005260:	080054df 	.word	0x080054df
 8005264:	080054df 	.word	0x080054df
 8005268:	080054df 	.word	0x080054df
 800526c:	080054df 	.word	0x080054df
 8005270:	080054df 	.word	0x080054df
 8005274:	080054df 	.word	0x080054df
 8005278:	080054df 	.word	0x080054df
 800527c:	080052cd 	.word	0x080052cd
 8005280:	080054df 	.word	0x080054df
 8005284:	080054df 	.word	0x080054df
 8005288:	080054df 	.word	0x080054df
 800528c:	080054df 	.word	0x080054df
 8005290:	080054df 	.word	0x080054df
 8005294:	080054df 	.word	0x080054df
 8005298:	080054df 	.word	0x080054df
 800529c:	080052d3 	.word	0x080052d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052a0:	4b94      	ldr	r3, [pc, #592]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0320 	and.w	r3, r3, #32
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d009      	beq.n	80052c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052ac:	4b91      	ldr	r3, [pc, #580]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	08db      	lsrs	r3, r3, #3
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	4a90      	ldr	r2, [pc, #576]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052b8:	fa22 f303 	lsr.w	r3, r2, r3
 80052bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80052be:	e111      	b.n	80054e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80052c0:	4b8d      	ldr	r3, [pc, #564]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052c2:	61bb      	str	r3, [r7, #24]
      break;
 80052c4:	e10e      	b.n	80054e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80052c6:	4b8d      	ldr	r3, [pc, #564]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052c8:	61bb      	str	r3, [r7, #24]
      break;
 80052ca:	e10b      	b.n	80054e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80052cc:	4b8c      	ldr	r3, [pc, #560]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80052ce:	61bb      	str	r3, [r7, #24]
      break;
 80052d0:	e108      	b.n	80054e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052d2:	4b88      	ldr	r3, [pc, #544]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80052dc:	4b85      	ldr	r3, [pc, #532]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e0:	091b      	lsrs	r3, r3, #4
 80052e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80052e8:	4b82      	ldr	r3, [pc, #520]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80052f2:	4b80      	ldr	r3, [pc, #512]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052f6:	08db      	lsrs	r3, r3, #3
 80052f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	fb02 f303 	mul.w	r3, r2, r3
 8005302:	ee07 3a90 	vmov	s15, r3
 8005306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800530a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 80e1 	beq.w	80054d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2b02      	cmp	r3, #2
 800531a:	f000 8083 	beq.w	8005424 <HAL_RCC_GetSysClockFreq+0x204>
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2b02      	cmp	r3, #2
 8005322:	f200 80a1 	bhi.w	8005468 <HAL_RCC_GetSysClockFreq+0x248>
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <HAL_RCC_GetSysClockFreq+0x114>
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d056      	beq.n	80053e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005332:	e099      	b.n	8005468 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005334:	4b6f      	ldr	r3, [pc, #444]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0320 	and.w	r3, r3, #32
 800533c:	2b00      	cmp	r3, #0
 800533e:	d02d      	beq.n	800539c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005340:	4b6c      	ldr	r3, [pc, #432]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	08db      	lsrs	r3, r3, #3
 8005346:	f003 0303 	and.w	r3, r3, #3
 800534a:	4a6b      	ldr	r2, [pc, #428]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800534c:	fa22 f303 	lsr.w	r3, r2, r3
 8005350:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	ee07 3a90 	vmov	s15, r3
 8005358:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	ee07 3a90 	vmov	s15, r3
 8005362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800536a:	4b62      	ldr	r3, [pc, #392]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800536c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800536e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005372:	ee07 3a90 	vmov	s15, r3
 8005376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800537a:	ed97 6a02 	vldr	s12, [r7, #8]
 800537e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005504 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800538a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800538e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005396:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800539a:	e087      	b.n	80054ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	ee07 3a90 	vmov	s15, r3
 80053a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053a6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005508 <HAL_RCC_GetSysClockFreq+0x2e8>
 80053aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ae:	4b51      	ldr	r3, [pc, #324]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b6:	ee07 3a90 	vmov	s15, r3
 80053ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053be:	ed97 6a02 	vldr	s12, [r7, #8]
 80053c2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005504 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053de:	e065      	b.n	80054ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	ee07 3a90 	vmov	s15, r3
 80053e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800550c <HAL_RCC_GetSysClockFreq+0x2ec>
 80053ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053f2:	4b40      	ldr	r3, [pc, #256]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053fa:	ee07 3a90 	vmov	s15, r3
 80053fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005402:	ed97 6a02 	vldr	s12, [r7, #8]
 8005406:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005504 <HAL_RCC_GetSysClockFreq+0x2e4>
 800540a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800540e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800541a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800541e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005422:	e043      	b.n	80054ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	ee07 3a90 	vmov	s15, r3
 800542a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800542e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005510 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005436:	4b2f      	ldr	r3, [pc, #188]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005446:	ed97 6a02 	vldr	s12, [r7, #8]
 800544a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005504 <HAL_RCC_GetSysClockFreq+0x2e4>
 800544e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800545a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800545e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005462:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005466:	e021      	b.n	80054ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	ee07 3a90 	vmov	s15, r3
 800546e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005472:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800550c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800547a:	4b1e      	ldr	r3, [pc, #120]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800547c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800547e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005482:	ee07 3a90 	vmov	s15, r3
 8005486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800548a:	ed97 6a02 	vldr	s12, [r7, #8]
 800548e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005504 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800549a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800549e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80054ac:	4b11      	ldr	r3, [pc, #68]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b0:	0a5b      	lsrs	r3, r3, #9
 80054b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054b6:	3301      	adds	r3, #1
 80054b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	ee07 3a90 	vmov	s15, r3
 80054c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80054c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054d0:	ee17 3a90 	vmov	r3, s15
 80054d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80054d6:	e005      	b.n	80054e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	61bb      	str	r3, [r7, #24]
      break;
 80054dc:	e002      	b.n	80054e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80054de:	4b07      	ldr	r3, [pc, #28]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80054e0:	61bb      	str	r3, [r7, #24]
      break;
 80054e2:	bf00      	nop
  }

  return sysclockfreq;
 80054e4:	69bb      	ldr	r3, [r7, #24]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3724      	adds	r7, #36	@ 0x24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	58024400 	.word	0x58024400
 80054f8:	03d09000 	.word	0x03d09000
 80054fc:	003d0900 	.word	0x003d0900
 8005500:	007a1200 	.word	0x007a1200
 8005504:	46000000 	.word	0x46000000
 8005508:	4c742400 	.word	0x4c742400
 800550c:	4a742400 	.word	0x4a742400
 8005510:	4af42400 	.word	0x4af42400

08005514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800551a:	f7ff fe81 	bl	8005220 <HAL_RCC_GetSysClockFreq>
 800551e:	4602      	mov	r2, r0
 8005520:	4b10      	ldr	r3, [pc, #64]	@ (8005564 <HAL_RCC_GetHCLKFreq+0x50>)
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	0a1b      	lsrs	r3, r3, #8
 8005526:	f003 030f 	and.w	r3, r3, #15
 800552a:	490f      	ldr	r1, [pc, #60]	@ (8005568 <HAL_RCC_GetHCLKFreq+0x54>)
 800552c:	5ccb      	ldrb	r3, [r1, r3]
 800552e:	f003 031f 	and.w	r3, r3, #31
 8005532:	fa22 f303 	lsr.w	r3, r2, r3
 8005536:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005538:	4b0a      	ldr	r3, [pc, #40]	@ (8005564 <HAL_RCC_GetHCLKFreq+0x50>)
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	f003 030f 	and.w	r3, r3, #15
 8005540:	4a09      	ldr	r2, [pc, #36]	@ (8005568 <HAL_RCC_GetHCLKFreq+0x54>)
 8005542:	5cd3      	ldrb	r3, [r2, r3]
 8005544:	f003 031f 	and.w	r3, r3, #31
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	fa22 f303 	lsr.w	r3, r2, r3
 800554e:	4a07      	ldr	r2, [pc, #28]	@ (800556c <HAL_RCC_GetHCLKFreq+0x58>)
 8005550:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005552:	4a07      	ldr	r2, [pc, #28]	@ (8005570 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005558:	4b04      	ldr	r3, [pc, #16]	@ (800556c <HAL_RCC_GetHCLKFreq+0x58>)
 800555a:	681b      	ldr	r3, [r3, #0]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	58024400 	.word	0x58024400
 8005568:	0800a594 	.word	0x0800a594
 800556c:	24000008 	.word	0x24000008
 8005570:	24000004 	.word	0x24000004

08005574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005578:	f7ff ffcc 	bl	8005514 <HAL_RCC_GetHCLKFreq>
 800557c:	4602      	mov	r2, r0
 800557e:	4b06      	ldr	r3, [pc, #24]	@ (8005598 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	091b      	lsrs	r3, r3, #4
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	4904      	ldr	r1, [pc, #16]	@ (800559c <HAL_RCC_GetPCLK1Freq+0x28>)
 800558a:	5ccb      	ldrb	r3, [r1, r3]
 800558c:	f003 031f 	and.w	r3, r3, #31
 8005590:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005594:	4618      	mov	r0, r3
 8005596:	bd80      	pop	{r7, pc}
 8005598:	58024400 	.word	0x58024400
 800559c:	0800a594 	.word	0x0800a594

080055a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80055a4:	f7ff ffb6 	bl	8005514 <HAL_RCC_GetHCLKFreq>
 80055a8:	4602      	mov	r2, r0
 80055aa:	4b06      	ldr	r3, [pc, #24]	@ (80055c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	0a1b      	lsrs	r3, r3, #8
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	4904      	ldr	r1, [pc, #16]	@ (80055c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055b6:	5ccb      	ldrb	r3, [r1, r3]
 80055b8:	f003 031f 	and.w	r3, r3, #31
 80055bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	58024400 	.word	0x58024400
 80055c8:	0800a594 	.word	0x0800a594

080055cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055d0:	b0ca      	sub	sp, #296	@ 0x128
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055d8:	2300      	movs	r3, #0
 80055da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055de:	2300      	movs	r3, #0
 80055e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80055f0:	2500      	movs	r5, #0
 80055f2:	ea54 0305 	orrs.w	r3, r4, r5
 80055f6:	d049      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80055f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005602:	d02f      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005604:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005608:	d828      	bhi.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800560a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800560e:	d01a      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005610:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005614:	d822      	bhi.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800561a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800561e:	d007      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005620:	e01c      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005622:	4bb8      	ldr	r3, [pc, #736]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005626:	4ab7      	ldr	r2, [pc, #732]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005628:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800562c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800562e:	e01a      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005634:	3308      	adds	r3, #8
 8005636:	2102      	movs	r1, #2
 8005638:	4618      	mov	r0, r3
 800563a:	f001 fc8f 	bl	8006f5c <RCCEx_PLL2_Config>
 800563e:	4603      	mov	r3, r0
 8005640:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005644:	e00f      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800564a:	3328      	adds	r3, #40	@ 0x28
 800564c:	2102      	movs	r1, #2
 800564e:	4618      	mov	r0, r3
 8005650:	f001 fd36 	bl	80070c0 <RCCEx_PLL3_Config>
 8005654:	4603      	mov	r3, r0
 8005656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800565a:	e004      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005662:	e000      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005666:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10a      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800566e:	4ba5      	ldr	r3, [pc, #660]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005672:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800567a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800567c:	4aa1      	ldr	r2, [pc, #644]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800567e:	430b      	orrs	r3, r1
 8005680:	6513      	str	r3, [r2, #80]	@ 0x50
 8005682:	e003      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005684:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005688:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800568c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005694:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005698:	f04f 0900 	mov.w	r9, #0
 800569c:	ea58 0309 	orrs.w	r3, r8, r9
 80056a0:	d047      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80056a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d82a      	bhi.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80056ac:	a201      	add	r2, pc, #4	@ (adr r2, 80056b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80056ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b2:	bf00      	nop
 80056b4:	080056c9 	.word	0x080056c9
 80056b8:	080056d7 	.word	0x080056d7
 80056bc:	080056ed 	.word	0x080056ed
 80056c0:	0800570b 	.word	0x0800570b
 80056c4:	0800570b 	.word	0x0800570b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056c8:	4b8e      	ldr	r3, [pc, #568]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056cc:	4a8d      	ldr	r2, [pc, #564]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056d4:	e01a      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056da:	3308      	adds	r3, #8
 80056dc:	2100      	movs	r1, #0
 80056de:	4618      	mov	r0, r3
 80056e0:	f001 fc3c 	bl	8006f5c <RCCEx_PLL2_Config>
 80056e4:	4603      	mov	r3, r0
 80056e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056ea:	e00f      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056f0:	3328      	adds	r3, #40	@ 0x28
 80056f2:	2100      	movs	r1, #0
 80056f4:	4618      	mov	r0, r3
 80056f6:	f001 fce3 	bl	80070c0 <RCCEx_PLL3_Config>
 80056fa:	4603      	mov	r3, r0
 80056fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005700:	e004      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005708:	e000      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800570a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800570c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10a      	bne.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005714:	4b7b      	ldr	r3, [pc, #492]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005718:	f023 0107 	bic.w	r1, r3, #7
 800571c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005722:	4a78      	ldr	r2, [pc, #480]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005724:	430b      	orrs	r3, r1
 8005726:	6513      	str	r3, [r2, #80]	@ 0x50
 8005728:	e003      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800572a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800572e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800573e:	f04f 0b00 	mov.w	fp, #0
 8005742:	ea5a 030b 	orrs.w	r3, sl, fp
 8005746:	d04c      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800574c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800574e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005752:	d030      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005754:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005758:	d829      	bhi.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800575a:	2bc0      	cmp	r3, #192	@ 0xc0
 800575c:	d02d      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800575e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005760:	d825      	bhi.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005762:	2b80      	cmp	r3, #128	@ 0x80
 8005764:	d018      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005766:	2b80      	cmp	r3, #128	@ 0x80
 8005768:	d821      	bhi.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800576a:	2b00      	cmp	r3, #0
 800576c:	d002      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800576e:	2b40      	cmp	r3, #64	@ 0x40
 8005770:	d007      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005772:	e01c      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005774:	4b63      	ldr	r3, [pc, #396]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005778:	4a62      	ldr	r2, [pc, #392]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800577a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800577e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005780:	e01c      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005786:	3308      	adds	r3, #8
 8005788:	2100      	movs	r1, #0
 800578a:	4618      	mov	r0, r3
 800578c:	f001 fbe6 	bl	8006f5c <RCCEx_PLL2_Config>
 8005790:	4603      	mov	r3, r0
 8005792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005796:	e011      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800579c:	3328      	adds	r3, #40	@ 0x28
 800579e:	2100      	movs	r1, #0
 80057a0:	4618      	mov	r0, r3
 80057a2:	f001 fc8d 	bl	80070c0 <RCCEx_PLL3_Config>
 80057a6:	4603      	mov	r3, r0
 80057a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80057ac:	e006      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057b4:	e002      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80057b6:	bf00      	nop
 80057b8:	e000      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80057ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10a      	bne.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80057c4:	4b4f      	ldr	r3, [pc, #316]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057c8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80057cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057d2:	4a4c      	ldr	r2, [pc, #304]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057d4:	430b      	orrs	r3, r1
 80057d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80057d8:	e003      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80057e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ea:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80057ee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80057f2:	2300      	movs	r3, #0
 80057f4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80057f8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80057fc:	460b      	mov	r3, r1
 80057fe:	4313      	orrs	r3, r2
 8005800:	d053      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005806:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800580a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800580e:	d035      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005810:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005814:	d82e      	bhi.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005816:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800581a:	d031      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800581c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005820:	d828      	bhi.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005822:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005826:	d01a      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005828:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800582c:	d822      	bhi.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005832:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005836:	d007      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005838:	e01c      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800583a:	4b32      	ldr	r3, [pc, #200]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800583c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583e:	4a31      	ldr	r2, [pc, #196]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005844:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005846:	e01c      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800584c:	3308      	adds	r3, #8
 800584e:	2100      	movs	r1, #0
 8005850:	4618      	mov	r0, r3
 8005852:	f001 fb83 	bl	8006f5c <RCCEx_PLL2_Config>
 8005856:	4603      	mov	r3, r0
 8005858:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800585c:	e011      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800585e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005862:	3328      	adds	r3, #40	@ 0x28
 8005864:	2100      	movs	r1, #0
 8005866:	4618      	mov	r0, r3
 8005868:	f001 fc2a 	bl	80070c0 <RCCEx_PLL3_Config>
 800586c:	4603      	mov	r3, r0
 800586e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005872:	e006      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800587a:	e002      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800587c:	bf00      	nop
 800587e:	e000      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10b      	bne.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800588a:	4b1e      	ldr	r3, [pc, #120]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800588c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800588e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005896:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800589a:	4a1a      	ldr	r2, [pc, #104]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800589c:	430b      	orrs	r3, r1
 800589e:	6593      	str	r3, [r2, #88]	@ 0x58
 80058a0:	e003      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80058aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80058b6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80058ba:	2300      	movs	r3, #0
 80058bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80058c0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80058c4:	460b      	mov	r3, r1
 80058c6:	4313      	orrs	r3, r2
 80058c8:	d056      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80058ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80058d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058d6:	d038      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80058d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058dc:	d831      	bhi.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80058de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80058e2:	d034      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80058e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80058e8:	d82b      	bhi.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80058ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058ee:	d01d      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80058f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058f4:	d825      	bhi.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d006      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80058fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058fe:	d00a      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005900:	e01f      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005902:	bf00      	nop
 8005904:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005908:	4ba2      	ldr	r3, [pc, #648]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800590a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800590c:	4aa1      	ldr	r2, [pc, #644]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800590e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005912:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005914:	e01c      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800591a:	3308      	adds	r3, #8
 800591c:	2100      	movs	r1, #0
 800591e:	4618      	mov	r0, r3
 8005920:	f001 fb1c 	bl	8006f5c <RCCEx_PLL2_Config>
 8005924:	4603      	mov	r3, r0
 8005926:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800592a:	e011      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800592c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005930:	3328      	adds	r3, #40	@ 0x28
 8005932:	2100      	movs	r1, #0
 8005934:	4618      	mov	r0, r3
 8005936:	f001 fbc3 	bl	80070c0 <RCCEx_PLL3_Config>
 800593a:	4603      	mov	r3, r0
 800593c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005940:	e006      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005948:	e002      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800594a:	bf00      	nop
 800594c:	e000      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800594e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005950:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10b      	bne.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005958:	4b8e      	ldr	r3, [pc, #568]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800595a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800595c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005964:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005968:	4a8a      	ldr	r2, [pc, #552]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800596a:	430b      	orrs	r3, r1
 800596c:	6593      	str	r3, [r2, #88]	@ 0x58
 800596e:	e003      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005970:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005974:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800597c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005980:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005984:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005988:	2300      	movs	r3, #0
 800598a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800598e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005992:	460b      	mov	r3, r1
 8005994:	4313      	orrs	r3, r2
 8005996:	d03a      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800599e:	2b30      	cmp	r3, #48	@ 0x30
 80059a0:	d01f      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80059a2:	2b30      	cmp	r3, #48	@ 0x30
 80059a4:	d819      	bhi.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80059a6:	2b20      	cmp	r3, #32
 80059a8:	d00c      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80059aa:	2b20      	cmp	r3, #32
 80059ac:	d815      	bhi.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d019      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80059b2:	2b10      	cmp	r3, #16
 80059b4:	d111      	bne.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059b6:	4b77      	ldr	r3, [pc, #476]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ba:	4a76      	ldr	r2, [pc, #472]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80059c2:	e011      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c8:	3308      	adds	r3, #8
 80059ca:	2102      	movs	r1, #2
 80059cc:	4618      	mov	r0, r3
 80059ce:	f001 fac5 	bl	8006f5c <RCCEx_PLL2_Config>
 80059d2:	4603      	mov	r3, r0
 80059d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80059d8:	e006      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059e0:	e002      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80059e2:	bf00      	nop
 80059e4:	e000      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80059e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10a      	bne.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80059f0:	4b68      	ldr	r3, [pc, #416]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059f4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80059f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059fe:	4a65      	ldr	r2, [pc, #404]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a00:	430b      	orrs	r3, r1
 8005a02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a04:	e003      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a16:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005a1a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a24:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	d051      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a38:	d035      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005a3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a3e:	d82e      	bhi.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a44:	d031      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005a46:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a4a:	d828      	bhi.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a50:	d01a      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005a52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a56:	d822      	bhi.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005a5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a60:	d007      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005a62:	e01c      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a64:	4b4b      	ldr	r3, [pc, #300]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a68:	4a4a      	ldr	r2, [pc, #296]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a70:	e01c      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a76:	3308      	adds	r3, #8
 8005a78:	2100      	movs	r1, #0
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f001 fa6e 	bl	8006f5c <RCCEx_PLL2_Config>
 8005a80:	4603      	mov	r3, r0
 8005a82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a86:	e011      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a8c:	3328      	adds	r3, #40	@ 0x28
 8005a8e:	2100      	movs	r1, #0
 8005a90:	4618      	mov	r0, r3
 8005a92:	f001 fb15 	bl	80070c0 <RCCEx_PLL3_Config>
 8005a96:	4603      	mov	r3, r0
 8005a98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a9c:	e006      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005aa4:	e002      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005aa6:	bf00      	nop
 8005aa8:	e000      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005aaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10a      	bne.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ab4:	4b37      	ldr	r3, [pc, #220]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ab8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ac2:	4a34      	ldr	r2, [pc, #208]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ac4:	430b      	orrs	r3, r1
 8005ac6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ac8:	e003      	b.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ace:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ada:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005ade:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ae8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005aec:	460b      	mov	r3, r1
 8005aee:	4313      	orrs	r3, r2
 8005af0:	d056      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005af8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005afc:	d033      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005afe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b02:	d82c      	bhi.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b04:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b08:	d02f      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005b0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b0e:	d826      	bhi.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b14:	d02b      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005b16:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b1a:	d820      	bhi.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b20:	d012      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005b22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b26:	d81a      	bhi.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d022      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b30:	d115      	bne.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b36:	3308      	adds	r3, #8
 8005b38:	2101      	movs	r1, #1
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f001 fa0e 	bl	8006f5c <RCCEx_PLL2_Config>
 8005b40:	4603      	mov	r3, r0
 8005b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b46:	e015      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b4c:	3328      	adds	r3, #40	@ 0x28
 8005b4e:	2101      	movs	r1, #1
 8005b50:	4618      	mov	r0, r3
 8005b52:	f001 fab5 	bl	80070c0 <RCCEx_PLL3_Config>
 8005b56:	4603      	mov	r3, r0
 8005b58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b5c:	e00a      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b64:	e006      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b66:	bf00      	nop
 8005b68:	e004      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b6a:	bf00      	nop
 8005b6c:	e002      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b6e:	bf00      	nop
 8005b70:	e000      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10d      	bne.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005b7c:	4b05      	ldr	r3, [pc, #20]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b80:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b8a:	4a02      	ldr	r2, [pc, #8]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b8c:	430b      	orrs	r3, r1
 8005b8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b90:	e006      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005b92:	bf00      	nop
 8005b94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005bac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005bb6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005bba:	460b      	mov	r3, r1
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	d055      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005bc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bcc:	d033      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005bce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bd2:	d82c      	bhi.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bd8:	d02f      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bde:	d826      	bhi.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005be0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005be4:	d02b      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005be6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005bea:	d820      	bhi.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005bec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bf0:	d012      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005bf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bf6:	d81a      	bhi.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d022      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005bfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c00:	d115      	bne.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c06:	3308      	adds	r3, #8
 8005c08:	2101      	movs	r1, #1
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f001 f9a6 	bl	8006f5c <RCCEx_PLL2_Config>
 8005c10:	4603      	mov	r3, r0
 8005c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c16:	e015      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c1c:	3328      	adds	r3, #40	@ 0x28
 8005c1e:	2101      	movs	r1, #1
 8005c20:	4618      	mov	r0, r3
 8005c22:	f001 fa4d 	bl	80070c0 <RCCEx_PLL3_Config>
 8005c26:	4603      	mov	r3, r0
 8005c28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c2c:	e00a      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c34:	e006      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c36:	bf00      	nop
 8005c38:	e004      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c3a:	bf00      	nop
 8005c3c:	e002      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c3e:	bf00      	nop
 8005c40:	e000      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10b      	bne.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005c4c:	4ba3      	ldr	r3, [pc, #652]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c50:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c5c:	4a9f      	ldr	r2, [pc, #636]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c5e:	430b      	orrs	r3, r1
 8005c60:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c62:	e003      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c74:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005c78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005c82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c86:	460b      	mov	r3, r1
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	d037      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c96:	d00e      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005c98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c9c:	d816      	bhi.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d018      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005ca2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ca6:	d111      	bne.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ca8:	4b8c      	ldr	r3, [pc, #560]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cac:	4a8b      	ldr	r2, [pc, #556]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005cb4:	e00f      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cba:	3308      	adds	r3, #8
 8005cbc:	2101      	movs	r1, #1
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f001 f94c 	bl	8006f5c <RCCEx_PLL2_Config>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005cca:	e004      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cd2:	e000      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005cd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10a      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005cde:	4b7f      	ldr	r3, [pc, #508]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ce0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ce2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cec:	4a7b      	ldr	r2, [pc, #492]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cee:	430b      	orrs	r3, r1
 8005cf0:	6513      	str	r3, [r2, #80]	@ 0x50
 8005cf2:	e003      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cf8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d04:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005d08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005d12:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005d16:	460b      	mov	r3, r1
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	d039      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d22:	2b03      	cmp	r3, #3
 8005d24:	d81c      	bhi.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005d26:	a201      	add	r2, pc, #4	@ (adr r2, 8005d2c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2c:	08005d69 	.word	0x08005d69
 8005d30:	08005d3d 	.word	0x08005d3d
 8005d34:	08005d4b 	.word	0x08005d4b
 8005d38:	08005d69 	.word	0x08005d69
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d3c:	4b67      	ldr	r3, [pc, #412]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d40:	4a66      	ldr	r2, [pc, #408]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005d48:	e00f      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d4e:	3308      	adds	r3, #8
 8005d50:	2102      	movs	r1, #2
 8005d52:	4618      	mov	r0, r3
 8005d54:	f001 f902 	bl	8006f5c <RCCEx_PLL2_Config>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005d5e:	e004      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d66:	e000      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005d68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10a      	bne.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005d72:	4b5a      	ldr	r3, [pc, #360]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d76:	f023 0103 	bic.w	r1, r3, #3
 8005d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d80:	4a56      	ldr	r2, [pc, #344]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d82:	430b      	orrs	r3, r1
 8005d84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005d86:	e003      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d98:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005d9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005da0:	2300      	movs	r3, #0
 8005da2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005da6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005daa:	460b      	mov	r3, r1
 8005dac:	4313      	orrs	r3, r2
 8005dae:	f000 809f 	beq.w	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005db2:	4b4b      	ldr	r3, [pc, #300]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a4a      	ldr	r2, [pc, #296]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dbc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005dbe:	f7fb fc43 	bl	8001648 <HAL_GetTick>
 8005dc2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dc6:	e00b      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dc8:	f7fb fc3e 	bl	8001648 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	2b64      	cmp	r3, #100	@ 0x64
 8005dd6:	d903      	bls.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dde:	e005      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005de0:	4b3f      	ldr	r3, [pc, #252]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d0ed      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d179      	bne.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005df4:	4b39      	ldr	r3, [pc, #228]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005df6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e00:	4053      	eors	r3, r2
 8005e02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d015      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e0a:	4b34      	ldr	r3, [pc, #208]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e12:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e16:	4b31      	ldr	r3, [pc, #196]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e1a:	4a30      	ldr	r2, [pc, #192]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e20:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e22:	4b2e      	ldr	r3, [pc, #184]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e26:	4a2d      	ldr	r2, [pc, #180]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e2c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e2e:	4a2b      	ldr	r2, [pc, #172]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e34:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e42:	d118      	bne.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e44:	f7fb fc00 	bl	8001648 <HAL_GetTick>
 8005e48:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e4c:	e00d      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e4e:	f7fb fbfb 	bl	8001648 <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005e58:	1ad2      	subs	r2, r2, r3
 8005e5a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d903      	bls.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005e68:	e005      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d0eb      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005e76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d129      	bne.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e8e:	d10e      	bne.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005e90:	4b12      	ldr	r3, [pc, #72]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ea0:	091a      	lsrs	r2, r3, #4
 8005ea2:	4b10      	ldr	r3, [pc, #64]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	4a0d      	ldr	r2, [pc, #52]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ea8:	430b      	orrs	r3, r1
 8005eaa:	6113      	str	r3, [r2, #16]
 8005eac:	e005      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005eae:	4b0b      	ldr	r3, [pc, #44]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eb4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005eb8:	6113      	str	r3, [r2, #16]
 8005eba:	4b08      	ldr	r3, [pc, #32]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ebc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eca:	4a04      	ldr	r2, [pc, #16]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ecc:	430b      	orrs	r3, r1
 8005ece:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ed0:	e00e      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ed6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005eda:	e009      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005edc:	58024400 	.word	0x58024400
 8005ee0:	58024800 	.word	0x58024800
 8005ee4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef8:	f002 0301 	and.w	r3, r2, #1
 8005efc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f00:	2300      	movs	r3, #0
 8005f02:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f06:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	f000 8089 	beq.w	8006024 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f18:	2b28      	cmp	r3, #40	@ 0x28
 8005f1a:	d86b      	bhi.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f22:	bf00      	nop
 8005f24:	08005ffd 	.word	0x08005ffd
 8005f28:	08005ff5 	.word	0x08005ff5
 8005f2c:	08005ff5 	.word	0x08005ff5
 8005f30:	08005ff5 	.word	0x08005ff5
 8005f34:	08005ff5 	.word	0x08005ff5
 8005f38:	08005ff5 	.word	0x08005ff5
 8005f3c:	08005ff5 	.word	0x08005ff5
 8005f40:	08005ff5 	.word	0x08005ff5
 8005f44:	08005fc9 	.word	0x08005fc9
 8005f48:	08005ff5 	.word	0x08005ff5
 8005f4c:	08005ff5 	.word	0x08005ff5
 8005f50:	08005ff5 	.word	0x08005ff5
 8005f54:	08005ff5 	.word	0x08005ff5
 8005f58:	08005ff5 	.word	0x08005ff5
 8005f5c:	08005ff5 	.word	0x08005ff5
 8005f60:	08005ff5 	.word	0x08005ff5
 8005f64:	08005fdf 	.word	0x08005fdf
 8005f68:	08005ff5 	.word	0x08005ff5
 8005f6c:	08005ff5 	.word	0x08005ff5
 8005f70:	08005ff5 	.word	0x08005ff5
 8005f74:	08005ff5 	.word	0x08005ff5
 8005f78:	08005ff5 	.word	0x08005ff5
 8005f7c:	08005ff5 	.word	0x08005ff5
 8005f80:	08005ff5 	.word	0x08005ff5
 8005f84:	08005ffd 	.word	0x08005ffd
 8005f88:	08005ff5 	.word	0x08005ff5
 8005f8c:	08005ff5 	.word	0x08005ff5
 8005f90:	08005ff5 	.word	0x08005ff5
 8005f94:	08005ff5 	.word	0x08005ff5
 8005f98:	08005ff5 	.word	0x08005ff5
 8005f9c:	08005ff5 	.word	0x08005ff5
 8005fa0:	08005ff5 	.word	0x08005ff5
 8005fa4:	08005ffd 	.word	0x08005ffd
 8005fa8:	08005ff5 	.word	0x08005ff5
 8005fac:	08005ff5 	.word	0x08005ff5
 8005fb0:	08005ff5 	.word	0x08005ff5
 8005fb4:	08005ff5 	.word	0x08005ff5
 8005fb8:	08005ff5 	.word	0x08005ff5
 8005fbc:	08005ff5 	.word	0x08005ff5
 8005fc0:	08005ff5 	.word	0x08005ff5
 8005fc4:	08005ffd 	.word	0x08005ffd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fcc:	3308      	adds	r3, #8
 8005fce:	2101      	movs	r1, #1
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 ffc3 	bl	8006f5c <RCCEx_PLL2_Config>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005fdc:	e00f      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe2:	3328      	adds	r3, #40	@ 0x28
 8005fe4:	2101      	movs	r1, #1
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f001 f86a 	bl	80070c0 <RCCEx_PLL3_Config>
 8005fec:	4603      	mov	r3, r0
 8005fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005ff2:	e004      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ffa:	e000      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10a      	bne.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006006:	4bbf      	ldr	r3, [pc, #764]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800600a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800600e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006012:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006014:	4abb      	ldr	r2, [pc, #748]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006016:	430b      	orrs	r3, r1
 8006018:	6553      	str	r3, [r2, #84]	@ 0x54
 800601a:	e003      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800601c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006020:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602c:	f002 0302 	and.w	r3, r2, #2
 8006030:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006034:	2300      	movs	r3, #0
 8006036:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800603a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800603e:	460b      	mov	r3, r1
 8006040:	4313      	orrs	r3, r2
 8006042:	d041      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006048:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800604a:	2b05      	cmp	r3, #5
 800604c:	d824      	bhi.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800604e:	a201      	add	r2, pc, #4	@ (adr r2, 8006054 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006054:	080060a1 	.word	0x080060a1
 8006058:	0800606d 	.word	0x0800606d
 800605c:	08006083 	.word	0x08006083
 8006060:	080060a1 	.word	0x080060a1
 8006064:	080060a1 	.word	0x080060a1
 8006068:	080060a1 	.word	0x080060a1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800606c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006070:	3308      	adds	r3, #8
 8006072:	2101      	movs	r1, #1
 8006074:	4618      	mov	r0, r3
 8006076:	f000 ff71 	bl	8006f5c <RCCEx_PLL2_Config>
 800607a:	4603      	mov	r3, r0
 800607c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006080:	e00f      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006086:	3328      	adds	r3, #40	@ 0x28
 8006088:	2101      	movs	r1, #1
 800608a:	4618      	mov	r0, r3
 800608c:	f001 f818 	bl	80070c0 <RCCEx_PLL3_Config>
 8006090:	4603      	mov	r3, r0
 8006092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006096:	e004      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800609e:	e000      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80060a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10a      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80060aa:	4b96      	ldr	r3, [pc, #600]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ae:	f023 0107 	bic.w	r1, r3, #7
 80060b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060b8:	4a92      	ldr	r2, [pc, #584]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060ba:	430b      	orrs	r3, r1
 80060bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80060be:	e003      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d0:	f002 0304 	and.w	r3, r2, #4
 80060d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060d8:	2300      	movs	r3, #0
 80060da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060de:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80060e2:	460b      	mov	r3, r1
 80060e4:	4313      	orrs	r3, r2
 80060e6:	d044      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80060e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060f0:	2b05      	cmp	r3, #5
 80060f2:	d825      	bhi.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80060f4:	a201      	add	r2, pc, #4	@ (adr r2, 80060fc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80060f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fa:	bf00      	nop
 80060fc:	08006149 	.word	0x08006149
 8006100:	08006115 	.word	0x08006115
 8006104:	0800612b 	.word	0x0800612b
 8006108:	08006149 	.word	0x08006149
 800610c:	08006149 	.word	0x08006149
 8006110:	08006149 	.word	0x08006149
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006118:	3308      	adds	r3, #8
 800611a:	2101      	movs	r1, #1
 800611c:	4618      	mov	r0, r3
 800611e:	f000 ff1d 	bl	8006f5c <RCCEx_PLL2_Config>
 8006122:	4603      	mov	r3, r0
 8006124:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006128:	e00f      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800612a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800612e:	3328      	adds	r3, #40	@ 0x28
 8006130:	2101      	movs	r1, #1
 8006132:	4618      	mov	r0, r3
 8006134:	f000 ffc4 	bl	80070c0 <RCCEx_PLL3_Config>
 8006138:	4603      	mov	r3, r0
 800613a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800613e:	e004      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006146:	e000      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006148:	bf00      	nop
    }

    if (ret == HAL_OK)
 800614a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10b      	bne.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006152:	4b6c      	ldr	r3, [pc, #432]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006156:	f023 0107 	bic.w	r1, r3, #7
 800615a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800615e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006162:	4a68      	ldr	r2, [pc, #416]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006164:	430b      	orrs	r3, r1
 8006166:	6593      	str	r3, [r2, #88]	@ 0x58
 8006168:	e003      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800616a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800616e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617a:	f002 0320 	and.w	r3, r2, #32
 800617e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006182:	2300      	movs	r3, #0
 8006184:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006188:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800618c:	460b      	mov	r3, r1
 800618e:	4313      	orrs	r3, r2
 8006190:	d055      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800619a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800619e:	d033      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80061a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061a4:	d82c      	bhi.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061aa:	d02f      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80061ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061b0:	d826      	bhi.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061b6:	d02b      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80061b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061bc:	d820      	bhi.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061c2:	d012      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80061c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061c8:	d81a      	bhi.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d022      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80061ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061d2:	d115      	bne.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061d8:	3308      	adds	r3, #8
 80061da:	2100      	movs	r1, #0
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 febd 	bl	8006f5c <RCCEx_PLL2_Config>
 80061e2:	4603      	mov	r3, r0
 80061e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80061e8:	e015      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ee:	3328      	adds	r3, #40	@ 0x28
 80061f0:	2102      	movs	r1, #2
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 ff64 	bl	80070c0 <RCCEx_PLL3_Config>
 80061f8:	4603      	mov	r3, r0
 80061fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80061fe:	e00a      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006206:	e006      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006208:	bf00      	nop
 800620a:	e004      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800620c:	bf00      	nop
 800620e:	e002      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006210:	bf00      	nop
 8006212:	e000      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006216:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10b      	bne.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800621e:	4b39      	ldr	r3, [pc, #228]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006222:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800622a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800622e:	4a35      	ldr	r2, [pc, #212]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006230:	430b      	orrs	r3, r1
 8006232:	6553      	str	r3, [r2, #84]	@ 0x54
 8006234:	e003      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006236:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800623a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800623e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800624a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800624e:	2300      	movs	r3, #0
 8006250:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006254:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006258:	460b      	mov	r3, r1
 800625a:	4313      	orrs	r3, r2
 800625c:	d058      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800625e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006262:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006266:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800626a:	d033      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800626c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006270:	d82c      	bhi.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006272:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006276:	d02f      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006278:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800627c:	d826      	bhi.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800627e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006282:	d02b      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006284:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006288:	d820      	bhi.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800628a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800628e:	d012      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006290:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006294:	d81a      	bhi.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006296:	2b00      	cmp	r3, #0
 8006298:	d022      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800629a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800629e:	d115      	bne.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a4:	3308      	adds	r3, #8
 80062a6:	2100      	movs	r1, #0
 80062a8:	4618      	mov	r0, r3
 80062aa:	f000 fe57 	bl	8006f5c <RCCEx_PLL2_Config>
 80062ae:	4603      	mov	r3, r0
 80062b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80062b4:	e015      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ba:	3328      	adds	r3, #40	@ 0x28
 80062bc:	2102      	movs	r1, #2
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 fefe 	bl	80070c0 <RCCEx_PLL3_Config>
 80062c4:	4603      	mov	r3, r0
 80062c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80062ca:	e00a      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062d2:	e006      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80062d4:	bf00      	nop
 80062d6:	e004      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80062d8:	bf00      	nop
 80062da:	e002      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80062dc:	bf00      	nop
 80062de:	e000      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80062e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10e      	bne.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80062ea:	4b06      	ldr	r3, [pc, #24]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80062f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062fa:	4a02      	ldr	r2, [pc, #8]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062fc:	430b      	orrs	r3, r1
 80062fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8006300:	e006      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006302:	bf00      	nop
 8006304:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006308:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800630c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006318:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800631c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006320:	2300      	movs	r3, #0
 8006322:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006326:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800632a:	460b      	mov	r3, r1
 800632c:	4313      	orrs	r3, r2
 800632e:	d055      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006334:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006338:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800633c:	d033      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800633e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006342:	d82c      	bhi.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006344:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006348:	d02f      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800634a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800634e:	d826      	bhi.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006350:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006354:	d02b      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006356:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800635a:	d820      	bhi.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800635c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006360:	d012      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006362:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006366:	d81a      	bhi.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006368:	2b00      	cmp	r3, #0
 800636a:	d022      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800636c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006370:	d115      	bne.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006376:	3308      	adds	r3, #8
 8006378:	2100      	movs	r1, #0
 800637a:	4618      	mov	r0, r3
 800637c:	f000 fdee 	bl	8006f5c <RCCEx_PLL2_Config>
 8006380:	4603      	mov	r3, r0
 8006382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006386:	e015      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800638c:	3328      	adds	r3, #40	@ 0x28
 800638e:	2102      	movs	r1, #2
 8006390:	4618      	mov	r0, r3
 8006392:	f000 fe95 	bl	80070c0 <RCCEx_PLL3_Config>
 8006396:	4603      	mov	r3, r0
 8006398:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800639c:	e00a      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063a4:	e006      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063a6:	bf00      	nop
 80063a8:	e004      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063aa:	bf00      	nop
 80063ac:	e002      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063ae:	bf00      	nop
 80063b0:	e000      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10b      	bne.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80063bc:	4ba1      	ldr	r3, [pc, #644]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063c0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80063c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80063cc:	4a9d      	ldr	r2, [pc, #628]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063ce:	430b      	orrs	r3, r1
 80063d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80063d2:	e003      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80063dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e4:	f002 0308 	and.w	r3, r2, #8
 80063e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063ec:	2300      	movs	r3, #0
 80063ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80063f2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80063f6:	460b      	mov	r3, r1
 80063f8:	4313      	orrs	r3, r2
 80063fa:	d01e      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80063fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006400:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006404:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006408:	d10c      	bne.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800640a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800640e:	3328      	adds	r3, #40	@ 0x28
 8006410:	2102      	movs	r1, #2
 8006412:	4618      	mov	r0, r3
 8006414:	f000 fe54 	bl	80070c0 <RCCEx_PLL3_Config>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d002      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006424:	4b87      	ldr	r3, [pc, #540]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006428:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800642c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006430:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006434:	4a83      	ldr	r2, [pc, #524]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006436:	430b      	orrs	r3, r1
 8006438:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800643a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800643e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006442:	f002 0310 	and.w	r3, r2, #16
 8006446:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800644a:	2300      	movs	r3, #0
 800644c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006450:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006454:	460b      	mov	r3, r1
 8006456:	4313      	orrs	r3, r2
 8006458:	d01e      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800645a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800645e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006462:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006466:	d10c      	bne.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800646c:	3328      	adds	r3, #40	@ 0x28
 800646e:	2102      	movs	r1, #2
 8006470:	4618      	mov	r0, r3
 8006472:	f000 fe25 	bl	80070c0 <RCCEx_PLL3_Config>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006482:	4b70      	ldr	r3, [pc, #448]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006486:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800648a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006492:	4a6c      	ldr	r2, [pc, #432]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006494:	430b      	orrs	r3, r1
 8006496:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800649c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80064a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064a8:	2300      	movs	r3, #0
 80064aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064ae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80064b2:	460b      	mov	r3, r1
 80064b4:	4313      	orrs	r3, r2
 80064b6:	d03e      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80064b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80064c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064c4:	d022      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80064c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064ca:	d81b      	bhi.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d003      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80064d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064d4:	d00b      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80064d6:	e015      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064dc:	3308      	adds	r3, #8
 80064de:	2100      	movs	r1, #0
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 fd3b 	bl	8006f5c <RCCEx_PLL2_Config>
 80064e6:	4603      	mov	r3, r0
 80064e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80064ec:	e00f      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f2:	3328      	adds	r3, #40	@ 0x28
 80064f4:	2102      	movs	r1, #2
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 fde2 	bl	80070c0 <RCCEx_PLL3_Config>
 80064fc:	4603      	mov	r3, r0
 80064fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006502:	e004      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800650a:	e000      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800650c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800650e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10b      	bne.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006516:	4b4b      	ldr	r3, [pc, #300]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800651a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800651e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006522:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006526:	4a47      	ldr	r2, [pc, #284]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006528:	430b      	orrs	r3, r1
 800652a:	6593      	str	r3, [r2, #88]	@ 0x58
 800652c:	e003      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006532:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800653a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006542:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006544:	2300      	movs	r3, #0
 8006546:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006548:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800654c:	460b      	mov	r3, r1
 800654e:	4313      	orrs	r3, r2
 8006550:	d03b      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800655a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800655e:	d01f      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006560:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006564:	d818      	bhi.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006566:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800656a:	d003      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800656c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006570:	d007      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006572:	e011      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006574:	4b33      	ldr	r3, [pc, #204]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006578:	4a32      	ldr	r2, [pc, #200]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800657a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800657e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006580:	e00f      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006586:	3328      	adds	r3, #40	@ 0x28
 8006588:	2101      	movs	r1, #1
 800658a:	4618      	mov	r0, r3
 800658c:	f000 fd98 	bl	80070c0 <RCCEx_PLL3_Config>
 8006590:	4603      	mov	r3, r0
 8006592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006596:	e004      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800659e:	e000      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80065a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10b      	bne.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065aa:	4b26      	ldr	r3, [pc, #152]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80065b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ba:	4a22      	ldr	r2, [pc, #136]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065bc:	430b      	orrs	r3, r1
 80065be:	6553      	str	r3, [r2, #84]	@ 0x54
 80065c0:	e003      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80065ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80065d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80065d8:	2300      	movs	r3, #0
 80065da:	677b      	str	r3, [r7, #116]	@ 0x74
 80065dc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80065e0:	460b      	mov	r3, r1
 80065e2:	4313      	orrs	r3, r2
 80065e4:	d034      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80065e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d003      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80065f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065f4:	d007      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80065f6:	e011      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065f8:	4b12      	ldr	r3, [pc, #72]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065fc:	4a11      	ldr	r2, [pc, #68]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006602:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006604:	e00e      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800660a:	3308      	adds	r3, #8
 800660c:	2102      	movs	r1, #2
 800660e:	4618      	mov	r0, r3
 8006610:	f000 fca4 	bl	8006f5c <RCCEx_PLL2_Config>
 8006614:	4603      	mov	r3, r0
 8006616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800661a:	e003      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006622:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006624:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10d      	bne.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800662c:	4b05      	ldr	r3, [pc, #20]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800662e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006630:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800663a:	4a02      	ldr	r2, [pc, #8]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800663c:	430b      	orrs	r3, r1
 800663e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006640:	e006      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006642:	bf00      	nop
 8006644:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006648:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800664c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006658:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800665c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800665e:	2300      	movs	r3, #0
 8006660:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006662:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006666:	460b      	mov	r3, r1
 8006668:	4313      	orrs	r3, r2
 800666a:	d00c      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800666c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006670:	3328      	adds	r3, #40	@ 0x28
 8006672:	2102      	movs	r1, #2
 8006674:	4618      	mov	r0, r3
 8006676:	f000 fd23 	bl	80070c0 <RCCEx_PLL3_Config>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d002      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800668a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006692:	663b      	str	r3, [r7, #96]	@ 0x60
 8006694:	2300      	movs	r3, #0
 8006696:	667b      	str	r3, [r7, #100]	@ 0x64
 8006698:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800669c:	460b      	mov	r3, r1
 800669e:	4313      	orrs	r3, r2
 80066a0:	d038      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80066a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066ae:	d018      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80066b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066b4:	d811      	bhi.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80066b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066ba:	d014      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80066bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066c0:	d80b      	bhi.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d011      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80066c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066ca:	d106      	bne.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066cc:	4bc3      	ldr	r3, [pc, #780]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d0:	4ac2      	ldr	r2, [pc, #776]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80066d8:	e008      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066e0:	e004      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80066e2:	bf00      	nop
 80066e4:	e002      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80066e6:	bf00      	nop
 80066e8:	e000      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80066ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10b      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066f4:	4bb9      	ldr	r3, [pc, #740]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066f8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80066fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006700:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006704:	4ab5      	ldr	r2, [pc, #724]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006706:	430b      	orrs	r3, r1
 8006708:	6553      	str	r3, [r2, #84]	@ 0x54
 800670a:	e003      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006710:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006720:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006722:	2300      	movs	r3, #0
 8006724:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006726:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800672a:	460b      	mov	r3, r1
 800672c:	4313      	orrs	r3, r2
 800672e:	d009      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006730:	4baa      	ldr	r3, [pc, #680]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006734:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800673c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800673e:	4aa7      	ldr	r2, [pc, #668]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006740:	430b      	orrs	r3, r1
 8006742:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006750:	653b      	str	r3, [r7, #80]	@ 0x50
 8006752:	2300      	movs	r3, #0
 8006754:	657b      	str	r3, [r7, #84]	@ 0x54
 8006756:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800675a:	460b      	mov	r3, r1
 800675c:	4313      	orrs	r3, r2
 800675e:	d00a      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006760:	4b9e      	ldr	r3, [pc, #632]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800676c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006770:	4a9a      	ldr	r2, [pc, #616]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006772:	430b      	orrs	r3, r1
 8006774:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800677a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006782:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006784:	2300      	movs	r3, #0
 8006786:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006788:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800678c:	460b      	mov	r3, r1
 800678e:	4313      	orrs	r3, r2
 8006790:	d009      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006792:	4b92      	ldr	r3, [pc, #584]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006794:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006796:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800679a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800679e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067a0:	4a8e      	ldr	r2, [pc, #568]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067a2:	430b      	orrs	r3, r1
 80067a4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80067a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80067b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80067b4:	2300      	movs	r3, #0
 80067b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80067b8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80067bc:	460b      	mov	r3, r1
 80067be:	4313      	orrs	r3, r2
 80067c0:	d00e      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80067c2:	4b86      	ldr	r3, [pc, #536]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	4a85      	ldr	r2, [pc, #532]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067c8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80067cc:	6113      	str	r3, [r2, #16]
 80067ce:	4b83      	ldr	r3, [pc, #524]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067d0:	6919      	ldr	r1, [r3, #16]
 80067d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80067da:	4a80      	ldr	r2, [pc, #512]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067dc:	430b      	orrs	r3, r1
 80067de:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80067e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80067ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067ee:	2300      	movs	r3, #0
 80067f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067f2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80067f6:	460b      	mov	r3, r1
 80067f8:	4313      	orrs	r3, r2
 80067fa:	d009      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80067fc:	4b77      	ldr	r3, [pc, #476]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006800:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800680a:	4a74      	ldr	r2, [pc, #464]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800680c:	430b      	orrs	r3, r1
 800680e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006818:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800681c:	633b      	str	r3, [r7, #48]	@ 0x30
 800681e:	2300      	movs	r3, #0
 8006820:	637b      	str	r3, [r7, #52]	@ 0x34
 8006822:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006826:	460b      	mov	r3, r1
 8006828:	4313      	orrs	r3, r2
 800682a:	d00a      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800682c:	4b6b      	ldr	r3, [pc, #428]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800682e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006830:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006838:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800683c:	4a67      	ldr	r2, [pc, #412]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800683e:	430b      	orrs	r3, r1
 8006840:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684a:	2100      	movs	r1, #0
 800684c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006854:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006858:	460b      	mov	r3, r1
 800685a:	4313      	orrs	r3, r2
 800685c:	d011      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800685e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006862:	3308      	adds	r3, #8
 8006864:	2100      	movs	r1, #0
 8006866:	4618      	mov	r0, r3
 8006868:	f000 fb78 	bl	8006f5c <RCCEx_PLL2_Config>
 800686c:	4603      	mov	r3, r0
 800686e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006872:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800687a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800687e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688a:	2100      	movs	r1, #0
 800688c:	6239      	str	r1, [r7, #32]
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	627b      	str	r3, [r7, #36]	@ 0x24
 8006894:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006898:	460b      	mov	r3, r1
 800689a:	4313      	orrs	r3, r2
 800689c:	d011      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800689e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a2:	3308      	adds	r3, #8
 80068a4:	2101      	movs	r1, #1
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 fb58 	bl	8006f5c <RCCEx_PLL2_Config>
 80068ac:	4603      	mov	r3, r0
 80068ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80068b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80068c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ca:	2100      	movs	r1, #0
 80068cc:	61b9      	str	r1, [r7, #24]
 80068ce:	f003 0304 	and.w	r3, r3, #4
 80068d2:	61fb      	str	r3, [r7, #28]
 80068d4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80068d8:	460b      	mov	r3, r1
 80068da:	4313      	orrs	r3, r2
 80068dc:	d011      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e2:	3308      	adds	r3, #8
 80068e4:	2102      	movs	r1, #2
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 fb38 	bl	8006f5c <RCCEx_PLL2_Config>
 80068ec:	4603      	mov	r3, r0
 80068ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80068f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690a:	2100      	movs	r1, #0
 800690c:	6139      	str	r1, [r7, #16]
 800690e:	f003 0308 	and.w	r3, r3, #8
 8006912:	617b      	str	r3, [r7, #20]
 8006914:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006918:	460b      	mov	r3, r1
 800691a:	4313      	orrs	r3, r2
 800691c:	d011      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800691e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006922:	3328      	adds	r3, #40	@ 0x28
 8006924:	2100      	movs	r1, #0
 8006926:	4618      	mov	r0, r3
 8006928:	f000 fbca 	bl	80070c0 <RCCEx_PLL3_Config>
 800692c:	4603      	mov	r3, r0
 800692e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006932:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800693a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800693e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694a:	2100      	movs	r1, #0
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	f003 0310 	and.w	r3, r3, #16
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006958:	460b      	mov	r3, r1
 800695a:	4313      	orrs	r3, r2
 800695c:	d011      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800695e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006962:	3328      	adds	r3, #40	@ 0x28
 8006964:	2101      	movs	r1, #1
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fbaa 	bl	80070c0 <RCCEx_PLL3_Config>
 800696c:	4603      	mov	r3, r0
 800696e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006972:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800697a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800697e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698a:	2100      	movs	r1, #0
 800698c:	6039      	str	r1, [r7, #0]
 800698e:	f003 0320 	and.w	r3, r3, #32
 8006992:	607b      	str	r3, [r7, #4]
 8006994:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006998:	460b      	mov	r3, r1
 800699a:	4313      	orrs	r3, r2
 800699c:	d011      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800699e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a2:	3328      	adds	r3, #40	@ 0x28
 80069a4:	2102      	movs	r1, #2
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fb8a 	bl	80070c0 <RCCEx_PLL3_Config>
 80069ac:	4603      	mov	r3, r0
 80069ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80069b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80069c2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	e000      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80069d6:	46bd      	mov	sp, r7
 80069d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069dc:	58024400 	.word	0x58024400

080069e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80069e4:	f7fe fd96 	bl	8005514 <HAL_RCC_GetHCLKFreq>
 80069e8:	4602      	mov	r2, r0
 80069ea:	4b06      	ldr	r3, [pc, #24]	@ (8006a04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	091b      	lsrs	r3, r3, #4
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	4904      	ldr	r1, [pc, #16]	@ (8006a08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80069f6:	5ccb      	ldrb	r3, [r1, r3]
 80069f8:	f003 031f 	and.w	r3, r3, #31
 80069fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	58024400 	.word	0x58024400
 8006a08:	0800a594 	.word	0x0800a594

08006a0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b089      	sub	sp, #36	@ 0x24
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a14:	4ba1      	ldr	r3, [pc, #644]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a18:	f003 0303 	and.w	r3, r3, #3
 8006a1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006a1e:	4b9f      	ldr	r3, [pc, #636]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a22:	0b1b      	lsrs	r3, r3, #12
 8006a24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a28:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006a2a:	4b9c      	ldr	r3, [pc, #624]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2e:	091b      	lsrs	r3, r3, #4
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006a36:	4b99      	ldr	r3, [pc, #612]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a3a:	08db      	lsrs	r3, r3, #3
 8006a3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	fb02 f303 	mul.w	r3, r2, r3
 8006a46:	ee07 3a90 	vmov	s15, r3
 8006a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 8111 	beq.w	8006c7c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	f000 8083 	beq.w	8006b68 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	f200 80a1 	bhi.w	8006bac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d003      	beq.n	8006a78 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d056      	beq.n	8006b24 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006a76:	e099      	b.n	8006bac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a78:	4b88      	ldr	r3, [pc, #544]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0320 	and.w	r3, r3, #32
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d02d      	beq.n	8006ae0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a84:	4b85      	ldr	r3, [pc, #532]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	08db      	lsrs	r3, r3, #3
 8006a8a:	f003 0303 	and.w	r3, r3, #3
 8006a8e:	4a84      	ldr	r2, [pc, #528]	@ (8006ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006a90:	fa22 f303 	lsr.w	r3, r2, r3
 8006a94:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	ee07 3a90 	vmov	s15, r3
 8006a9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	ee07 3a90 	vmov	s15, r3
 8006aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aae:	4b7b      	ldr	r3, [pc, #492]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab6:	ee07 3a90 	vmov	s15, r3
 8006aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006abe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ac2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ace:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ada:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006ade:	e087      	b.n	8006bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	ee07 3a90 	vmov	s15, r3
 8006ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006af2:	4b6a      	ldr	r3, [pc, #424]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006afa:	ee07 3a90 	vmov	s15, r3
 8006afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b06:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b22:	e065      	b.n	8006bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	ee07 3a90 	vmov	s15, r3
 8006b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b36:	4b59      	ldr	r3, [pc, #356]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b3e:	ee07 3a90 	vmov	s15, r3
 8006b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b4a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b66:	e043      	b.n	8006bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	ee07 3a90 	vmov	s15, r3
 8006b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b72:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b7a:	4b48      	ldr	r3, [pc, #288]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b82:	ee07 3a90 	vmov	s15, r3
 8006b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b8e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006baa:	e021      	b.n	8006bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	ee07 3a90 	vmov	s15, r3
 8006bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bbe:	4b37      	ldr	r3, [pc, #220]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc6:	ee07 3a90 	vmov	s15, r3
 8006bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bd2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bf4:	0a5b      	lsrs	r3, r3, #9
 8006bf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bfa:	ee07 3a90 	vmov	s15, r3
 8006bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c16:	ee17 2a90 	vmov	r2, s15
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c22:	0c1b      	lsrs	r3, r3, #16
 8006c24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c28:	ee07 3a90 	vmov	s15, r3
 8006c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c38:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c44:	ee17 2a90 	vmov	r2, s15
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006c4c:	4b13      	ldr	r3, [pc, #76]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c50:	0e1b      	lsrs	r3, r3, #24
 8006c52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c56:	ee07 3a90 	vmov	s15, r3
 8006c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c66:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c72:	ee17 2a90 	vmov	r2, s15
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006c7a:	e008      	b.n	8006c8e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	609a      	str	r2, [r3, #8]
}
 8006c8e:	bf00      	nop
 8006c90:	3724      	adds	r7, #36	@ 0x24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	58024400 	.word	0x58024400
 8006ca0:	03d09000 	.word	0x03d09000
 8006ca4:	46000000 	.word	0x46000000
 8006ca8:	4c742400 	.word	0x4c742400
 8006cac:	4a742400 	.word	0x4a742400
 8006cb0:	4af42400 	.word	0x4af42400

08006cb4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b089      	sub	sp, #36	@ 0x24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cbc:	4ba1      	ldr	r3, [pc, #644]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc0:	f003 0303 	and.w	r3, r3, #3
 8006cc4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006cc6:	4b9f      	ldr	r3, [pc, #636]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cca:	0d1b      	lsrs	r3, r3, #20
 8006ccc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cd0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006cd2:	4b9c      	ldr	r3, [pc, #624]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd6:	0a1b      	lsrs	r3, r3, #8
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006cde:	4b99      	ldr	r3, [pc, #612]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ce2:	08db      	lsrs	r3, r3, #3
 8006ce4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	fb02 f303 	mul.w	r3, r2, r3
 8006cee:	ee07 3a90 	vmov	s15, r3
 8006cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 8111 	beq.w	8006f24 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	f000 8083 	beq.w	8006e10 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	f200 80a1 	bhi.w	8006e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d003      	beq.n	8006d20 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d056      	beq.n	8006dcc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006d1e:	e099      	b.n	8006e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d20:	4b88      	ldr	r3, [pc, #544]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0320 	and.w	r3, r3, #32
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d02d      	beq.n	8006d88 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d2c:	4b85      	ldr	r3, [pc, #532]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	08db      	lsrs	r3, r3, #3
 8006d32:	f003 0303 	and.w	r3, r3, #3
 8006d36:	4a84      	ldr	r2, [pc, #528]	@ (8006f48 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006d38:	fa22 f303 	lsr.w	r3, r2, r3
 8006d3c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	ee07 3a90 	vmov	s15, r3
 8006d44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	ee07 3a90 	vmov	s15, r3
 8006d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d56:	4b7b      	ldr	r3, [pc, #492]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d5e:	ee07 3a90 	vmov	s15, r3
 8006d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d6a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d86:	e087      	b.n	8006e98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d92:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006f50 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d9a:	4b6a      	ldr	r3, [pc, #424]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006da2:	ee07 3a90 	vmov	s15, r3
 8006da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dca:	e065      	b.n	8006e98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	ee07 3a90 	vmov	s15, r3
 8006dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dd6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dde:	4b59      	ldr	r3, [pc, #356]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de6:	ee07 3a90 	vmov	s15, r3
 8006dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8006df2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e0e:	e043      	b.n	8006e98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	ee07 3a90 	vmov	s15, r3
 8006e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e22:	4b48      	ldr	r3, [pc, #288]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e2a:	ee07 3a90 	vmov	s15, r3
 8006e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e52:	e021      	b.n	8006e98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e66:	4b37      	ldr	r3, [pc, #220]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e96:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006e98:	4b2a      	ldr	r3, [pc, #168]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9c:	0a5b      	lsrs	r3, r3, #9
 8006e9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ea2:	ee07 3a90 	vmov	s15, r3
 8006ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006eae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ebe:	ee17 2a90 	vmov	r2, s15
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006ec6:	4b1f      	ldr	r3, [pc, #124]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eca:	0c1b      	lsrs	r3, r3, #16
 8006ecc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ed0:	ee07 3a90 	vmov	s15, r3
 8006ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006edc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ee0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eec:	ee17 2a90 	vmov	r2, s15
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006ef4:	4b13      	ldr	r3, [pc, #76]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef8:	0e1b      	lsrs	r3, r3, #24
 8006efa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006efe:	ee07 3a90 	vmov	s15, r3
 8006f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f1a:	ee17 2a90 	vmov	r2, s15
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006f22:	e008      	b.n	8006f36 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	609a      	str	r2, [r3, #8]
}
 8006f36:	bf00      	nop
 8006f38:	3724      	adds	r7, #36	@ 0x24
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	58024400 	.word	0x58024400
 8006f48:	03d09000 	.word	0x03d09000
 8006f4c:	46000000 	.word	0x46000000
 8006f50:	4c742400 	.word	0x4c742400
 8006f54:	4a742400 	.word	0x4a742400
 8006f58:	4af42400 	.word	0x4af42400

08006f5c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f6a:	4b53      	ldr	r3, [pc, #332]	@ (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8006f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f6e:	f003 0303 	and.w	r3, r3, #3
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	d101      	bne.n	8006f7a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e099      	b.n	80070ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006f7a:	4b4f      	ldr	r3, [pc, #316]	@ (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a4e      	ldr	r2, [pc, #312]	@ (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8006f80:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f86:	f7fa fb5f 	bl	8001648 <HAL_GetTick>
 8006f8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f8c:	e008      	b.n	8006fa0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f8e:	f7fa fb5b 	bl	8001648 <HAL_GetTick>
 8006f92:	4602      	mov	r2, r0
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d901      	bls.n	8006fa0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e086      	b.n	80070ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006fa0:	4b45      	ldr	r3, [pc, #276]	@ (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1f0      	bne.n	8006f8e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006fac:	4b42      	ldr	r3, [pc, #264]	@ (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8006fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	031b      	lsls	r3, r3, #12
 8006fba:	493f      	ldr	r1, [pc, #252]	@ (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	628b      	str	r3, [r1, #40]	@ 0x28
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	025b      	lsls	r3, r3, #9
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	431a      	orrs	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	041b      	lsls	r3, r3, #16
 8006fde:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	061b      	lsls	r3, r3, #24
 8006fec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006ff0:	4931      	ldr	r1, [pc, #196]	@ (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006ff6:	4b30      	ldr	r3, [pc, #192]	@ (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8006ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	492d      	ldr	r1, [pc, #180]	@ (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8007004:	4313      	orrs	r3, r2
 8007006:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007008:	4b2b      	ldr	r3, [pc, #172]	@ (80070b8 <RCCEx_PLL2_Config+0x15c>)
 800700a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700c:	f023 0220 	bic.w	r2, r3, #32
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	4928      	ldr	r1, [pc, #160]	@ (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8007016:	4313      	orrs	r3, r2
 8007018:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800701a:	4b27      	ldr	r3, [pc, #156]	@ (80070b8 <RCCEx_PLL2_Config+0x15c>)
 800701c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800701e:	4a26      	ldr	r2, [pc, #152]	@ (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8007020:	f023 0310 	bic.w	r3, r3, #16
 8007024:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007026:	4b24      	ldr	r3, [pc, #144]	@ (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8007028:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800702a:	4b24      	ldr	r3, [pc, #144]	@ (80070bc <RCCEx_PLL2_Config+0x160>)
 800702c:	4013      	ands	r3, r2
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	69d2      	ldr	r2, [r2, #28]
 8007032:	00d2      	lsls	r2, r2, #3
 8007034:	4920      	ldr	r1, [pc, #128]	@ (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8007036:	4313      	orrs	r3, r2
 8007038:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800703a:	4b1f      	ldr	r3, [pc, #124]	@ (80070b8 <RCCEx_PLL2_Config+0x15c>)
 800703c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800703e:	4a1e      	ldr	r2, [pc, #120]	@ (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8007040:	f043 0310 	orr.w	r3, r3, #16
 8007044:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d106      	bne.n	800705a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800704c:	4b1a      	ldr	r3, [pc, #104]	@ (80070b8 <RCCEx_PLL2_Config+0x15c>)
 800704e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007050:	4a19      	ldr	r2, [pc, #100]	@ (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8007052:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007056:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007058:	e00f      	b.n	800707a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d106      	bne.n	800706e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007060:	4b15      	ldr	r3, [pc, #84]	@ (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8007062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007064:	4a14      	ldr	r2, [pc, #80]	@ (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8007066:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800706a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800706c:	e005      	b.n	800707a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800706e:	4b12      	ldr	r3, [pc, #72]	@ (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8007070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007072:	4a11      	ldr	r2, [pc, #68]	@ (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8007074:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007078:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800707a:	4b0f      	ldr	r3, [pc, #60]	@ (80070b8 <RCCEx_PLL2_Config+0x15c>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a0e      	ldr	r2, [pc, #56]	@ (80070b8 <RCCEx_PLL2_Config+0x15c>)
 8007080:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007084:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007086:	f7fa fadf 	bl	8001648 <HAL_GetTick>
 800708a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800708c:	e008      	b.n	80070a0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800708e:	f7fa fadb 	bl	8001648 <HAL_GetTick>
 8007092:	4602      	mov	r2, r0
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	2b02      	cmp	r3, #2
 800709a:	d901      	bls.n	80070a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e006      	b.n	80070ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070a0:	4b05      	ldr	r3, [pc, #20]	@ (80070b8 <RCCEx_PLL2_Config+0x15c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d0f0      	beq.n	800708e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80070ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	58024400 	.word	0x58024400
 80070bc:	ffff0007 	.word	0xffff0007

080070c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80070ce:	4b53      	ldr	r3, [pc, #332]	@ (800721c <RCCEx_PLL3_Config+0x15c>)
 80070d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d2:	f003 0303 	and.w	r3, r3, #3
 80070d6:	2b03      	cmp	r3, #3
 80070d8:	d101      	bne.n	80070de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e099      	b.n	8007212 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80070de:	4b4f      	ldr	r3, [pc, #316]	@ (800721c <RCCEx_PLL3_Config+0x15c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a4e      	ldr	r2, [pc, #312]	@ (800721c <RCCEx_PLL3_Config+0x15c>)
 80070e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070ea:	f7fa faad 	bl	8001648 <HAL_GetTick>
 80070ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070f0:	e008      	b.n	8007104 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80070f2:	f7fa faa9 	bl	8001648 <HAL_GetTick>
 80070f6:	4602      	mov	r2, r0
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d901      	bls.n	8007104 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	e086      	b.n	8007212 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007104:	4b45      	ldr	r3, [pc, #276]	@ (800721c <RCCEx_PLL3_Config+0x15c>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1f0      	bne.n	80070f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007110:	4b42      	ldr	r3, [pc, #264]	@ (800721c <RCCEx_PLL3_Config+0x15c>)
 8007112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007114:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	051b      	lsls	r3, r3, #20
 800711e:	493f      	ldr	r1, [pc, #252]	@ (800721c <RCCEx_PLL3_Config+0x15c>)
 8007120:	4313      	orrs	r3, r2
 8007122:	628b      	str	r3, [r1, #40]	@ 0x28
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	3b01      	subs	r3, #1
 800712a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	3b01      	subs	r3, #1
 8007134:	025b      	lsls	r3, r3, #9
 8007136:	b29b      	uxth	r3, r3
 8007138:	431a      	orrs	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	3b01      	subs	r3, #1
 8007140:	041b      	lsls	r3, r3, #16
 8007142:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007146:	431a      	orrs	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	3b01      	subs	r3, #1
 800714e:	061b      	lsls	r3, r3, #24
 8007150:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007154:	4931      	ldr	r1, [pc, #196]	@ (800721c <RCCEx_PLL3_Config+0x15c>)
 8007156:	4313      	orrs	r3, r2
 8007158:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800715a:	4b30      	ldr	r3, [pc, #192]	@ (800721c <RCCEx_PLL3_Config+0x15c>)
 800715c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800715e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	492d      	ldr	r1, [pc, #180]	@ (800721c <RCCEx_PLL3_Config+0x15c>)
 8007168:	4313      	orrs	r3, r2
 800716a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800716c:	4b2b      	ldr	r3, [pc, #172]	@ (800721c <RCCEx_PLL3_Config+0x15c>)
 800716e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007170:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	4928      	ldr	r1, [pc, #160]	@ (800721c <RCCEx_PLL3_Config+0x15c>)
 800717a:	4313      	orrs	r3, r2
 800717c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800717e:	4b27      	ldr	r3, [pc, #156]	@ (800721c <RCCEx_PLL3_Config+0x15c>)
 8007180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007182:	4a26      	ldr	r2, [pc, #152]	@ (800721c <RCCEx_PLL3_Config+0x15c>)
 8007184:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007188:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800718a:	4b24      	ldr	r3, [pc, #144]	@ (800721c <RCCEx_PLL3_Config+0x15c>)
 800718c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800718e:	4b24      	ldr	r3, [pc, #144]	@ (8007220 <RCCEx_PLL3_Config+0x160>)
 8007190:	4013      	ands	r3, r2
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	69d2      	ldr	r2, [r2, #28]
 8007196:	00d2      	lsls	r2, r2, #3
 8007198:	4920      	ldr	r1, [pc, #128]	@ (800721c <RCCEx_PLL3_Config+0x15c>)
 800719a:	4313      	orrs	r3, r2
 800719c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800719e:	4b1f      	ldr	r3, [pc, #124]	@ (800721c <RCCEx_PLL3_Config+0x15c>)
 80071a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a2:	4a1e      	ldr	r2, [pc, #120]	@ (800721c <RCCEx_PLL3_Config+0x15c>)
 80071a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d106      	bne.n	80071be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80071b0:	4b1a      	ldr	r3, [pc, #104]	@ (800721c <RCCEx_PLL3_Config+0x15c>)
 80071b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b4:	4a19      	ldr	r2, [pc, #100]	@ (800721c <RCCEx_PLL3_Config+0x15c>)
 80071b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80071ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80071bc:	e00f      	b.n	80071de <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d106      	bne.n	80071d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80071c4:	4b15      	ldr	r3, [pc, #84]	@ (800721c <RCCEx_PLL3_Config+0x15c>)
 80071c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c8:	4a14      	ldr	r2, [pc, #80]	@ (800721c <RCCEx_PLL3_Config+0x15c>)
 80071ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80071ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80071d0:	e005      	b.n	80071de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80071d2:	4b12      	ldr	r3, [pc, #72]	@ (800721c <RCCEx_PLL3_Config+0x15c>)
 80071d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d6:	4a11      	ldr	r2, [pc, #68]	@ (800721c <RCCEx_PLL3_Config+0x15c>)
 80071d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80071dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80071de:	4b0f      	ldr	r3, [pc, #60]	@ (800721c <RCCEx_PLL3_Config+0x15c>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a0e      	ldr	r2, [pc, #56]	@ (800721c <RCCEx_PLL3_Config+0x15c>)
 80071e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071ea:	f7fa fa2d 	bl	8001648 <HAL_GetTick>
 80071ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071f0:	e008      	b.n	8007204 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80071f2:	f7fa fa29 	bl	8001648 <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d901      	bls.n	8007204 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	e006      	b.n	8007212 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007204:	4b05      	ldr	r3, [pc, #20]	@ (800721c <RCCEx_PLL3_Config+0x15c>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0f0      	beq.n	80071f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007210:	7bfb      	ldrb	r3, [r7, #15]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	58024400 	.word	0x58024400
 8007220:	ffff0007 	.word	0xffff0007

08007224 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e042      	b.n	80072bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800723c:	2b00      	cmp	r3, #0
 800723e:	d106      	bne.n	800724e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f7f9 ff65 	bl	8001118 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2224      	movs	r2, #36	@ 0x24
 8007252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f022 0201 	bic.w	r2, r2, #1
 8007264:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800726a:	2b00      	cmp	r3, #0
 800726c:	d002      	beq.n	8007274 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fe86 	bl	8007f80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f91b 	bl	80074b0 <UART_SetConfig>
 800727a:	4603      	mov	r3, r0
 800727c:	2b01      	cmp	r3, #1
 800727e:	d101      	bne.n	8007284 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e01b      	b.n	80072bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	685a      	ldr	r2, [r3, #4]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007292:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689a      	ldr	r2, [r3, #8]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80072a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f042 0201 	orr.w	r2, r2, #1
 80072b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 ff05 	bl	80080c4 <UART_CheckIdleState>
 80072ba:	4603      	mov	r3, r0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b091      	sub	sp, #68	@ 0x44
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	4613      	mov	r3, r2
 80072d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072d8:	2b20      	cmp	r3, #32
 80072da:	d178      	bne.n	80073ce <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d002      	beq.n	80072e8 <HAL_UART_Transmit_IT+0x24>
 80072e2:	88fb      	ldrh	r3, [r7, #6]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e071      	b.n	80073d0 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	88fa      	ldrh	r2, [r7, #6]
 80072f6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	88fa      	ldrh	r2, [r7, #6]
 80072fe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2221      	movs	r2, #33	@ 0x21
 8007314:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800731c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007320:	d12a      	bne.n	8007378 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800732a:	d107      	bne.n	800733c <HAL_UART_Transmit_IT+0x78>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d103      	bne.n	800733c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	4a29      	ldr	r2, [pc, #164]	@ (80073dc <HAL_UART_Transmit_IT+0x118>)
 8007338:	679a      	str	r2, [r3, #120]	@ 0x78
 800733a:	e002      	b.n	8007342 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	4a28      	ldr	r2, [pc, #160]	@ (80073e0 <HAL_UART_Transmit_IT+0x11c>)
 8007340:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3308      	adds	r3, #8
 8007348:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800734c:	e853 3f00 	ldrex	r3, [r3]
 8007350:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007354:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007358:	63bb      	str	r3, [r7, #56]	@ 0x38
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3308      	adds	r3, #8
 8007360:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007362:	637a      	str	r2, [r7, #52]	@ 0x34
 8007364:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007366:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007368:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800736a:	e841 2300 	strex	r3, r2, [r1]
 800736e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1e5      	bne.n	8007342 <HAL_UART_Transmit_IT+0x7e>
 8007376:	e028      	b.n	80073ca <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007380:	d107      	bne.n	8007392 <HAL_UART_Transmit_IT+0xce>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d103      	bne.n	8007392 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	4a15      	ldr	r2, [pc, #84]	@ (80073e4 <HAL_UART_Transmit_IT+0x120>)
 800738e:	679a      	str	r2, [r3, #120]	@ 0x78
 8007390:	e002      	b.n	8007398 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4a14      	ldr	r2, [pc, #80]	@ (80073e8 <HAL_UART_Transmit_IT+0x124>)
 8007396:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	e853 3f00 	ldrex	r3, [r3]
 80073a4:	613b      	str	r3, [r7, #16]
   return(result);
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	461a      	mov	r2, r3
 80073b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073b6:	623b      	str	r3, [r7, #32]
 80073b8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ba:	69f9      	ldr	r1, [r7, #28]
 80073bc:	6a3a      	ldr	r2, [r7, #32]
 80073be:	e841 2300 	strex	r3, r2, [r1]
 80073c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1e6      	bne.n	8007398 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	e000      	b.n	80073d0 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80073ce:	2302      	movs	r3, #2
  }
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3744      	adds	r7, #68	@ 0x44
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	0800885f 	.word	0x0800885f
 80073e0:	0800877f 	.word	0x0800877f
 80073e4:	080086bd 	.word	0x080086bd
 80073e8:	08008605 	.word	0x08008605

080073ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08a      	sub	sp, #40	@ 0x28
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	4613      	mov	r3, r2
 80073f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007400:	2b20      	cmp	r3, #32
 8007402:	d137      	bne.n	8007474 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d002      	beq.n	8007410 <HAL_UART_Receive_IT+0x24>
 800740a:	88fb      	ldrh	r3, [r7, #6]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d101      	bne.n	8007414 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e030      	b.n	8007476 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a18      	ldr	r2, [pc, #96]	@ (8007480 <HAL_UART_Receive_IT+0x94>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d01f      	beq.n	8007464 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d018      	beq.n	8007464 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	e853 3f00 	ldrex	r3, [r3]
 800743e:	613b      	str	r3, [r7, #16]
   return(result);
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007446:	627b      	str	r3, [r7, #36]	@ 0x24
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	461a      	mov	r2, r3
 800744e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007450:	623b      	str	r3, [r7, #32]
 8007452:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007454:	69f9      	ldr	r1, [r7, #28]
 8007456:	6a3a      	ldr	r2, [r7, #32]
 8007458:	e841 2300 	strex	r3, r2, [r1]
 800745c:	61bb      	str	r3, [r7, #24]
   return(result);
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1e6      	bne.n	8007432 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007464:	88fb      	ldrh	r3, [r7, #6]
 8007466:	461a      	mov	r2, r3
 8007468:	68b9      	ldr	r1, [r7, #8]
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f000 ff42 	bl	80082f4 <UART_Start_Receive_IT>
 8007470:	4603      	mov	r3, r0
 8007472:	e000      	b.n	8007476 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007474:	2302      	movs	r3, #2
  }
}
 8007476:	4618      	mov	r0, r3
 8007478:	3728      	adds	r7, #40	@ 0x28
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	58000c00 	.word	0x58000c00

08007484 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	460b      	mov	r3, r1
 80074a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80074a4:	bf00      	nop
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074b4:	b092      	sub	sp, #72	@ 0x48
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074ba:	2300      	movs	r3, #0
 80074bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	689a      	ldr	r2, [r3, #8]
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	431a      	orrs	r2, r3
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	431a      	orrs	r2, r3
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	69db      	ldr	r3, [r3, #28]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	4bbe      	ldr	r3, [pc, #760]	@ (80077d8 <UART_SetConfig+0x328>)
 80074e0:	4013      	ands	r3, r2
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	6812      	ldr	r2, [r2, #0]
 80074e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80074e8:	430b      	orrs	r3, r1
 80074ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	68da      	ldr	r2, [r3, #12]
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	430a      	orrs	r2, r1
 8007500:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4ab3      	ldr	r2, [pc, #716]	@ (80077dc <UART_SetConfig+0x32c>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d004      	beq.n	800751c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007518:	4313      	orrs	r3, r2
 800751a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	689a      	ldr	r2, [r3, #8]
 8007522:	4baf      	ldr	r3, [pc, #700]	@ (80077e0 <UART_SetConfig+0x330>)
 8007524:	4013      	ands	r3, r2
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	6812      	ldr	r2, [r2, #0]
 800752a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800752c:	430b      	orrs	r3, r1
 800752e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007536:	f023 010f 	bic.w	r1, r3, #15
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	430a      	orrs	r2, r1
 8007544:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4aa6      	ldr	r2, [pc, #664]	@ (80077e4 <UART_SetConfig+0x334>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d177      	bne.n	8007640 <UART_SetConfig+0x190>
 8007550:	4ba5      	ldr	r3, [pc, #660]	@ (80077e8 <UART_SetConfig+0x338>)
 8007552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007554:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007558:	2b28      	cmp	r3, #40	@ 0x28
 800755a:	d86d      	bhi.n	8007638 <UART_SetConfig+0x188>
 800755c:	a201      	add	r2, pc, #4	@ (adr r2, 8007564 <UART_SetConfig+0xb4>)
 800755e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007562:	bf00      	nop
 8007564:	08007609 	.word	0x08007609
 8007568:	08007639 	.word	0x08007639
 800756c:	08007639 	.word	0x08007639
 8007570:	08007639 	.word	0x08007639
 8007574:	08007639 	.word	0x08007639
 8007578:	08007639 	.word	0x08007639
 800757c:	08007639 	.word	0x08007639
 8007580:	08007639 	.word	0x08007639
 8007584:	08007611 	.word	0x08007611
 8007588:	08007639 	.word	0x08007639
 800758c:	08007639 	.word	0x08007639
 8007590:	08007639 	.word	0x08007639
 8007594:	08007639 	.word	0x08007639
 8007598:	08007639 	.word	0x08007639
 800759c:	08007639 	.word	0x08007639
 80075a0:	08007639 	.word	0x08007639
 80075a4:	08007619 	.word	0x08007619
 80075a8:	08007639 	.word	0x08007639
 80075ac:	08007639 	.word	0x08007639
 80075b0:	08007639 	.word	0x08007639
 80075b4:	08007639 	.word	0x08007639
 80075b8:	08007639 	.word	0x08007639
 80075bc:	08007639 	.word	0x08007639
 80075c0:	08007639 	.word	0x08007639
 80075c4:	08007621 	.word	0x08007621
 80075c8:	08007639 	.word	0x08007639
 80075cc:	08007639 	.word	0x08007639
 80075d0:	08007639 	.word	0x08007639
 80075d4:	08007639 	.word	0x08007639
 80075d8:	08007639 	.word	0x08007639
 80075dc:	08007639 	.word	0x08007639
 80075e0:	08007639 	.word	0x08007639
 80075e4:	08007629 	.word	0x08007629
 80075e8:	08007639 	.word	0x08007639
 80075ec:	08007639 	.word	0x08007639
 80075f0:	08007639 	.word	0x08007639
 80075f4:	08007639 	.word	0x08007639
 80075f8:	08007639 	.word	0x08007639
 80075fc:	08007639 	.word	0x08007639
 8007600:	08007639 	.word	0x08007639
 8007604:	08007631 	.word	0x08007631
 8007608:	2301      	movs	r3, #1
 800760a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800760e:	e222      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007610:	2304      	movs	r3, #4
 8007612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007616:	e21e      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007618:	2308      	movs	r3, #8
 800761a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800761e:	e21a      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007620:	2310      	movs	r3, #16
 8007622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007626:	e216      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007628:	2320      	movs	r3, #32
 800762a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800762e:	e212      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007630:	2340      	movs	r3, #64	@ 0x40
 8007632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007636:	e20e      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007638:	2380      	movs	r3, #128	@ 0x80
 800763a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800763e:	e20a      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a69      	ldr	r2, [pc, #420]	@ (80077ec <UART_SetConfig+0x33c>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d130      	bne.n	80076ac <UART_SetConfig+0x1fc>
 800764a:	4b67      	ldr	r3, [pc, #412]	@ (80077e8 <UART_SetConfig+0x338>)
 800764c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800764e:	f003 0307 	and.w	r3, r3, #7
 8007652:	2b05      	cmp	r3, #5
 8007654:	d826      	bhi.n	80076a4 <UART_SetConfig+0x1f4>
 8007656:	a201      	add	r2, pc, #4	@ (adr r2, 800765c <UART_SetConfig+0x1ac>)
 8007658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765c:	08007675 	.word	0x08007675
 8007660:	0800767d 	.word	0x0800767d
 8007664:	08007685 	.word	0x08007685
 8007668:	0800768d 	.word	0x0800768d
 800766c:	08007695 	.word	0x08007695
 8007670:	0800769d 	.word	0x0800769d
 8007674:	2300      	movs	r3, #0
 8007676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800767a:	e1ec      	b.n	8007a56 <UART_SetConfig+0x5a6>
 800767c:	2304      	movs	r3, #4
 800767e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007682:	e1e8      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007684:	2308      	movs	r3, #8
 8007686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800768a:	e1e4      	b.n	8007a56 <UART_SetConfig+0x5a6>
 800768c:	2310      	movs	r3, #16
 800768e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007692:	e1e0      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007694:	2320      	movs	r3, #32
 8007696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800769a:	e1dc      	b.n	8007a56 <UART_SetConfig+0x5a6>
 800769c:	2340      	movs	r3, #64	@ 0x40
 800769e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076a2:	e1d8      	b.n	8007a56 <UART_SetConfig+0x5a6>
 80076a4:	2380      	movs	r3, #128	@ 0x80
 80076a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076aa:	e1d4      	b.n	8007a56 <UART_SetConfig+0x5a6>
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a4f      	ldr	r2, [pc, #316]	@ (80077f0 <UART_SetConfig+0x340>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d130      	bne.n	8007718 <UART_SetConfig+0x268>
 80076b6:	4b4c      	ldr	r3, [pc, #304]	@ (80077e8 <UART_SetConfig+0x338>)
 80076b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076ba:	f003 0307 	and.w	r3, r3, #7
 80076be:	2b05      	cmp	r3, #5
 80076c0:	d826      	bhi.n	8007710 <UART_SetConfig+0x260>
 80076c2:	a201      	add	r2, pc, #4	@ (adr r2, 80076c8 <UART_SetConfig+0x218>)
 80076c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c8:	080076e1 	.word	0x080076e1
 80076cc:	080076e9 	.word	0x080076e9
 80076d0:	080076f1 	.word	0x080076f1
 80076d4:	080076f9 	.word	0x080076f9
 80076d8:	08007701 	.word	0x08007701
 80076dc:	08007709 	.word	0x08007709
 80076e0:	2300      	movs	r3, #0
 80076e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076e6:	e1b6      	b.n	8007a56 <UART_SetConfig+0x5a6>
 80076e8:	2304      	movs	r3, #4
 80076ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ee:	e1b2      	b.n	8007a56 <UART_SetConfig+0x5a6>
 80076f0:	2308      	movs	r3, #8
 80076f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076f6:	e1ae      	b.n	8007a56 <UART_SetConfig+0x5a6>
 80076f8:	2310      	movs	r3, #16
 80076fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076fe:	e1aa      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007700:	2320      	movs	r3, #32
 8007702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007706:	e1a6      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007708:	2340      	movs	r3, #64	@ 0x40
 800770a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800770e:	e1a2      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007710:	2380      	movs	r3, #128	@ 0x80
 8007712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007716:	e19e      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a35      	ldr	r2, [pc, #212]	@ (80077f4 <UART_SetConfig+0x344>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d130      	bne.n	8007784 <UART_SetConfig+0x2d4>
 8007722:	4b31      	ldr	r3, [pc, #196]	@ (80077e8 <UART_SetConfig+0x338>)
 8007724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007726:	f003 0307 	and.w	r3, r3, #7
 800772a:	2b05      	cmp	r3, #5
 800772c:	d826      	bhi.n	800777c <UART_SetConfig+0x2cc>
 800772e:	a201      	add	r2, pc, #4	@ (adr r2, 8007734 <UART_SetConfig+0x284>)
 8007730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007734:	0800774d 	.word	0x0800774d
 8007738:	08007755 	.word	0x08007755
 800773c:	0800775d 	.word	0x0800775d
 8007740:	08007765 	.word	0x08007765
 8007744:	0800776d 	.word	0x0800776d
 8007748:	08007775 	.word	0x08007775
 800774c:	2300      	movs	r3, #0
 800774e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007752:	e180      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007754:	2304      	movs	r3, #4
 8007756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800775a:	e17c      	b.n	8007a56 <UART_SetConfig+0x5a6>
 800775c:	2308      	movs	r3, #8
 800775e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007762:	e178      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007764:	2310      	movs	r3, #16
 8007766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800776a:	e174      	b.n	8007a56 <UART_SetConfig+0x5a6>
 800776c:	2320      	movs	r3, #32
 800776e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007772:	e170      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007774:	2340      	movs	r3, #64	@ 0x40
 8007776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800777a:	e16c      	b.n	8007a56 <UART_SetConfig+0x5a6>
 800777c:	2380      	movs	r3, #128	@ 0x80
 800777e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007782:	e168      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a1b      	ldr	r2, [pc, #108]	@ (80077f8 <UART_SetConfig+0x348>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d142      	bne.n	8007814 <UART_SetConfig+0x364>
 800778e:	4b16      	ldr	r3, [pc, #88]	@ (80077e8 <UART_SetConfig+0x338>)
 8007790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007792:	f003 0307 	and.w	r3, r3, #7
 8007796:	2b05      	cmp	r3, #5
 8007798:	d838      	bhi.n	800780c <UART_SetConfig+0x35c>
 800779a:	a201      	add	r2, pc, #4	@ (adr r2, 80077a0 <UART_SetConfig+0x2f0>)
 800779c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a0:	080077b9 	.word	0x080077b9
 80077a4:	080077c1 	.word	0x080077c1
 80077a8:	080077c9 	.word	0x080077c9
 80077ac:	080077d1 	.word	0x080077d1
 80077b0:	080077fd 	.word	0x080077fd
 80077b4:	08007805 	.word	0x08007805
 80077b8:	2300      	movs	r3, #0
 80077ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077be:	e14a      	b.n	8007a56 <UART_SetConfig+0x5a6>
 80077c0:	2304      	movs	r3, #4
 80077c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077c6:	e146      	b.n	8007a56 <UART_SetConfig+0x5a6>
 80077c8:	2308      	movs	r3, #8
 80077ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ce:	e142      	b.n	8007a56 <UART_SetConfig+0x5a6>
 80077d0:	2310      	movs	r3, #16
 80077d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077d6:	e13e      	b.n	8007a56 <UART_SetConfig+0x5a6>
 80077d8:	cfff69f3 	.word	0xcfff69f3
 80077dc:	58000c00 	.word	0x58000c00
 80077e0:	11fff4ff 	.word	0x11fff4ff
 80077e4:	40011000 	.word	0x40011000
 80077e8:	58024400 	.word	0x58024400
 80077ec:	40004400 	.word	0x40004400
 80077f0:	40004800 	.word	0x40004800
 80077f4:	40004c00 	.word	0x40004c00
 80077f8:	40005000 	.word	0x40005000
 80077fc:	2320      	movs	r3, #32
 80077fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007802:	e128      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007804:	2340      	movs	r3, #64	@ 0x40
 8007806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800780a:	e124      	b.n	8007a56 <UART_SetConfig+0x5a6>
 800780c:	2380      	movs	r3, #128	@ 0x80
 800780e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007812:	e120      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4acb      	ldr	r2, [pc, #812]	@ (8007b48 <UART_SetConfig+0x698>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d176      	bne.n	800790c <UART_SetConfig+0x45c>
 800781e:	4bcb      	ldr	r3, [pc, #812]	@ (8007b4c <UART_SetConfig+0x69c>)
 8007820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007822:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007826:	2b28      	cmp	r3, #40	@ 0x28
 8007828:	d86c      	bhi.n	8007904 <UART_SetConfig+0x454>
 800782a:	a201      	add	r2, pc, #4	@ (adr r2, 8007830 <UART_SetConfig+0x380>)
 800782c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007830:	080078d5 	.word	0x080078d5
 8007834:	08007905 	.word	0x08007905
 8007838:	08007905 	.word	0x08007905
 800783c:	08007905 	.word	0x08007905
 8007840:	08007905 	.word	0x08007905
 8007844:	08007905 	.word	0x08007905
 8007848:	08007905 	.word	0x08007905
 800784c:	08007905 	.word	0x08007905
 8007850:	080078dd 	.word	0x080078dd
 8007854:	08007905 	.word	0x08007905
 8007858:	08007905 	.word	0x08007905
 800785c:	08007905 	.word	0x08007905
 8007860:	08007905 	.word	0x08007905
 8007864:	08007905 	.word	0x08007905
 8007868:	08007905 	.word	0x08007905
 800786c:	08007905 	.word	0x08007905
 8007870:	080078e5 	.word	0x080078e5
 8007874:	08007905 	.word	0x08007905
 8007878:	08007905 	.word	0x08007905
 800787c:	08007905 	.word	0x08007905
 8007880:	08007905 	.word	0x08007905
 8007884:	08007905 	.word	0x08007905
 8007888:	08007905 	.word	0x08007905
 800788c:	08007905 	.word	0x08007905
 8007890:	080078ed 	.word	0x080078ed
 8007894:	08007905 	.word	0x08007905
 8007898:	08007905 	.word	0x08007905
 800789c:	08007905 	.word	0x08007905
 80078a0:	08007905 	.word	0x08007905
 80078a4:	08007905 	.word	0x08007905
 80078a8:	08007905 	.word	0x08007905
 80078ac:	08007905 	.word	0x08007905
 80078b0:	080078f5 	.word	0x080078f5
 80078b4:	08007905 	.word	0x08007905
 80078b8:	08007905 	.word	0x08007905
 80078bc:	08007905 	.word	0x08007905
 80078c0:	08007905 	.word	0x08007905
 80078c4:	08007905 	.word	0x08007905
 80078c8:	08007905 	.word	0x08007905
 80078cc:	08007905 	.word	0x08007905
 80078d0:	080078fd 	.word	0x080078fd
 80078d4:	2301      	movs	r3, #1
 80078d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078da:	e0bc      	b.n	8007a56 <UART_SetConfig+0x5a6>
 80078dc:	2304      	movs	r3, #4
 80078de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078e2:	e0b8      	b.n	8007a56 <UART_SetConfig+0x5a6>
 80078e4:	2308      	movs	r3, #8
 80078e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ea:	e0b4      	b.n	8007a56 <UART_SetConfig+0x5a6>
 80078ec:	2310      	movs	r3, #16
 80078ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078f2:	e0b0      	b.n	8007a56 <UART_SetConfig+0x5a6>
 80078f4:	2320      	movs	r3, #32
 80078f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078fa:	e0ac      	b.n	8007a56 <UART_SetConfig+0x5a6>
 80078fc:	2340      	movs	r3, #64	@ 0x40
 80078fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007902:	e0a8      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007904:	2380      	movs	r3, #128	@ 0x80
 8007906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800790a:	e0a4      	b.n	8007a56 <UART_SetConfig+0x5a6>
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a8f      	ldr	r2, [pc, #572]	@ (8007b50 <UART_SetConfig+0x6a0>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d130      	bne.n	8007978 <UART_SetConfig+0x4c8>
 8007916:	4b8d      	ldr	r3, [pc, #564]	@ (8007b4c <UART_SetConfig+0x69c>)
 8007918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800791a:	f003 0307 	and.w	r3, r3, #7
 800791e:	2b05      	cmp	r3, #5
 8007920:	d826      	bhi.n	8007970 <UART_SetConfig+0x4c0>
 8007922:	a201      	add	r2, pc, #4	@ (adr r2, 8007928 <UART_SetConfig+0x478>)
 8007924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007928:	08007941 	.word	0x08007941
 800792c:	08007949 	.word	0x08007949
 8007930:	08007951 	.word	0x08007951
 8007934:	08007959 	.word	0x08007959
 8007938:	08007961 	.word	0x08007961
 800793c:	08007969 	.word	0x08007969
 8007940:	2300      	movs	r3, #0
 8007942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007946:	e086      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007948:	2304      	movs	r3, #4
 800794a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800794e:	e082      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007950:	2308      	movs	r3, #8
 8007952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007956:	e07e      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007958:	2310      	movs	r3, #16
 800795a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800795e:	e07a      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007960:	2320      	movs	r3, #32
 8007962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007966:	e076      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007968:	2340      	movs	r3, #64	@ 0x40
 800796a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800796e:	e072      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007970:	2380      	movs	r3, #128	@ 0x80
 8007972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007976:	e06e      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a75      	ldr	r2, [pc, #468]	@ (8007b54 <UART_SetConfig+0x6a4>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d130      	bne.n	80079e4 <UART_SetConfig+0x534>
 8007982:	4b72      	ldr	r3, [pc, #456]	@ (8007b4c <UART_SetConfig+0x69c>)
 8007984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007986:	f003 0307 	and.w	r3, r3, #7
 800798a:	2b05      	cmp	r3, #5
 800798c:	d826      	bhi.n	80079dc <UART_SetConfig+0x52c>
 800798e:	a201      	add	r2, pc, #4	@ (adr r2, 8007994 <UART_SetConfig+0x4e4>)
 8007990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007994:	080079ad 	.word	0x080079ad
 8007998:	080079b5 	.word	0x080079b5
 800799c:	080079bd 	.word	0x080079bd
 80079a0:	080079c5 	.word	0x080079c5
 80079a4:	080079cd 	.word	0x080079cd
 80079a8:	080079d5 	.word	0x080079d5
 80079ac:	2300      	movs	r3, #0
 80079ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079b2:	e050      	b.n	8007a56 <UART_SetConfig+0x5a6>
 80079b4:	2304      	movs	r3, #4
 80079b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ba:	e04c      	b.n	8007a56 <UART_SetConfig+0x5a6>
 80079bc:	2308      	movs	r3, #8
 80079be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079c2:	e048      	b.n	8007a56 <UART_SetConfig+0x5a6>
 80079c4:	2310      	movs	r3, #16
 80079c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ca:	e044      	b.n	8007a56 <UART_SetConfig+0x5a6>
 80079cc:	2320      	movs	r3, #32
 80079ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079d2:	e040      	b.n	8007a56 <UART_SetConfig+0x5a6>
 80079d4:	2340      	movs	r3, #64	@ 0x40
 80079d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079da:	e03c      	b.n	8007a56 <UART_SetConfig+0x5a6>
 80079dc:	2380      	movs	r3, #128	@ 0x80
 80079de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079e2:	e038      	b.n	8007a56 <UART_SetConfig+0x5a6>
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a5b      	ldr	r2, [pc, #364]	@ (8007b58 <UART_SetConfig+0x6a8>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d130      	bne.n	8007a50 <UART_SetConfig+0x5a0>
 80079ee:	4b57      	ldr	r3, [pc, #348]	@ (8007b4c <UART_SetConfig+0x69c>)
 80079f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079f2:	f003 0307 	and.w	r3, r3, #7
 80079f6:	2b05      	cmp	r3, #5
 80079f8:	d826      	bhi.n	8007a48 <UART_SetConfig+0x598>
 80079fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007a00 <UART_SetConfig+0x550>)
 80079fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a00:	08007a19 	.word	0x08007a19
 8007a04:	08007a21 	.word	0x08007a21
 8007a08:	08007a29 	.word	0x08007a29
 8007a0c:	08007a31 	.word	0x08007a31
 8007a10:	08007a39 	.word	0x08007a39
 8007a14:	08007a41 	.word	0x08007a41
 8007a18:	2302      	movs	r3, #2
 8007a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a1e:	e01a      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007a20:	2304      	movs	r3, #4
 8007a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a26:	e016      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007a28:	2308      	movs	r3, #8
 8007a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a2e:	e012      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007a30:	2310      	movs	r3, #16
 8007a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a36:	e00e      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007a38:	2320      	movs	r3, #32
 8007a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a3e:	e00a      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007a40:	2340      	movs	r3, #64	@ 0x40
 8007a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a46:	e006      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007a48:	2380      	movs	r3, #128	@ 0x80
 8007a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a4e:	e002      	b.n	8007a56 <UART_SetConfig+0x5a6>
 8007a50:	2380      	movs	r3, #128	@ 0x80
 8007a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a3f      	ldr	r2, [pc, #252]	@ (8007b58 <UART_SetConfig+0x6a8>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	f040 80f8 	bne.w	8007c52 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a62:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007a66:	2b20      	cmp	r3, #32
 8007a68:	dc46      	bgt.n	8007af8 <UART_SetConfig+0x648>
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	f2c0 8082 	blt.w	8007b74 <UART_SetConfig+0x6c4>
 8007a70:	3b02      	subs	r3, #2
 8007a72:	2b1e      	cmp	r3, #30
 8007a74:	d87e      	bhi.n	8007b74 <UART_SetConfig+0x6c4>
 8007a76:	a201      	add	r2, pc, #4	@ (adr r2, 8007a7c <UART_SetConfig+0x5cc>)
 8007a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7c:	08007aff 	.word	0x08007aff
 8007a80:	08007b75 	.word	0x08007b75
 8007a84:	08007b07 	.word	0x08007b07
 8007a88:	08007b75 	.word	0x08007b75
 8007a8c:	08007b75 	.word	0x08007b75
 8007a90:	08007b75 	.word	0x08007b75
 8007a94:	08007b17 	.word	0x08007b17
 8007a98:	08007b75 	.word	0x08007b75
 8007a9c:	08007b75 	.word	0x08007b75
 8007aa0:	08007b75 	.word	0x08007b75
 8007aa4:	08007b75 	.word	0x08007b75
 8007aa8:	08007b75 	.word	0x08007b75
 8007aac:	08007b75 	.word	0x08007b75
 8007ab0:	08007b75 	.word	0x08007b75
 8007ab4:	08007b27 	.word	0x08007b27
 8007ab8:	08007b75 	.word	0x08007b75
 8007abc:	08007b75 	.word	0x08007b75
 8007ac0:	08007b75 	.word	0x08007b75
 8007ac4:	08007b75 	.word	0x08007b75
 8007ac8:	08007b75 	.word	0x08007b75
 8007acc:	08007b75 	.word	0x08007b75
 8007ad0:	08007b75 	.word	0x08007b75
 8007ad4:	08007b75 	.word	0x08007b75
 8007ad8:	08007b75 	.word	0x08007b75
 8007adc:	08007b75 	.word	0x08007b75
 8007ae0:	08007b75 	.word	0x08007b75
 8007ae4:	08007b75 	.word	0x08007b75
 8007ae8:	08007b75 	.word	0x08007b75
 8007aec:	08007b75 	.word	0x08007b75
 8007af0:	08007b75 	.word	0x08007b75
 8007af4:	08007b67 	.word	0x08007b67
 8007af8:	2b40      	cmp	r3, #64	@ 0x40
 8007afa:	d037      	beq.n	8007b6c <UART_SetConfig+0x6bc>
 8007afc:	e03a      	b.n	8007b74 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007afe:	f7fe ff6f 	bl	80069e0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007b02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007b04:	e03c      	b.n	8007b80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fe ff7e 	bl	8006a0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b14:	e034      	b.n	8007b80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b16:	f107 0318 	add.w	r3, r7, #24
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7ff f8ca 	bl	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b24:	e02c      	b.n	8007b80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b26:	4b09      	ldr	r3, [pc, #36]	@ (8007b4c <UART_SetConfig+0x69c>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0320 	and.w	r3, r3, #32
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d016      	beq.n	8007b60 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b32:	4b06      	ldr	r3, [pc, #24]	@ (8007b4c <UART_SetConfig+0x69c>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	08db      	lsrs	r3, r3, #3
 8007b38:	f003 0303 	and.w	r3, r3, #3
 8007b3c:	4a07      	ldr	r2, [pc, #28]	@ (8007b5c <UART_SetConfig+0x6ac>)
 8007b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b44:	e01c      	b.n	8007b80 <UART_SetConfig+0x6d0>
 8007b46:	bf00      	nop
 8007b48:	40011400 	.word	0x40011400
 8007b4c:	58024400 	.word	0x58024400
 8007b50:	40007800 	.word	0x40007800
 8007b54:	40007c00 	.word	0x40007c00
 8007b58:	58000c00 	.word	0x58000c00
 8007b5c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007b60:	4b9d      	ldr	r3, [pc, #628]	@ (8007dd8 <UART_SetConfig+0x928>)
 8007b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b64:	e00c      	b.n	8007b80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b66:	4b9d      	ldr	r3, [pc, #628]	@ (8007ddc <UART_SetConfig+0x92c>)
 8007b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b6a:	e009      	b.n	8007b80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b72:	e005      	b.n	8007b80 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007b74:	2300      	movs	r3, #0
 8007b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007b7e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f000 81de 	beq.w	8007f44 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b8c:	4a94      	ldr	r2, [pc, #592]	@ (8007de0 <UART_SetConfig+0x930>)
 8007b8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b92:	461a      	mov	r2, r3
 8007b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b96:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b9a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	685a      	ldr	r2, [r3, #4]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	005b      	lsls	r3, r3, #1
 8007ba4:	4413      	add	r3, r2
 8007ba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d305      	bcc.n	8007bb8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007bb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d903      	bls.n	8007bc0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007bbe:	e1c1      	b.n	8007f44 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	60bb      	str	r3, [r7, #8]
 8007bc6:	60fa      	str	r2, [r7, #12]
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bcc:	4a84      	ldr	r2, [pc, #528]	@ (8007de0 <UART_SetConfig+0x930>)
 8007bce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	603b      	str	r3, [r7, #0]
 8007bd8:	607a      	str	r2, [r7, #4]
 8007bda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007be2:	f7f8 fbd5 	bl	8000390 <__aeabi_uldivmod>
 8007be6:	4602      	mov	r2, r0
 8007be8:	460b      	mov	r3, r1
 8007bea:	4610      	mov	r0, r2
 8007bec:	4619      	mov	r1, r3
 8007bee:	f04f 0200 	mov.w	r2, #0
 8007bf2:	f04f 0300 	mov.w	r3, #0
 8007bf6:	020b      	lsls	r3, r1, #8
 8007bf8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007bfc:	0202      	lsls	r2, r0, #8
 8007bfe:	6979      	ldr	r1, [r7, #20]
 8007c00:	6849      	ldr	r1, [r1, #4]
 8007c02:	0849      	lsrs	r1, r1, #1
 8007c04:	2000      	movs	r0, #0
 8007c06:	460c      	mov	r4, r1
 8007c08:	4605      	mov	r5, r0
 8007c0a:	eb12 0804 	adds.w	r8, r2, r4
 8007c0e:	eb43 0905 	adc.w	r9, r3, r5
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	469a      	mov	sl, r3
 8007c1a:	4693      	mov	fp, r2
 8007c1c:	4652      	mov	r2, sl
 8007c1e:	465b      	mov	r3, fp
 8007c20:	4640      	mov	r0, r8
 8007c22:	4649      	mov	r1, r9
 8007c24:	f7f8 fbb4 	bl	8000390 <__aeabi_uldivmod>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c36:	d308      	bcc.n	8007c4a <UART_SetConfig+0x79a>
 8007c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c3e:	d204      	bcs.n	8007c4a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c46:	60da      	str	r2, [r3, #12]
 8007c48:	e17c      	b.n	8007f44 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007c50:	e178      	b.n	8007f44 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c5a:	f040 80c5 	bne.w	8007de8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007c5e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007c62:	2b20      	cmp	r3, #32
 8007c64:	dc48      	bgt.n	8007cf8 <UART_SetConfig+0x848>
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	db7b      	blt.n	8007d62 <UART_SetConfig+0x8b2>
 8007c6a:	2b20      	cmp	r3, #32
 8007c6c:	d879      	bhi.n	8007d62 <UART_SetConfig+0x8b2>
 8007c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c74 <UART_SetConfig+0x7c4>)
 8007c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c74:	08007cff 	.word	0x08007cff
 8007c78:	08007d07 	.word	0x08007d07
 8007c7c:	08007d63 	.word	0x08007d63
 8007c80:	08007d63 	.word	0x08007d63
 8007c84:	08007d0f 	.word	0x08007d0f
 8007c88:	08007d63 	.word	0x08007d63
 8007c8c:	08007d63 	.word	0x08007d63
 8007c90:	08007d63 	.word	0x08007d63
 8007c94:	08007d1f 	.word	0x08007d1f
 8007c98:	08007d63 	.word	0x08007d63
 8007c9c:	08007d63 	.word	0x08007d63
 8007ca0:	08007d63 	.word	0x08007d63
 8007ca4:	08007d63 	.word	0x08007d63
 8007ca8:	08007d63 	.word	0x08007d63
 8007cac:	08007d63 	.word	0x08007d63
 8007cb0:	08007d63 	.word	0x08007d63
 8007cb4:	08007d2f 	.word	0x08007d2f
 8007cb8:	08007d63 	.word	0x08007d63
 8007cbc:	08007d63 	.word	0x08007d63
 8007cc0:	08007d63 	.word	0x08007d63
 8007cc4:	08007d63 	.word	0x08007d63
 8007cc8:	08007d63 	.word	0x08007d63
 8007ccc:	08007d63 	.word	0x08007d63
 8007cd0:	08007d63 	.word	0x08007d63
 8007cd4:	08007d63 	.word	0x08007d63
 8007cd8:	08007d63 	.word	0x08007d63
 8007cdc:	08007d63 	.word	0x08007d63
 8007ce0:	08007d63 	.word	0x08007d63
 8007ce4:	08007d63 	.word	0x08007d63
 8007ce8:	08007d63 	.word	0x08007d63
 8007cec:	08007d63 	.word	0x08007d63
 8007cf0:	08007d63 	.word	0x08007d63
 8007cf4:	08007d55 	.word	0x08007d55
 8007cf8:	2b40      	cmp	r3, #64	@ 0x40
 8007cfa:	d02e      	beq.n	8007d5a <UART_SetConfig+0x8aa>
 8007cfc:	e031      	b.n	8007d62 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cfe:	f7fd fc39 	bl	8005574 <HAL_RCC_GetPCLK1Freq>
 8007d02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007d04:	e033      	b.n	8007d6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d06:	f7fd fc4b 	bl	80055a0 <HAL_RCC_GetPCLK2Freq>
 8007d0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007d0c:	e02f      	b.n	8007d6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fe fe7a 	bl	8006a0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d1c:	e027      	b.n	8007d6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d1e:	f107 0318 	add.w	r3, r7, #24
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7fe ffc6 	bl	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d2c:	e01f      	b.n	8007d6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8007de4 <UART_SetConfig+0x934>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 0320 	and.w	r3, r3, #32
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d009      	beq.n	8007d4e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007d3a:	4b2a      	ldr	r3, [pc, #168]	@ (8007de4 <UART_SetConfig+0x934>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	08db      	lsrs	r3, r3, #3
 8007d40:	f003 0303 	and.w	r3, r3, #3
 8007d44:	4a24      	ldr	r2, [pc, #144]	@ (8007dd8 <UART_SetConfig+0x928>)
 8007d46:	fa22 f303 	lsr.w	r3, r2, r3
 8007d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d4c:	e00f      	b.n	8007d6e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007d4e:	4b22      	ldr	r3, [pc, #136]	@ (8007dd8 <UART_SetConfig+0x928>)
 8007d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d52:	e00c      	b.n	8007d6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d54:	4b21      	ldr	r3, [pc, #132]	@ (8007ddc <UART_SetConfig+0x92c>)
 8007d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d58:	e009      	b.n	8007d6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d60:	e005      	b.n	8007d6e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007d6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f000 80e7 	beq.w	8007f44 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d7a:	4a19      	ldr	r2, [pc, #100]	@ (8007de0 <UART_SetConfig+0x930>)
 8007d7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d80:	461a      	mov	r2, r3
 8007d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d84:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d88:	005a      	lsls	r2, r3, #1
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	085b      	lsrs	r3, r3, #1
 8007d90:	441a      	add	r2, r3
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d9e:	2b0f      	cmp	r3, #15
 8007da0:	d916      	bls.n	8007dd0 <UART_SetConfig+0x920>
 8007da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007da8:	d212      	bcs.n	8007dd0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	f023 030f 	bic.w	r3, r3, #15
 8007db2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db6:	085b      	lsrs	r3, r3, #1
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	f003 0307 	and.w	r3, r3, #7
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007dcc:	60da      	str	r2, [r3, #12]
 8007dce:	e0b9      	b.n	8007f44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007dd6:	e0b5      	b.n	8007f44 <UART_SetConfig+0xa94>
 8007dd8:	03d09000 	.word	0x03d09000
 8007ddc:	003d0900 	.word	0x003d0900
 8007de0:	0800a5a4 	.word	0x0800a5a4
 8007de4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007de8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007dec:	2b20      	cmp	r3, #32
 8007dee:	dc49      	bgt.n	8007e84 <UART_SetConfig+0x9d4>
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	db7c      	blt.n	8007eee <UART_SetConfig+0xa3e>
 8007df4:	2b20      	cmp	r3, #32
 8007df6:	d87a      	bhi.n	8007eee <UART_SetConfig+0xa3e>
 8007df8:	a201      	add	r2, pc, #4	@ (adr r2, 8007e00 <UART_SetConfig+0x950>)
 8007dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfe:	bf00      	nop
 8007e00:	08007e8b 	.word	0x08007e8b
 8007e04:	08007e93 	.word	0x08007e93
 8007e08:	08007eef 	.word	0x08007eef
 8007e0c:	08007eef 	.word	0x08007eef
 8007e10:	08007e9b 	.word	0x08007e9b
 8007e14:	08007eef 	.word	0x08007eef
 8007e18:	08007eef 	.word	0x08007eef
 8007e1c:	08007eef 	.word	0x08007eef
 8007e20:	08007eab 	.word	0x08007eab
 8007e24:	08007eef 	.word	0x08007eef
 8007e28:	08007eef 	.word	0x08007eef
 8007e2c:	08007eef 	.word	0x08007eef
 8007e30:	08007eef 	.word	0x08007eef
 8007e34:	08007eef 	.word	0x08007eef
 8007e38:	08007eef 	.word	0x08007eef
 8007e3c:	08007eef 	.word	0x08007eef
 8007e40:	08007ebb 	.word	0x08007ebb
 8007e44:	08007eef 	.word	0x08007eef
 8007e48:	08007eef 	.word	0x08007eef
 8007e4c:	08007eef 	.word	0x08007eef
 8007e50:	08007eef 	.word	0x08007eef
 8007e54:	08007eef 	.word	0x08007eef
 8007e58:	08007eef 	.word	0x08007eef
 8007e5c:	08007eef 	.word	0x08007eef
 8007e60:	08007eef 	.word	0x08007eef
 8007e64:	08007eef 	.word	0x08007eef
 8007e68:	08007eef 	.word	0x08007eef
 8007e6c:	08007eef 	.word	0x08007eef
 8007e70:	08007eef 	.word	0x08007eef
 8007e74:	08007eef 	.word	0x08007eef
 8007e78:	08007eef 	.word	0x08007eef
 8007e7c:	08007eef 	.word	0x08007eef
 8007e80:	08007ee1 	.word	0x08007ee1
 8007e84:	2b40      	cmp	r3, #64	@ 0x40
 8007e86:	d02e      	beq.n	8007ee6 <UART_SetConfig+0xa36>
 8007e88:	e031      	b.n	8007eee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e8a:	f7fd fb73 	bl	8005574 <HAL_RCC_GetPCLK1Freq>
 8007e8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e90:	e033      	b.n	8007efa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e92:	f7fd fb85 	bl	80055a0 <HAL_RCC_GetPCLK2Freq>
 8007e96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e98:	e02f      	b.n	8007efa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7fe fdb4 	bl	8006a0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ea8:	e027      	b.n	8007efa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eaa:	f107 0318 	add.w	r3, r7, #24
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fe ff00 	bl	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eb8:	e01f      	b.n	8007efa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007eba:	4b2d      	ldr	r3, [pc, #180]	@ (8007f70 <UART_SetConfig+0xac0>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 0320 	and.w	r3, r3, #32
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d009      	beq.n	8007eda <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ec6:	4b2a      	ldr	r3, [pc, #168]	@ (8007f70 <UART_SetConfig+0xac0>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	08db      	lsrs	r3, r3, #3
 8007ecc:	f003 0303 	and.w	r3, r3, #3
 8007ed0:	4a28      	ldr	r2, [pc, #160]	@ (8007f74 <UART_SetConfig+0xac4>)
 8007ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ed8:	e00f      	b.n	8007efa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007eda:	4b26      	ldr	r3, [pc, #152]	@ (8007f74 <UART_SetConfig+0xac4>)
 8007edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ede:	e00c      	b.n	8007efa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ee0:	4b25      	ldr	r3, [pc, #148]	@ (8007f78 <UART_SetConfig+0xac8>)
 8007ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ee4:	e009      	b.n	8007efa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ee6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eec:	e005      	b.n	8007efa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007ef8:	bf00      	nop
    }

    if (pclk != 0U)
 8007efa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d021      	beq.n	8007f44 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f04:	4a1d      	ldr	r2, [pc, #116]	@ (8007f7c <UART_SetConfig+0xacc>)
 8007f06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	085b      	lsrs	r3, r3, #1
 8007f18:	441a      	add	r2, r3
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f22:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f26:	2b0f      	cmp	r3, #15
 8007f28:	d909      	bls.n	8007f3e <UART_SetConfig+0xa8e>
 8007f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f30:	d205      	bcs.n	8007f3e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	60da      	str	r2, [r3, #12]
 8007f3c:	e002      	b.n	8007f44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	2200      	movs	r2, #0
 8007f58:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007f60:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3748      	adds	r7, #72	@ 0x48
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f6e:	bf00      	nop
 8007f70:	58024400 	.word	0x58024400
 8007f74:	03d09000 	.word	0x03d09000
 8007f78:	003d0900 	.word	0x003d0900
 8007f7c:	0800a5a4 	.word	0x0800a5a4

08007f80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f8c:	f003 0308 	and.w	r3, r3, #8
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00a      	beq.n	8007faa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	430a      	orrs	r2, r1
 8007fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00a      	beq.n	8007fcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	430a      	orrs	r2, r1
 8007fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd0:	f003 0302 	and.w	r3, r3, #2
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00a      	beq.n	8007fee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	430a      	orrs	r2, r1
 8007fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff2:	f003 0304 	and.w	r3, r3, #4
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00a      	beq.n	8008010 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	430a      	orrs	r2, r1
 800800e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008014:	f003 0310 	and.w	r3, r3, #16
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00a      	beq.n	8008032 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	430a      	orrs	r2, r1
 8008030:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008036:	f003 0320 	and.w	r3, r3, #32
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00a      	beq.n	8008054 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	430a      	orrs	r2, r1
 8008052:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800805c:	2b00      	cmp	r3, #0
 800805e:	d01a      	beq.n	8008096 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	430a      	orrs	r2, r1
 8008074:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800807a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800807e:	d10a      	bne.n	8008096 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	430a      	orrs	r2, r1
 8008094:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800809a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00a      	beq.n	80080b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	430a      	orrs	r2, r1
 80080b6:	605a      	str	r2, [r3, #4]
  }
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b098      	sub	sp, #96	@ 0x60
 80080c8:	af02      	add	r7, sp, #8
 80080ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080d4:	f7f9 fab8 	bl	8001648 <HAL_GetTick>
 80080d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 0308 	and.w	r3, r3, #8
 80080e4:	2b08      	cmp	r3, #8
 80080e6:	d12f      	bne.n	8008148 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080ec:	9300      	str	r3, [sp, #0]
 80080ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080f0:	2200      	movs	r2, #0
 80080f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f88e 	bl	8008218 <UART_WaitOnFlagUntilTimeout>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d022      	beq.n	8008148 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800810a:	e853 3f00 	ldrex	r3, [r3]
 800810e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008112:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008116:	653b      	str	r3, [r7, #80]	@ 0x50
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	461a      	mov	r2, r3
 800811e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008120:	647b      	str	r3, [r7, #68]	@ 0x44
 8008122:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008124:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008126:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008128:	e841 2300 	strex	r3, r2, [r1]
 800812c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800812e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1e6      	bne.n	8008102 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2220      	movs	r2, #32
 8008138:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008144:	2303      	movs	r3, #3
 8008146:	e063      	b.n	8008210 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 0304 	and.w	r3, r3, #4
 8008152:	2b04      	cmp	r3, #4
 8008154:	d149      	bne.n	80081ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008156:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800815e:	2200      	movs	r2, #0
 8008160:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 f857 	bl	8008218 <UART_WaitOnFlagUntilTimeout>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d03c      	beq.n	80081ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008178:	e853 3f00 	ldrex	r3, [r3]
 800817c:	623b      	str	r3, [r7, #32]
   return(result);
 800817e:	6a3b      	ldr	r3, [r7, #32]
 8008180:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008184:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	461a      	mov	r2, r3
 800818c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800818e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008190:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008192:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008194:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008196:	e841 2300 	strex	r3, r2, [r1]
 800819a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800819c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d1e6      	bne.n	8008170 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	3308      	adds	r3, #8
 80081a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	e853 3f00 	ldrex	r3, [r3]
 80081b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f023 0301 	bic.w	r3, r3, #1
 80081b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	3308      	adds	r3, #8
 80081c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081c2:	61fa      	str	r2, [r7, #28]
 80081c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c6:	69b9      	ldr	r1, [r7, #24]
 80081c8:	69fa      	ldr	r2, [r7, #28]
 80081ca:	e841 2300 	strex	r3, r2, [r1]
 80081ce:	617b      	str	r3, [r7, #20]
   return(result);
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1e5      	bne.n	80081a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2220      	movs	r2, #32
 80081da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e012      	b.n	8008210 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2220      	movs	r2, #32
 80081ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2220      	movs	r2, #32
 80081f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3758      	adds	r7, #88	@ 0x58
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	603b      	str	r3, [r7, #0]
 8008224:	4613      	mov	r3, r2
 8008226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008228:	e04f      	b.n	80082ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008230:	d04b      	beq.n	80082ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008232:	f7f9 fa09 	bl	8001648 <HAL_GetTick>
 8008236:	4602      	mov	r2, r0
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	69ba      	ldr	r2, [r7, #24]
 800823e:	429a      	cmp	r2, r3
 8008240:	d302      	bcc.n	8008248 <UART_WaitOnFlagUntilTimeout+0x30>
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d101      	bne.n	800824c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008248:	2303      	movs	r3, #3
 800824a:	e04e      	b.n	80082ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 0304 	and.w	r3, r3, #4
 8008256:	2b00      	cmp	r3, #0
 8008258:	d037      	beq.n	80082ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	2b80      	cmp	r3, #128	@ 0x80
 800825e:	d034      	beq.n	80082ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	2b40      	cmp	r3, #64	@ 0x40
 8008264:	d031      	beq.n	80082ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	69db      	ldr	r3, [r3, #28]
 800826c:	f003 0308 	and.w	r3, r3, #8
 8008270:	2b08      	cmp	r3, #8
 8008272:	d110      	bne.n	8008296 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2208      	movs	r2, #8
 800827a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f000 f95b 	bl	8008538 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2208      	movs	r2, #8
 8008286:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e029      	b.n	80082ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	69db      	ldr	r3, [r3, #28]
 800829c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082a4:	d111      	bne.n	80082ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80082ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f000 f941 	bl	8008538 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2220      	movs	r2, #32
 80082ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80082c6:	2303      	movs	r3, #3
 80082c8:	e00f      	b.n	80082ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	69da      	ldr	r2, [r3, #28]
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	4013      	ands	r3, r2
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	bf0c      	ite	eq
 80082da:	2301      	moveq	r3, #1
 80082dc:	2300      	movne	r3, #0
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	461a      	mov	r2, r3
 80082e2:	79fb      	ldrb	r3, [r7, #7]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d0a0      	beq.n	800822a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
	...

080082f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b0a3      	sub	sp, #140	@ 0x8c
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	4613      	mov	r3, r2
 8008300:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	88fa      	ldrh	r2, [r7, #6]
 800830c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	88fa      	ldrh	r2, [r7, #6]
 8008314:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008326:	d10e      	bne.n	8008346 <UART_Start_Receive_IT+0x52>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d105      	bne.n	800833c <UART_Start_Receive_IT+0x48>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008336:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800833a:	e02d      	b.n	8008398 <UART_Start_Receive_IT+0xa4>
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	22ff      	movs	r2, #255	@ 0xff
 8008340:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008344:	e028      	b.n	8008398 <UART_Start_Receive_IT+0xa4>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d10d      	bne.n	800836a <UART_Start_Receive_IT+0x76>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d104      	bne.n	8008360 <UART_Start_Receive_IT+0x6c>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	22ff      	movs	r2, #255	@ 0xff
 800835a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800835e:	e01b      	b.n	8008398 <UART_Start_Receive_IT+0xa4>
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	227f      	movs	r2, #127	@ 0x7f
 8008364:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008368:	e016      	b.n	8008398 <UART_Start_Receive_IT+0xa4>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008372:	d10d      	bne.n	8008390 <UART_Start_Receive_IT+0x9c>
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d104      	bne.n	8008386 <UART_Start_Receive_IT+0x92>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	227f      	movs	r2, #127	@ 0x7f
 8008380:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008384:	e008      	b.n	8008398 <UART_Start_Receive_IT+0xa4>
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	223f      	movs	r2, #63	@ 0x3f
 800838a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800838e:	e003      	b.n	8008398 <UART_Start_Receive_IT+0xa4>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2222      	movs	r2, #34	@ 0x22
 80083a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	3308      	adds	r3, #8
 80083ae:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083b2:	e853 3f00 	ldrex	r3, [r3]
 80083b6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80083b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80083ba:	f043 0301 	orr.w	r3, r3, #1
 80083be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	3308      	adds	r3, #8
 80083c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80083cc:	673a      	str	r2, [r7, #112]	@ 0x70
 80083ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80083d2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80083d4:	e841 2300 	strex	r3, r2, [r1]
 80083d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80083da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1e3      	bne.n	80083a8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083e8:	d14f      	bne.n	800848a <UART_Start_Receive_IT+0x196>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80083f0:	88fa      	ldrh	r2, [r7, #6]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d349      	bcc.n	800848a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083fe:	d107      	bne.n	8008410 <UART_Start_Receive_IT+0x11c>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d103      	bne.n	8008410 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	4a47      	ldr	r2, [pc, #284]	@ (8008528 <UART_Start_Receive_IT+0x234>)
 800840c:	675a      	str	r2, [r3, #116]	@ 0x74
 800840e:	e002      	b.n	8008416 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	4a46      	ldr	r2, [pc, #280]	@ (800852c <UART_Start_Receive_IT+0x238>)
 8008414:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d01a      	beq.n	8008454 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008424:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008426:	e853 3f00 	ldrex	r3, [r3]
 800842a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800842c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800842e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008432:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	461a      	mov	r2, r3
 800843c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008440:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008442:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008444:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008446:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008448:	e841 2300 	strex	r3, r2, [r1]
 800844c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800844e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1e4      	bne.n	800841e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	3308      	adds	r3, #8
 800845a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800845e:	e853 3f00 	ldrex	r3, [r3]
 8008462:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008466:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800846a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3308      	adds	r3, #8
 8008472:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008474:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008476:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008478:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800847a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800847c:	e841 2300 	strex	r3, r2, [r1]
 8008480:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008482:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1e5      	bne.n	8008454 <UART_Start_Receive_IT+0x160>
 8008488:	e046      	b.n	8008518 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008492:	d107      	bne.n	80084a4 <UART_Start_Receive_IT+0x1b0>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d103      	bne.n	80084a4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4a24      	ldr	r2, [pc, #144]	@ (8008530 <UART_Start_Receive_IT+0x23c>)
 80084a0:	675a      	str	r2, [r3, #116]	@ 0x74
 80084a2:	e002      	b.n	80084aa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	4a23      	ldr	r2, [pc, #140]	@ (8008534 <UART_Start_Receive_IT+0x240>)
 80084a8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d019      	beq.n	80084e6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ba:	e853 3f00 	ldrex	r3, [r3]
 80084be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80084c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	461a      	mov	r2, r3
 80084ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80084d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80084d2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80084d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084d8:	e841 2300 	strex	r3, r2, [r1]
 80084dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80084de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1e6      	bne.n	80084b2 <UART_Start_Receive_IT+0x1be>
 80084e4:	e018      	b.n	8008518 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	e853 3f00 	ldrex	r3, [r3]
 80084f2:	613b      	str	r3, [r7, #16]
   return(result);
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	f043 0320 	orr.w	r3, r3, #32
 80084fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	461a      	mov	r2, r3
 8008502:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008504:	623b      	str	r3, [r7, #32]
 8008506:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008508:	69f9      	ldr	r1, [r7, #28]
 800850a:	6a3a      	ldr	r2, [r7, #32]
 800850c:	e841 2300 	strex	r3, r2, [r1]
 8008510:	61bb      	str	r3, [r7, #24]
   return(result);
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d1e6      	bne.n	80084e6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	378c      	adds	r7, #140	@ 0x8c
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	08009019 	.word	0x08009019
 800852c:	08008cb9 	.word	0x08008cb9
 8008530:	08008b01 	.word	0x08008b01
 8008534:	08008949 	.word	0x08008949

08008538 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008538:	b480      	push	{r7}
 800853a:	b095      	sub	sp, #84	@ 0x54
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008548:	e853 3f00 	ldrex	r3, [r3]
 800854c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800854e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008550:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008554:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	461a      	mov	r2, r3
 800855c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800855e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008560:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008562:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008564:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008566:	e841 2300 	strex	r3, r2, [r1]
 800856a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800856c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1e6      	bne.n	8008540 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	3308      	adds	r3, #8
 8008578:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857a:	6a3b      	ldr	r3, [r7, #32]
 800857c:	e853 3f00 	ldrex	r3, [r3]
 8008580:	61fb      	str	r3, [r7, #28]
   return(result);
 8008582:	69fa      	ldr	r2, [r7, #28]
 8008584:	4b1e      	ldr	r3, [pc, #120]	@ (8008600 <UART_EndRxTransfer+0xc8>)
 8008586:	4013      	ands	r3, r2
 8008588:	64bb      	str	r3, [r7, #72]	@ 0x48
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	3308      	adds	r3, #8
 8008590:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008592:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008594:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008596:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008598:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800859a:	e841 2300 	strex	r3, r2, [r1]
 800859e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80085a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1e5      	bne.n	8008572 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d118      	bne.n	80085e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	e853 3f00 	ldrex	r3, [r3]
 80085ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	f023 0310 	bic.w	r3, r3, #16
 80085c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	461a      	mov	r2, r3
 80085ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085cc:	61bb      	str	r3, [r7, #24]
 80085ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d0:	6979      	ldr	r1, [r7, #20]
 80085d2:	69ba      	ldr	r2, [r7, #24]
 80085d4:	e841 2300 	strex	r3, r2, [r1]
 80085d8:	613b      	str	r3, [r7, #16]
   return(result);
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1e6      	bne.n	80085ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2220      	movs	r2, #32
 80085e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80085f4:	bf00      	nop
 80085f6:	3754      	adds	r7, #84	@ 0x54
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	effffffe 	.word	0xeffffffe

08008604 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008604:	b480      	push	{r7}
 8008606:	b08f      	sub	sp, #60	@ 0x3c
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008612:	2b21      	cmp	r3, #33	@ 0x21
 8008614:	d14c      	bne.n	80086b0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800861c:	b29b      	uxth	r3, r3
 800861e:	2b00      	cmp	r3, #0
 8008620:	d132      	bne.n	8008688 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008628:	6a3b      	ldr	r3, [r7, #32]
 800862a:	e853 3f00 	ldrex	r3, [r3]
 800862e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008636:	637b      	str	r3, [r7, #52]	@ 0x34
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	461a      	mov	r2, r3
 800863e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008640:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008642:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008644:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008646:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008648:	e841 2300 	strex	r3, r2, [r1]
 800864c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800864e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1e6      	bne.n	8008622 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	e853 3f00 	ldrex	r3, [r3]
 8008660:	60bb      	str	r3, [r7, #8]
   return(result);
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008668:	633b      	str	r3, [r7, #48]	@ 0x30
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	461a      	mov	r2, r3
 8008670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008672:	61bb      	str	r3, [r7, #24]
 8008674:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008676:	6979      	ldr	r1, [r7, #20]
 8008678:	69ba      	ldr	r2, [r7, #24]
 800867a:	e841 2300 	strex	r3, r2, [r1]
 800867e:	613b      	str	r3, [r7, #16]
   return(result);
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1e6      	bne.n	8008654 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008686:	e013      	b.n	80086b0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800868c:	781a      	ldrb	r2, [r3, #0]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008698:	1c5a      	adds	r2, r3, #1
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	3b01      	subs	r3, #1
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80086b0:	bf00      	nop
 80086b2:	373c      	adds	r7, #60	@ 0x3c
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80086bc:	b480      	push	{r7}
 80086be:	b091      	sub	sp, #68	@ 0x44
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086ca:	2b21      	cmp	r3, #33	@ 0x21
 80086cc:	d151      	bne.n	8008772 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d132      	bne.n	8008740 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e2:	e853 3f00 	ldrex	r3, [r3]
 80086e6:	623b      	str	r3, [r7, #32]
   return(result);
 80086e8:	6a3b      	ldr	r3, [r7, #32]
 80086ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	461a      	mov	r2, r3
 80086f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80086fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008700:	e841 2300 	strex	r3, r2, [r1]
 8008704:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1e6      	bne.n	80086da <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	e853 3f00 	ldrex	r3, [r3]
 8008718:	60fb      	str	r3, [r7, #12]
   return(result);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008720:	637b      	str	r3, [r7, #52]	@ 0x34
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	461a      	mov	r2, r3
 8008728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800872a:	61fb      	str	r3, [r7, #28]
 800872c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872e:	69b9      	ldr	r1, [r7, #24]
 8008730:	69fa      	ldr	r2, [r7, #28]
 8008732:	e841 2300 	strex	r3, r2, [r1]
 8008736:	617b      	str	r3, [r7, #20]
   return(result);
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1e6      	bne.n	800870c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800873e:	e018      	b.n	8008772 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008744:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008746:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008748:	881b      	ldrh	r3, [r3, #0]
 800874a:	461a      	mov	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008754:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800875a:	1c9a      	adds	r2, r3, #2
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008766:	b29b      	uxth	r3, r3
 8008768:	3b01      	subs	r3, #1
 800876a:	b29a      	uxth	r2, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8008772:	bf00      	nop
 8008774:	3744      	adds	r7, #68	@ 0x44
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800877e:	b480      	push	{r7}
 8008780:	b091      	sub	sp, #68	@ 0x44
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800878c:	2b21      	cmp	r3, #33	@ 0x21
 800878e:	d160      	bne.n	8008852 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008796:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008798:	e057      	b.n	800884a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d133      	bne.n	800880e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	3308      	adds	r3, #8
 80087ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b0:	e853 3f00 	ldrex	r3, [r3]
 80087b4:	623b      	str	r3, [r7, #32]
   return(result);
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80087bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	3308      	adds	r3, #8
 80087c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80087c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087ce:	e841 2300 	strex	r3, r2, [r1]
 80087d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1e5      	bne.n	80087a6 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	e853 3f00 	ldrex	r3, [r3]
 80087e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	461a      	mov	r2, r3
 80087f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087f8:	61fb      	str	r3, [r7, #28]
 80087fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fc:	69b9      	ldr	r1, [r7, #24]
 80087fe:	69fa      	ldr	r2, [r7, #28]
 8008800:	e841 2300 	strex	r3, r2, [r1]
 8008804:	617b      	str	r3, [r7, #20]
   return(result);
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1e6      	bne.n	80087da <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800880c:	e021      	b.n	8008852 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	69db      	ldr	r3, [r3, #28]
 8008814:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008818:	2b00      	cmp	r3, #0
 800881a:	d013      	beq.n	8008844 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008820:	781a      	ldrb	r2, [r3, #0]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800882c:	1c5a      	adds	r2, r3, #1
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008838:	b29b      	uxth	r3, r3
 800883a:	3b01      	subs	r3, #1
 800883c:	b29a      	uxth	r2, r3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008844:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008846:	3b01      	subs	r3, #1
 8008848:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800884a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1a4      	bne.n	800879a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008850:	e7ff      	b.n	8008852 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8008852:	bf00      	nop
 8008854:	3744      	adds	r7, #68	@ 0x44
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr

0800885e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800885e:	b480      	push	{r7}
 8008860:	b091      	sub	sp, #68	@ 0x44
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800886c:	2b21      	cmp	r3, #33	@ 0x21
 800886e:	d165      	bne.n	800893c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008876:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008878:	e05c      	b.n	8008934 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008880:	b29b      	uxth	r3, r3
 8008882:	2b00      	cmp	r3, #0
 8008884:	d133      	bne.n	80088ee <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	3308      	adds	r3, #8
 800888c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888e:	6a3b      	ldr	r3, [r7, #32]
 8008890:	e853 3f00 	ldrex	r3, [r3]
 8008894:	61fb      	str	r3, [r7, #28]
   return(result);
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800889c:	637b      	str	r3, [r7, #52]	@ 0x34
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	3308      	adds	r3, #8
 80088a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80088a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80088a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088ae:	e841 2300 	strex	r3, r2, [r1]
 80088b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80088b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1e5      	bne.n	8008886 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	e853 3f00 	ldrex	r3, [r3]
 80088c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	461a      	mov	r2, r3
 80088d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d8:	61bb      	str	r3, [r7, #24]
 80088da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088dc:	6979      	ldr	r1, [r7, #20]
 80088de:	69ba      	ldr	r2, [r7, #24]
 80088e0:	e841 2300 	strex	r3, r2, [r1]
 80088e4:	613b      	str	r3, [r7, #16]
   return(result);
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1e6      	bne.n	80088ba <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80088ec:	e026      	b.n	800893c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	69db      	ldr	r3, [r3, #28]
 80088f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d018      	beq.n	800892e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008900:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008904:	881b      	ldrh	r3, [r3, #0]
 8008906:	461a      	mov	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008910:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008916:	1c9a      	adds	r2, r3, #2
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008922:	b29b      	uxth	r3, r3
 8008924:	3b01      	subs	r3, #1
 8008926:	b29a      	uxth	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800892e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008930:	3b01      	subs	r3, #1
 8008932:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008934:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008936:	2b00      	cmp	r3, #0
 8008938:	d19f      	bne.n	800887a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800893a:	e7ff      	b.n	800893c <UART_TxISR_16BIT_FIFOEN+0xde>
 800893c:	bf00      	nop
 800893e:	3744      	adds	r7, #68	@ 0x44
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b09c      	sub	sp, #112	@ 0x70
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008956:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008960:	2b22      	cmp	r3, #34	@ 0x22
 8008962:	f040 80be 	bne.w	8008ae2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800896c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008970:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008974:	b2d9      	uxtb	r1, r3
 8008976:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800897a:	b2da      	uxtb	r2, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008980:	400a      	ands	r2, r1
 8008982:	b2d2      	uxtb	r2, r2
 8008984:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800898a:	1c5a      	adds	r2, r3, #1
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008996:	b29b      	uxth	r3, r3
 8008998:	3b01      	subs	r3, #1
 800899a:	b29a      	uxth	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f040 80a1 	bne.w	8008af2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089b8:	e853 3f00 	ldrex	r3, [r3]
 80089bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80089be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	461a      	mov	r2, r3
 80089cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80089ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80089d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80089d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80089d6:	e841 2300 	strex	r3, r2, [r1]
 80089da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80089dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d1e6      	bne.n	80089b0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	3308      	adds	r3, #8
 80089e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ec:	e853 3f00 	ldrex	r3, [r3]
 80089f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80089f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089f4:	f023 0301 	bic.w	r3, r3, #1
 80089f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	3308      	adds	r3, #8
 8008a00:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008a02:	647a      	str	r2, [r7, #68]	@ 0x44
 8008a04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a0a:	e841 2300 	strex	r3, r2, [r1]
 8008a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1e5      	bne.n	80089e2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2220      	movs	r2, #32
 8008a1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a33      	ldr	r2, [pc, #204]	@ (8008afc <UART_RxISR_8BIT+0x1b4>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d01f      	beq.n	8008a74 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d018      	beq.n	8008a74 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4a:	e853 3f00 	ldrex	r3, [r3]
 8008a4e:	623b      	str	r3, [r7, #32]
   return(result);
 8008a50:	6a3b      	ldr	r3, [r7, #32]
 8008a52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008a56:	663b      	str	r3, [r7, #96]	@ 0x60
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a60:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a62:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a68:	e841 2300 	strex	r3, r2, [r1]
 8008a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d1e6      	bne.n	8008a42 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d12e      	bne.n	8008ada <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	e853 3f00 	ldrex	r3, [r3]
 8008a8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f023 0310 	bic.w	r3, r3, #16
 8008a96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008aa0:	61fb      	str	r3, [r7, #28]
 8008aa2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa4:	69b9      	ldr	r1, [r7, #24]
 8008aa6:	69fa      	ldr	r2, [r7, #28]
 8008aa8:	e841 2300 	strex	r3, r2, [r1]
 8008aac:	617b      	str	r3, [r7, #20]
   return(result);
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1e6      	bne.n	8008a82 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	69db      	ldr	r3, [r3, #28]
 8008aba:	f003 0310 	and.w	r3, r3, #16
 8008abe:	2b10      	cmp	r3, #16
 8008ac0:	d103      	bne.n	8008aca <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	2210      	movs	r2, #16
 8008ac8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7fe fce0 	bl	8007498 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ad8:	e00b      	b.n	8008af2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f7f8 f974 	bl	8000dc8 <HAL_UART_RxCpltCallback>
}
 8008ae0:	e007      	b.n	8008af2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	699a      	ldr	r2, [r3, #24]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f042 0208 	orr.w	r2, r2, #8
 8008af0:	619a      	str	r2, [r3, #24]
}
 8008af2:	bf00      	nop
 8008af4:	3770      	adds	r7, #112	@ 0x70
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	58000c00 	.word	0x58000c00

08008b00 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b09c      	sub	sp, #112	@ 0x70
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008b0e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b18:	2b22      	cmp	r3, #34	@ 0x22
 8008b1a:	f040 80be 	bne.w	8008c9a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b24:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b2c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008b2e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008b32:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008b36:	4013      	ands	r3, r2
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008b3c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b42:	1c9a      	adds	r2, r3, #2
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	3b01      	subs	r3, #1
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f040 80a1 	bne.w	8008caa <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b70:	e853 3f00 	ldrex	r3, [r3]
 8008b74:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008b76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b7c:	667b      	str	r3, [r7, #100]	@ 0x64
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	461a      	mov	r2, r3
 8008b84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b86:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b88:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008b8c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008b8e:	e841 2300 	strex	r3, r2, [r1]
 8008b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008b94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d1e6      	bne.n	8008b68 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	3308      	adds	r3, #8
 8008ba0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ba4:	e853 3f00 	ldrex	r3, [r3]
 8008ba8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bac:	f023 0301 	bic.w	r3, r3, #1
 8008bb0:	663b      	str	r3, [r7, #96]	@ 0x60
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	3308      	adds	r3, #8
 8008bb8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008bba:	643a      	str	r2, [r7, #64]	@ 0x40
 8008bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bbe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008bc0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008bc2:	e841 2300 	strex	r3, r2, [r1]
 8008bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1e5      	bne.n	8008b9a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2220      	movs	r2, #32
 8008bd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a33      	ldr	r2, [pc, #204]	@ (8008cb4 <UART_RxISR_16BIT+0x1b4>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d01f      	beq.n	8008c2c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d018      	beq.n	8008c2c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c00:	6a3b      	ldr	r3, [r7, #32]
 8008c02:	e853 3f00 	ldrex	r3, [r3]
 8008c06:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008c0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	461a      	mov	r2, r3
 8008c16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c1a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c20:	e841 2300 	strex	r3, r2, [r1]
 8008c24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1e6      	bne.n	8008bfa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d12e      	bne.n	8008c92 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	e853 3f00 	ldrex	r3, [r3]
 8008c46:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	f023 0310 	bic.w	r3, r3, #16
 8008c4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	461a      	mov	r2, r3
 8008c56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c58:	61bb      	str	r3, [r7, #24]
 8008c5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5c:	6979      	ldr	r1, [r7, #20]
 8008c5e:	69ba      	ldr	r2, [r7, #24]
 8008c60:	e841 2300 	strex	r3, r2, [r1]
 8008c64:	613b      	str	r3, [r7, #16]
   return(result);
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d1e6      	bne.n	8008c3a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	69db      	ldr	r3, [r3, #28]
 8008c72:	f003 0310 	and.w	r3, r3, #16
 8008c76:	2b10      	cmp	r3, #16
 8008c78:	d103      	bne.n	8008c82 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2210      	movs	r2, #16
 8008c80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008c88:	4619      	mov	r1, r3
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f7fe fc04 	bl	8007498 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c90:	e00b      	b.n	8008caa <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7f8 f898 	bl	8000dc8 <HAL_UART_RxCpltCallback>
}
 8008c98:	e007      	b.n	8008caa <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	699a      	ldr	r2, [r3, #24]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f042 0208 	orr.w	r2, r2, #8
 8008ca8:	619a      	str	r2, [r3, #24]
}
 8008caa:	bf00      	nop
 8008cac:	3770      	adds	r7, #112	@ 0x70
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	58000c00 	.word	0x58000c00

08008cb8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b0ac      	sub	sp, #176	@ 0xb0
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008cc6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	69db      	ldr	r3, [r3, #28]
 8008cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008cee:	2b22      	cmp	r3, #34	@ 0x22
 8008cf0:	f040 8180 	bne.w	8008ff4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008cfa:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008cfe:	e123      	b.n	8008f48 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d06:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008d0a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008d0e:	b2d9      	uxtb	r1, r3
 8008d10:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008d14:	b2da      	uxtb	r2, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d1a:	400a      	ands	r2, r1
 8008d1c:	b2d2      	uxtb	r2, r2
 8008d1e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d24:	1c5a      	adds	r2, r3, #1
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	3b01      	subs	r3, #1
 8008d34:	b29a      	uxth	r2, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	69db      	ldr	r3, [r3, #28]
 8008d42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008d46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d4a:	f003 0307 	and.w	r3, r3, #7
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d053      	beq.n	8008dfa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d56:	f003 0301 	and.w	r3, r3, #1
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d011      	beq.n	8008d82 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008d5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00b      	beq.n	8008d82 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d78:	f043 0201 	orr.w	r2, r3, #1
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d86:	f003 0302 	and.w	r3, r3, #2
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d011      	beq.n	8008db2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008d8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008d92:	f003 0301 	and.w	r3, r3, #1
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00b      	beq.n	8008db2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2202      	movs	r2, #2
 8008da0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008da8:	f043 0204 	orr.w	r2, r3, #4
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008db2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008db6:	f003 0304 	and.w	r3, r3, #4
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d011      	beq.n	8008de2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008dbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008dc2:	f003 0301 	and.w	r3, r3, #1
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00b      	beq.n	8008de2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2204      	movs	r2, #4
 8008dd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dd8:	f043 0202 	orr.w	r2, r3, #2
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d006      	beq.n	8008dfa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f7fe fb49 	bl	8007484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f040 80a0 	bne.w	8008f48 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e10:	e853 3f00 	ldrex	r3, [r3]
 8008e14:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008e16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	461a      	mov	r2, r3
 8008e26:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008e2c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008e30:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008e32:	e841 2300 	strex	r3, r2, [r1]
 8008e36:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008e38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1e4      	bne.n	8008e08 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	3308      	adds	r3, #8
 8008e44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e48:	e853 3f00 	ldrex	r3, [r3]
 8008e4c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008e4e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e50:	4b6e      	ldr	r3, [pc, #440]	@ (800900c <UART_RxISR_8BIT_FIFOEN+0x354>)
 8008e52:	4013      	ands	r3, r2
 8008e54:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	3308      	adds	r3, #8
 8008e5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008e62:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008e64:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e66:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008e68:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008e6a:	e841 2300 	strex	r3, r2, [r1]
 8008e6e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008e70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d1e3      	bne.n	8008e3e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2220      	movs	r2, #32
 8008e7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a60      	ldr	r2, [pc, #384]	@ (8009010 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d021      	beq.n	8008ed8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d01a      	beq.n	8008ed8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008eaa:	e853 3f00 	ldrex	r3, [r3]
 8008eae:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008eb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008eb2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008eb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008ec4:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ec6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008eca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008ecc:	e841 2300 	strex	r3, r2, [r1]
 8008ed0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008ed2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1e4      	bne.n	8008ea2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d130      	bne.n	8008f42 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eee:	e853 3f00 	ldrex	r3, [r3]
 8008ef2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef6:	f023 0310 	bic.w	r3, r3, #16
 8008efa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	461a      	mov	r2, r3
 8008f04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f08:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f0a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f10:	e841 2300 	strex	r3, r2, [r1]
 8008f14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d1e4      	bne.n	8008ee6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	69db      	ldr	r3, [r3, #28]
 8008f22:	f003 0310 	and.w	r3, r3, #16
 8008f26:	2b10      	cmp	r3, #16
 8008f28:	d103      	bne.n	8008f32 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2210      	movs	r2, #16
 8008f30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f38:	4619      	mov	r1, r3
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f7fe faac 	bl	8007498 <HAL_UARTEx_RxEventCallback>
 8008f40:	e002      	b.n	8008f48 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f7f7 ff40 	bl	8000dc8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f48:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d006      	beq.n	8008f5e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8008f50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f54:	f003 0320 	and.w	r3, r3, #32
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f47f aed1 	bne.w	8008d00 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f64:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008f68:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d049      	beq.n	8009004 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008f76:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d242      	bcs.n	8009004 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	3308      	adds	r3, #8
 8008f84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f86:	6a3b      	ldr	r3, [r7, #32]
 8008f88:	e853 3f00 	ldrex	r3, [r3]
 8008f8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	3308      	adds	r3, #8
 8008f9e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008fa2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008fa8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008faa:	e841 2300 	strex	r3, r2, [r1]
 8008fae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1e3      	bne.n	8008f7e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a16      	ldr	r2, [pc, #88]	@ (8009014 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008fba:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	e853 3f00 	ldrex	r3, [r3]
 8008fc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	f043 0320 	orr.w	r3, r3, #32
 8008fd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	461a      	mov	r2, r3
 8008fda:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008fde:	61bb      	str	r3, [r7, #24]
 8008fe0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe2:	6979      	ldr	r1, [r7, #20]
 8008fe4:	69ba      	ldr	r2, [r7, #24]
 8008fe6:	e841 2300 	strex	r3, r2, [r1]
 8008fea:	613b      	str	r3, [r7, #16]
   return(result);
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d1e4      	bne.n	8008fbc <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ff2:	e007      	b.n	8009004 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	699a      	ldr	r2, [r3, #24]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f042 0208 	orr.w	r2, r2, #8
 8009002:	619a      	str	r2, [r3, #24]
}
 8009004:	bf00      	nop
 8009006:	37b0      	adds	r7, #176	@ 0xb0
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	effffffe 	.word	0xeffffffe
 8009010:	58000c00 	.word	0x58000c00
 8009014:	08008949 	.word	0x08008949

08009018 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b0ae      	sub	sp, #184	@ 0xb8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009026:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	69db      	ldr	r3, [r3, #28]
 8009030:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800904e:	2b22      	cmp	r3, #34	@ 0x22
 8009050:	f040 8184 	bne.w	800935c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800905a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800905e:	e127      	b.n	80092b0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009066:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800906e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009072:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009076:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800907a:	4013      	ands	r3, r2
 800907c:	b29a      	uxth	r2, r3
 800907e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009082:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009088:	1c9a      	adds	r2, r3, #2
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009094:	b29b      	uxth	r3, r3
 8009096:	3b01      	subs	r3, #1
 8009098:	b29a      	uxth	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	69db      	ldr	r3, [r3, #28]
 80090a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80090aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80090ae:	f003 0307 	and.w	r3, r3, #7
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d053      	beq.n	800915e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80090b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80090ba:	f003 0301 	and.w	r3, r3, #1
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d011      	beq.n	80090e6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80090c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00b      	beq.n	80090e6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2201      	movs	r2, #1
 80090d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090dc:	f043 0201 	orr.w	r2, r3, #1
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80090ea:	f003 0302 	and.w	r3, r3, #2
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d011      	beq.n	8009116 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80090f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80090f6:	f003 0301 	and.w	r3, r3, #1
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d00b      	beq.n	8009116 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2202      	movs	r2, #2
 8009104:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800910c:	f043 0204 	orr.w	r2, r3, #4
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009116:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800911a:	f003 0304 	and.w	r3, r3, #4
 800911e:	2b00      	cmp	r3, #0
 8009120:	d011      	beq.n	8009146 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009122:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009126:	f003 0301 	and.w	r3, r3, #1
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00b      	beq.n	8009146 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2204      	movs	r2, #4
 8009134:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800913c:	f043 0202 	orr.w	r2, r3, #2
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800914c:	2b00      	cmp	r3, #0
 800914e:	d006      	beq.n	800915e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f7fe f997 	bl	8007484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009164:	b29b      	uxth	r3, r3
 8009166:	2b00      	cmp	r3, #0
 8009168:	f040 80a2 	bne.w	80092b0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009172:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009174:	e853 3f00 	ldrex	r3, [r3]
 8009178:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800917a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800917c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009180:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	461a      	mov	r2, r3
 800918a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800918e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009192:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009194:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009196:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800919a:	e841 2300 	strex	r3, r2, [r1]
 800919e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80091a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d1e2      	bne.n	800916c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	3308      	adds	r3, #8
 80091ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80091b0:	e853 3f00 	ldrex	r3, [r3]
 80091b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80091b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80091b8:	4b6e      	ldr	r3, [pc, #440]	@ (8009374 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80091ba:	4013      	ands	r3, r2
 80091bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	3308      	adds	r3, #8
 80091c6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80091ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80091cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80091d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80091d2:	e841 2300 	strex	r3, r2, [r1]
 80091d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80091d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d1e3      	bne.n	80091a6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2220      	movs	r2, #32
 80091e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a60      	ldr	r2, [pc, #384]	@ (8009378 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d021      	beq.n	8009240 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009206:	2b00      	cmp	r3, #0
 8009208:	d01a      	beq.n	8009240 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009210:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009212:	e853 3f00 	ldrex	r3, [r3]
 8009216:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009218:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800921a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800921e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	461a      	mov	r2, r3
 8009228:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800922c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800922e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009230:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009232:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009234:	e841 2300 	strex	r3, r2, [r1]
 8009238:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800923a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1e4      	bne.n	800920a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009244:	2b01      	cmp	r3, #1
 8009246:	d130      	bne.n	80092aa <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009256:	e853 3f00 	ldrex	r3, [r3]
 800925a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800925c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800925e:	f023 0310 	bic.w	r3, r3, #16
 8009262:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	461a      	mov	r2, r3
 800926c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009270:	647b      	str	r3, [r7, #68]	@ 0x44
 8009272:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009274:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009276:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009278:	e841 2300 	strex	r3, r2, [r1]
 800927c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800927e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009280:	2b00      	cmp	r3, #0
 8009282:	d1e4      	bne.n	800924e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	69db      	ldr	r3, [r3, #28]
 800928a:	f003 0310 	and.w	r3, r3, #16
 800928e:	2b10      	cmp	r3, #16
 8009290:	d103      	bne.n	800929a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2210      	movs	r2, #16
 8009298:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80092a0:	4619      	mov	r1, r3
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f7fe f8f8 	bl	8007498 <HAL_UARTEx_RxEventCallback>
 80092a8:	e002      	b.n	80092b0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7f7 fd8c 	bl	8000dc8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80092b0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d006      	beq.n	80092c6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80092b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80092bc:	f003 0320 	and.w	r3, r3, #32
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f47f aecd 	bne.w	8009060 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092cc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80092d0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d049      	beq.n	800936c <UART_RxISR_16BIT_FIFOEN+0x354>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80092de:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d242      	bcs.n	800936c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	3308      	adds	r3, #8
 80092ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f0:	e853 3f00 	ldrex	r3, [r3]
 80092f4:	623b      	str	r3, [r7, #32]
   return(result);
 80092f6:	6a3b      	ldr	r3, [r7, #32]
 80092f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	3308      	adds	r3, #8
 8009306:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800930a:	633a      	str	r2, [r7, #48]	@ 0x30
 800930c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009312:	e841 2300 	strex	r3, r2, [r1]
 8009316:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1e3      	bne.n	80092e6 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4a16      	ldr	r2, [pc, #88]	@ (800937c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009322:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	e853 3f00 	ldrex	r3, [r3]
 8009330:	60fb      	str	r3, [r7, #12]
   return(result);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f043 0320 	orr.w	r3, r3, #32
 8009338:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	461a      	mov	r2, r3
 8009342:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009346:	61fb      	str	r3, [r7, #28]
 8009348:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934a:	69b9      	ldr	r1, [r7, #24]
 800934c:	69fa      	ldr	r2, [r7, #28]
 800934e:	e841 2300 	strex	r3, r2, [r1]
 8009352:	617b      	str	r3, [r7, #20]
   return(result);
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1e4      	bne.n	8009324 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800935a:	e007      	b.n	800936c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	699a      	ldr	r2, [r3, #24]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f042 0208 	orr.w	r2, r2, #8
 800936a:	619a      	str	r2, [r3, #24]
}
 800936c:	bf00      	nop
 800936e:	37b8      	adds	r7, #184	@ 0xb8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}
 8009374:	effffffe 	.word	0xeffffffe
 8009378:	58000c00 	.word	0x58000c00
 800937c:	08008b01 	.word	0x08008b01

08009380 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009380:	b480      	push	{r7}
 8009382:	b085      	sub	sp, #20
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800938e:	2b01      	cmp	r3, #1
 8009390:	d101      	bne.n	8009396 <HAL_UARTEx_DisableFifoMode+0x16>
 8009392:	2302      	movs	r3, #2
 8009394:	e027      	b.n	80093e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2201      	movs	r2, #1
 800939a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2224      	movs	r2, #36	@ 0x24
 80093a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f022 0201 	bic.w	r2, r2, #1
 80093bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80093c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68fa      	ldr	r2, [r7, #12]
 80093d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2220      	movs	r2, #32
 80093d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3714      	adds	r7, #20
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr

080093f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b084      	sub	sp, #16
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
 80093fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009402:	2b01      	cmp	r3, #1
 8009404:	d101      	bne.n	800940a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009406:	2302      	movs	r3, #2
 8009408:	e02d      	b.n	8009466 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2201      	movs	r2, #1
 800940e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2224      	movs	r2, #36	@ 0x24
 8009416:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f022 0201 	bic.w	r2, r2, #1
 8009430:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	683a      	ldr	r2, [r7, #0]
 8009442:	430a      	orrs	r2, r1
 8009444:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 f850 	bl	80094ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2220      	movs	r2, #32
 8009458:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b084      	sub	sp, #16
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
 8009476:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800947e:	2b01      	cmp	r3, #1
 8009480:	d101      	bne.n	8009486 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009482:	2302      	movs	r3, #2
 8009484:	e02d      	b.n	80094e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2201      	movs	r2, #1
 800948a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2224      	movs	r2, #36	@ 0x24
 8009492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f022 0201 	bic.w	r2, r2, #1
 80094ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	683a      	ldr	r2, [r7, #0]
 80094be:	430a      	orrs	r2, r1
 80094c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f812 	bl	80094ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2220      	movs	r2, #32
 80094d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094e0:	2300      	movs	r3, #0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
	...

080094ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b085      	sub	sp, #20
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d108      	bne.n	800950e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800950c:	e031      	b.n	8009572 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800950e:	2310      	movs	r3, #16
 8009510:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009512:	2310      	movs	r3, #16
 8009514:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	0e5b      	lsrs	r3, r3, #25
 800951e:	b2db      	uxtb	r3, r3
 8009520:	f003 0307 	and.w	r3, r3, #7
 8009524:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	0f5b      	lsrs	r3, r3, #29
 800952e:	b2db      	uxtb	r3, r3
 8009530:	f003 0307 	and.w	r3, r3, #7
 8009534:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009536:	7bbb      	ldrb	r3, [r7, #14]
 8009538:	7b3a      	ldrb	r2, [r7, #12]
 800953a:	4911      	ldr	r1, [pc, #68]	@ (8009580 <UARTEx_SetNbDataToProcess+0x94>)
 800953c:	5c8a      	ldrb	r2, [r1, r2]
 800953e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009542:	7b3a      	ldrb	r2, [r7, #12]
 8009544:	490f      	ldr	r1, [pc, #60]	@ (8009584 <UARTEx_SetNbDataToProcess+0x98>)
 8009546:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009548:	fb93 f3f2 	sdiv	r3, r3, r2
 800954c:	b29a      	uxth	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009554:	7bfb      	ldrb	r3, [r7, #15]
 8009556:	7b7a      	ldrb	r2, [r7, #13]
 8009558:	4909      	ldr	r1, [pc, #36]	@ (8009580 <UARTEx_SetNbDataToProcess+0x94>)
 800955a:	5c8a      	ldrb	r2, [r1, r2]
 800955c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009560:	7b7a      	ldrb	r2, [r7, #13]
 8009562:	4908      	ldr	r1, [pc, #32]	@ (8009584 <UARTEx_SetNbDataToProcess+0x98>)
 8009564:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009566:	fb93 f3f2 	sdiv	r3, r3, r2
 800956a:	b29a      	uxth	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009572:	bf00      	nop
 8009574:	3714      	adds	r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	0800a5bc 	.word	0x0800a5bc
 8009584:	0800a5c4 	.word	0x0800a5c4

08009588 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009588:	b084      	sub	sp, #16
 800958a:	b580      	push	{r7, lr}
 800958c:	b084      	sub	sp, #16
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	f107 001c 	add.w	r0, r7, #28
 8009596:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800959a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d121      	bne.n	80095e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	68da      	ldr	r2, [r3, #12]
 80095b2:	4b2c      	ldr	r3, [pc, #176]	@ (8009664 <USB_CoreInit+0xdc>)
 80095b4:	4013      	ands	r3, r2
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	68db      	ldr	r3, [r3, #12]
 80095be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80095c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d105      	bne.n	80095da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 faaa 	bl	8009b34 <USB_CoreReset>
 80095e0:	4603      	mov	r3, r0
 80095e2:	73fb      	strb	r3, [r7, #15]
 80095e4:	e01b      	b.n	800961e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 fa9e 	bl	8009b34 <USB_CoreReset>
 80095f8:	4603      	mov	r3, r0
 80095fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80095fc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009600:	2b00      	cmp	r3, #0
 8009602:	d106      	bne.n	8009612 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009608:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009610:	e005      	b.n	800961e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009616:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800961e:	7fbb      	ldrb	r3, [r7, #30]
 8009620:	2b01      	cmp	r3, #1
 8009622:	d116      	bne.n	8009652 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009628:	b29a      	uxth	r2, r3
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009632:	4b0d      	ldr	r3, [pc, #52]	@ (8009668 <USB_CoreInit+0xe0>)
 8009634:	4313      	orrs	r3, r2
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	f043 0206 	orr.w	r2, r3, #6
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	f043 0220 	orr.w	r2, r3, #32
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009652:	7bfb      	ldrb	r3, [r7, #15]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800965e:	b004      	add	sp, #16
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	ffbdffbf 	.word	0xffbdffbf
 8009668:	03ee0000 	.word	0x03ee0000

0800966c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	f023 0201 	bic.w	r2, r3, #1
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	370c      	adds	r7, #12
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr

0800968e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800968e:	b580      	push	{r7, lr}
 8009690:	b084      	sub	sp, #16
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
 8009696:	460b      	mov	r3, r1
 8009698:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800969a:	2300      	movs	r3, #0
 800969c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80096aa:	78fb      	ldrb	r3, [r7, #3]
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d115      	bne.n	80096dc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80096bc:	200a      	movs	r0, #10
 80096be:	f7f7 ffcf 	bl	8001660 <HAL_Delay>
      ms += 10U;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	330a      	adds	r3, #10
 80096c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 fa25 	bl	8009b18 <USB_GetMode>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d01e      	beq.n	8009712 <USB_SetCurrentMode+0x84>
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2bc7      	cmp	r3, #199	@ 0xc7
 80096d8:	d9f0      	bls.n	80096bc <USB_SetCurrentMode+0x2e>
 80096da:	e01a      	b.n	8009712 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80096dc:	78fb      	ldrb	r3, [r7, #3]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d115      	bne.n	800970e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80096ee:	200a      	movs	r0, #10
 80096f0:	f7f7 ffb6 	bl	8001660 <HAL_Delay>
      ms += 10U;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	330a      	adds	r3, #10
 80096f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fa0c 	bl	8009b18 <USB_GetMode>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d005      	beq.n	8009712 <USB_SetCurrentMode+0x84>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2bc7      	cmp	r3, #199	@ 0xc7
 800970a:	d9f0      	bls.n	80096ee <USB_SetCurrentMode+0x60>
 800970c:	e001      	b.n	8009712 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	e005      	b.n	800971e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2bc8      	cmp	r3, #200	@ 0xc8
 8009716:	d101      	bne.n	800971c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e000      	b.n	800971e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
	...

08009728 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009728:	b084      	sub	sp, #16
 800972a:	b580      	push	{r7, lr}
 800972c:	b086      	sub	sp, #24
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
 8009732:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800973a:	2300      	movs	r3, #0
 800973c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009742:	2300      	movs	r3, #0
 8009744:	613b      	str	r3, [r7, #16]
 8009746:	e009      	b.n	800975c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	3340      	adds	r3, #64	@ 0x40
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4413      	add	r3, r2
 8009752:	2200      	movs	r2, #0
 8009754:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	3301      	adds	r3, #1
 800975a:	613b      	str	r3, [r7, #16]
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	2b0e      	cmp	r3, #14
 8009760:	d9f2      	bls.n	8009748 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009762:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009766:	2b00      	cmp	r3, #0
 8009768:	d11c      	bne.n	80097a4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009778:	f043 0302 	orr.w	r3, r3, #2
 800977c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009782:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	601a      	str	r2, [r3, #0]
 80097a2:	e005      	b.n	80097b0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097a8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80097b6:	461a      	mov	r2, r3
 80097b8:	2300      	movs	r3, #0
 80097ba:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80097bc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d10d      	bne.n	80097e0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80097c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d104      	bne.n	80097d6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80097cc:	2100      	movs	r1, #0
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 f968 	bl	8009aa4 <USB_SetDevSpeed>
 80097d4:	e008      	b.n	80097e8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80097d6:	2101      	movs	r1, #1
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 f963 	bl	8009aa4 <USB_SetDevSpeed>
 80097de:	e003      	b.n	80097e8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80097e0:	2103      	movs	r1, #3
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 f95e 	bl	8009aa4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80097e8:	2110      	movs	r1, #16
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 f8fa 	bl	80099e4 <USB_FlushTxFifo>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d001      	beq.n	80097fa <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 f924 	bl	8009a48 <USB_FlushRxFifo>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d001      	beq.n	800980a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009810:	461a      	mov	r2, r3
 8009812:	2300      	movs	r3, #0
 8009814:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800981c:	461a      	mov	r2, r3
 800981e:	2300      	movs	r3, #0
 8009820:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009828:	461a      	mov	r2, r3
 800982a:	2300      	movs	r3, #0
 800982c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800982e:	2300      	movs	r3, #0
 8009830:	613b      	str	r3, [r7, #16]
 8009832:	e043      	b.n	80098bc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	015a      	lsls	r2, r3, #5
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	4413      	add	r3, r2
 800983c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009846:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800984a:	d118      	bne.n	800987e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d10a      	bne.n	8009868 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	015a      	lsls	r2, r3, #5
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	4413      	add	r3, r2
 800985a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800985e:	461a      	mov	r2, r3
 8009860:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009864:	6013      	str	r3, [r2, #0]
 8009866:	e013      	b.n	8009890 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	015a      	lsls	r2, r3, #5
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	4413      	add	r3, r2
 8009870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009874:	461a      	mov	r2, r3
 8009876:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800987a:	6013      	str	r3, [r2, #0]
 800987c:	e008      	b.n	8009890 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	015a      	lsls	r2, r3, #5
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	4413      	add	r3, r2
 8009886:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800988a:	461a      	mov	r2, r3
 800988c:	2300      	movs	r3, #0
 800988e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	015a      	lsls	r2, r3, #5
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	4413      	add	r3, r2
 8009898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800989c:	461a      	mov	r2, r3
 800989e:	2300      	movs	r3, #0
 80098a0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	015a      	lsls	r2, r3, #5
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	4413      	add	r3, r2
 80098aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098ae:	461a      	mov	r2, r3
 80098b0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80098b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	3301      	adds	r3, #1
 80098ba:	613b      	str	r3, [r7, #16]
 80098bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80098c0:	461a      	mov	r2, r3
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d3b5      	bcc.n	8009834 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098c8:	2300      	movs	r3, #0
 80098ca:	613b      	str	r3, [r7, #16]
 80098cc:	e043      	b.n	8009956 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	015a      	lsls	r2, r3, #5
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	4413      	add	r3, r2
 80098d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80098e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098e4:	d118      	bne.n	8009918 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d10a      	bne.n	8009902 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	015a      	lsls	r2, r3, #5
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	4413      	add	r3, r2
 80098f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098f8:	461a      	mov	r2, r3
 80098fa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80098fe:	6013      	str	r3, [r2, #0]
 8009900:	e013      	b.n	800992a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	015a      	lsls	r2, r3, #5
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	4413      	add	r3, r2
 800990a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800990e:	461a      	mov	r2, r3
 8009910:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009914:	6013      	str	r3, [r2, #0]
 8009916:	e008      	b.n	800992a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	015a      	lsls	r2, r3, #5
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	4413      	add	r3, r2
 8009920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009924:	461a      	mov	r2, r3
 8009926:	2300      	movs	r3, #0
 8009928:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	015a      	lsls	r2, r3, #5
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	4413      	add	r3, r2
 8009932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009936:	461a      	mov	r2, r3
 8009938:	2300      	movs	r3, #0
 800993a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	015a      	lsls	r2, r3, #5
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	4413      	add	r3, r2
 8009944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009948:	461a      	mov	r2, r3
 800994a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800994e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	3301      	adds	r3, #1
 8009954:	613b      	str	r3, [r7, #16]
 8009956:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800995a:	461a      	mov	r2, r3
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	4293      	cmp	r3, r2
 8009960:	d3b5      	bcc.n	80098ce <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009968:	691b      	ldr	r3, [r3, #16]
 800996a:	68fa      	ldr	r2, [r7, #12]
 800996c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009974:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009982:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009984:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009988:	2b00      	cmp	r3, #0
 800998a:	d105      	bne.n	8009998 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	699b      	ldr	r3, [r3, #24]
 8009990:	f043 0210 	orr.w	r2, r3, #16
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	699a      	ldr	r2, [r3, #24]
 800999c:	4b0f      	ldr	r3, [pc, #60]	@ (80099dc <USB_DevInit+0x2b4>)
 800999e:	4313      	orrs	r3, r2
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80099a4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d005      	beq.n	80099b8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	699b      	ldr	r3, [r3, #24]
 80099b0:	f043 0208 	orr.w	r2, r3, #8
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80099b8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d105      	bne.n	80099cc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	699a      	ldr	r2, [r3, #24]
 80099c4:	4b06      	ldr	r3, [pc, #24]	@ (80099e0 <USB_DevInit+0x2b8>)
 80099c6:	4313      	orrs	r3, r2
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80099cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3718      	adds	r7, #24
 80099d2:	46bd      	mov	sp, r7
 80099d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80099d8:	b004      	add	sp, #16
 80099da:	4770      	bx	lr
 80099dc:	803c3800 	.word	0x803c3800
 80099e0:	40000004 	.word	0x40000004

080099e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80099ee:	2300      	movs	r3, #0
 80099f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	3301      	adds	r3, #1
 80099f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099fe:	d901      	bls.n	8009a04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009a00:	2303      	movs	r3, #3
 8009a02:	e01b      	b.n	8009a3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	691b      	ldr	r3, [r3, #16]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	daf2      	bge.n	80099f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	019b      	lsls	r3, r3, #6
 8009a14:	f043 0220 	orr.w	r2, r3, #32
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a28:	d901      	bls.n	8009a2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	e006      	b.n	8009a3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	691b      	ldr	r3, [r3, #16]
 8009a32:	f003 0320 	and.w	r3, r3, #32
 8009a36:	2b20      	cmp	r3, #32
 8009a38:	d0f0      	beq.n	8009a1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3714      	adds	r7, #20
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a50:	2300      	movs	r3, #0
 8009a52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	3301      	adds	r3, #1
 8009a58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a60:	d901      	bls.n	8009a66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009a62:	2303      	movs	r3, #3
 8009a64:	e018      	b.n	8009a98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	daf2      	bge.n	8009a54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2210      	movs	r2, #16
 8009a76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a84:	d901      	bls.n	8009a8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009a86:	2303      	movs	r3, #3
 8009a88:	e006      	b.n	8009a98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	691b      	ldr	r3, [r3, #16]
 8009a8e:	f003 0310 	and.w	r3, r3, #16
 8009a92:	2b10      	cmp	r3, #16
 8009a94:	d0f0      	beq.n	8009a78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009a96:	2300      	movs	r3, #0
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3714      	adds	r7, #20
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	460b      	mov	r3, r1
 8009aae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	78fb      	ldrb	r3, [r7, #3]
 8009abe:	68f9      	ldr	r1, [r7, #12]
 8009ac0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3714      	adds	r7, #20
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr

08009ad6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ad6:	b480      	push	{r7}
 8009ad8:	b085      	sub	sp, #20
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009af0:	f023 0303 	bic.w	r3, r3, #3
 8009af4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b04:	f043 0302 	orr.w	r3, r3, #2
 8009b08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3714      	adds	r7, #20
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	695b      	ldr	r3, [r3, #20]
 8009b24:	f003 0301 	and.w	r3, r3, #1
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	3301      	adds	r3, #1
 8009b44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b4c:	d901      	bls.n	8009b52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009b4e:	2303      	movs	r3, #3
 8009b50:	e01b      	b.n	8009b8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	daf2      	bge.n	8009b40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	691b      	ldr	r3, [r3, #16]
 8009b62:	f043 0201 	orr.w	r2, r3, #1
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b76:	d901      	bls.n	8009b7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	e006      	b.n	8009b8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	f003 0301 	and.w	r3, r3, #1
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d0f0      	beq.n	8009b6a <USB_CoreReset+0x36>

  return HAL_OK;
 8009b88:	2300      	movs	r3, #0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3714      	adds	r7, #20
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr
	...

08009b98 <sniprintf>:
 8009b98:	b40c      	push	{r2, r3}
 8009b9a:	b530      	push	{r4, r5, lr}
 8009b9c:	4b17      	ldr	r3, [pc, #92]	@ (8009bfc <sniprintf+0x64>)
 8009b9e:	1e0c      	subs	r4, r1, #0
 8009ba0:	681d      	ldr	r5, [r3, #0]
 8009ba2:	b09d      	sub	sp, #116	@ 0x74
 8009ba4:	da08      	bge.n	8009bb8 <sniprintf+0x20>
 8009ba6:	238b      	movs	r3, #139	@ 0x8b
 8009ba8:	602b      	str	r3, [r5, #0]
 8009baa:	f04f 30ff 	mov.w	r0, #4294967295
 8009bae:	b01d      	add	sp, #116	@ 0x74
 8009bb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bb4:	b002      	add	sp, #8
 8009bb6:	4770      	bx	lr
 8009bb8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009bbc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009bc0:	bf14      	ite	ne
 8009bc2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009bc6:	4623      	moveq	r3, r4
 8009bc8:	9304      	str	r3, [sp, #16]
 8009bca:	9307      	str	r3, [sp, #28]
 8009bcc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009bd0:	9002      	str	r0, [sp, #8]
 8009bd2:	9006      	str	r0, [sp, #24]
 8009bd4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009bd8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009bda:	ab21      	add	r3, sp, #132	@ 0x84
 8009bdc:	a902      	add	r1, sp, #8
 8009bde:	4628      	mov	r0, r5
 8009be0:	9301      	str	r3, [sp, #4]
 8009be2:	f000 f9a7 	bl	8009f34 <_svfiprintf_r>
 8009be6:	1c43      	adds	r3, r0, #1
 8009be8:	bfbc      	itt	lt
 8009bea:	238b      	movlt	r3, #139	@ 0x8b
 8009bec:	602b      	strlt	r3, [r5, #0]
 8009bee:	2c00      	cmp	r4, #0
 8009bf0:	d0dd      	beq.n	8009bae <sniprintf+0x16>
 8009bf2:	9b02      	ldr	r3, [sp, #8]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	701a      	strb	r2, [r3, #0]
 8009bf8:	e7d9      	b.n	8009bae <sniprintf+0x16>
 8009bfa:	bf00      	nop
 8009bfc:	24000014 	.word	0x24000014

08009c00 <memset>:
 8009c00:	4402      	add	r2, r0
 8009c02:	4603      	mov	r3, r0
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d100      	bne.n	8009c0a <memset+0xa>
 8009c08:	4770      	bx	lr
 8009c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8009c0e:	e7f9      	b.n	8009c04 <memset+0x4>

08009c10 <strncmp>:
 8009c10:	b510      	push	{r4, lr}
 8009c12:	b16a      	cbz	r2, 8009c30 <strncmp+0x20>
 8009c14:	3901      	subs	r1, #1
 8009c16:	1884      	adds	r4, r0, r2
 8009c18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c1c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d103      	bne.n	8009c2c <strncmp+0x1c>
 8009c24:	42a0      	cmp	r0, r4
 8009c26:	d001      	beq.n	8009c2c <strncmp+0x1c>
 8009c28:	2a00      	cmp	r2, #0
 8009c2a:	d1f5      	bne.n	8009c18 <strncmp+0x8>
 8009c2c:	1ad0      	subs	r0, r2, r3
 8009c2e:	bd10      	pop	{r4, pc}
 8009c30:	4610      	mov	r0, r2
 8009c32:	e7fc      	b.n	8009c2e <strncmp+0x1e>

08009c34 <__errno>:
 8009c34:	4b01      	ldr	r3, [pc, #4]	@ (8009c3c <__errno+0x8>)
 8009c36:	6818      	ldr	r0, [r3, #0]
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop
 8009c3c:	24000014 	.word	0x24000014

08009c40 <__libc_init_array>:
 8009c40:	b570      	push	{r4, r5, r6, lr}
 8009c42:	4d0d      	ldr	r5, [pc, #52]	@ (8009c78 <__libc_init_array+0x38>)
 8009c44:	4c0d      	ldr	r4, [pc, #52]	@ (8009c7c <__libc_init_array+0x3c>)
 8009c46:	1b64      	subs	r4, r4, r5
 8009c48:	10a4      	asrs	r4, r4, #2
 8009c4a:	2600      	movs	r6, #0
 8009c4c:	42a6      	cmp	r6, r4
 8009c4e:	d109      	bne.n	8009c64 <__libc_init_array+0x24>
 8009c50:	4d0b      	ldr	r5, [pc, #44]	@ (8009c80 <__libc_init_array+0x40>)
 8009c52:	4c0c      	ldr	r4, [pc, #48]	@ (8009c84 <__libc_init_array+0x44>)
 8009c54:	f000 fc66 	bl	800a524 <_init>
 8009c58:	1b64      	subs	r4, r4, r5
 8009c5a:	10a4      	asrs	r4, r4, #2
 8009c5c:	2600      	movs	r6, #0
 8009c5e:	42a6      	cmp	r6, r4
 8009c60:	d105      	bne.n	8009c6e <__libc_init_array+0x2e>
 8009c62:	bd70      	pop	{r4, r5, r6, pc}
 8009c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c68:	4798      	blx	r3
 8009c6a:	3601      	adds	r6, #1
 8009c6c:	e7ee      	b.n	8009c4c <__libc_init_array+0xc>
 8009c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c72:	4798      	blx	r3
 8009c74:	3601      	adds	r6, #1
 8009c76:	e7f2      	b.n	8009c5e <__libc_init_array+0x1e>
 8009c78:	0800a608 	.word	0x0800a608
 8009c7c:	0800a608 	.word	0x0800a608
 8009c80:	0800a608 	.word	0x0800a608
 8009c84:	0800a60c 	.word	0x0800a60c

08009c88 <__retarget_lock_acquire_recursive>:
 8009c88:	4770      	bx	lr

08009c8a <__retarget_lock_release_recursive>:
 8009c8a:	4770      	bx	lr

08009c8c <_free_r>:
 8009c8c:	b538      	push	{r3, r4, r5, lr}
 8009c8e:	4605      	mov	r5, r0
 8009c90:	2900      	cmp	r1, #0
 8009c92:	d041      	beq.n	8009d18 <_free_r+0x8c>
 8009c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c98:	1f0c      	subs	r4, r1, #4
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	bfb8      	it	lt
 8009c9e:	18e4      	addlt	r4, r4, r3
 8009ca0:	f000 f8e0 	bl	8009e64 <__malloc_lock>
 8009ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8009d1c <_free_r+0x90>)
 8009ca6:	6813      	ldr	r3, [r2, #0]
 8009ca8:	b933      	cbnz	r3, 8009cb8 <_free_r+0x2c>
 8009caa:	6063      	str	r3, [r4, #4]
 8009cac:	6014      	str	r4, [r2, #0]
 8009cae:	4628      	mov	r0, r5
 8009cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cb4:	f000 b8dc 	b.w	8009e70 <__malloc_unlock>
 8009cb8:	42a3      	cmp	r3, r4
 8009cba:	d908      	bls.n	8009cce <_free_r+0x42>
 8009cbc:	6820      	ldr	r0, [r4, #0]
 8009cbe:	1821      	adds	r1, r4, r0
 8009cc0:	428b      	cmp	r3, r1
 8009cc2:	bf01      	itttt	eq
 8009cc4:	6819      	ldreq	r1, [r3, #0]
 8009cc6:	685b      	ldreq	r3, [r3, #4]
 8009cc8:	1809      	addeq	r1, r1, r0
 8009cca:	6021      	streq	r1, [r4, #0]
 8009ccc:	e7ed      	b.n	8009caa <_free_r+0x1e>
 8009cce:	461a      	mov	r2, r3
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	b10b      	cbz	r3, 8009cd8 <_free_r+0x4c>
 8009cd4:	42a3      	cmp	r3, r4
 8009cd6:	d9fa      	bls.n	8009cce <_free_r+0x42>
 8009cd8:	6811      	ldr	r1, [r2, #0]
 8009cda:	1850      	adds	r0, r2, r1
 8009cdc:	42a0      	cmp	r0, r4
 8009cde:	d10b      	bne.n	8009cf8 <_free_r+0x6c>
 8009ce0:	6820      	ldr	r0, [r4, #0]
 8009ce2:	4401      	add	r1, r0
 8009ce4:	1850      	adds	r0, r2, r1
 8009ce6:	4283      	cmp	r3, r0
 8009ce8:	6011      	str	r1, [r2, #0]
 8009cea:	d1e0      	bne.n	8009cae <_free_r+0x22>
 8009cec:	6818      	ldr	r0, [r3, #0]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	6053      	str	r3, [r2, #4]
 8009cf2:	4408      	add	r0, r1
 8009cf4:	6010      	str	r0, [r2, #0]
 8009cf6:	e7da      	b.n	8009cae <_free_r+0x22>
 8009cf8:	d902      	bls.n	8009d00 <_free_r+0x74>
 8009cfa:	230c      	movs	r3, #12
 8009cfc:	602b      	str	r3, [r5, #0]
 8009cfe:	e7d6      	b.n	8009cae <_free_r+0x22>
 8009d00:	6820      	ldr	r0, [r4, #0]
 8009d02:	1821      	adds	r1, r4, r0
 8009d04:	428b      	cmp	r3, r1
 8009d06:	bf04      	itt	eq
 8009d08:	6819      	ldreq	r1, [r3, #0]
 8009d0a:	685b      	ldreq	r3, [r3, #4]
 8009d0c:	6063      	str	r3, [r4, #4]
 8009d0e:	bf04      	itt	eq
 8009d10:	1809      	addeq	r1, r1, r0
 8009d12:	6021      	streq	r1, [r4, #0]
 8009d14:	6054      	str	r4, [r2, #4]
 8009d16:	e7ca      	b.n	8009cae <_free_r+0x22>
 8009d18:	bd38      	pop	{r3, r4, r5, pc}
 8009d1a:	bf00      	nop
 8009d1c:	24000954 	.word	0x24000954

08009d20 <sbrk_aligned>:
 8009d20:	b570      	push	{r4, r5, r6, lr}
 8009d22:	4e0f      	ldr	r6, [pc, #60]	@ (8009d60 <sbrk_aligned+0x40>)
 8009d24:	460c      	mov	r4, r1
 8009d26:	6831      	ldr	r1, [r6, #0]
 8009d28:	4605      	mov	r5, r0
 8009d2a:	b911      	cbnz	r1, 8009d32 <sbrk_aligned+0x12>
 8009d2c:	f000 fba6 	bl	800a47c <_sbrk_r>
 8009d30:	6030      	str	r0, [r6, #0]
 8009d32:	4621      	mov	r1, r4
 8009d34:	4628      	mov	r0, r5
 8009d36:	f000 fba1 	bl	800a47c <_sbrk_r>
 8009d3a:	1c43      	adds	r3, r0, #1
 8009d3c:	d103      	bne.n	8009d46 <sbrk_aligned+0x26>
 8009d3e:	f04f 34ff 	mov.w	r4, #4294967295
 8009d42:	4620      	mov	r0, r4
 8009d44:	bd70      	pop	{r4, r5, r6, pc}
 8009d46:	1cc4      	adds	r4, r0, #3
 8009d48:	f024 0403 	bic.w	r4, r4, #3
 8009d4c:	42a0      	cmp	r0, r4
 8009d4e:	d0f8      	beq.n	8009d42 <sbrk_aligned+0x22>
 8009d50:	1a21      	subs	r1, r4, r0
 8009d52:	4628      	mov	r0, r5
 8009d54:	f000 fb92 	bl	800a47c <_sbrk_r>
 8009d58:	3001      	adds	r0, #1
 8009d5a:	d1f2      	bne.n	8009d42 <sbrk_aligned+0x22>
 8009d5c:	e7ef      	b.n	8009d3e <sbrk_aligned+0x1e>
 8009d5e:	bf00      	nop
 8009d60:	24000950 	.word	0x24000950

08009d64 <_malloc_r>:
 8009d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d68:	1ccd      	adds	r5, r1, #3
 8009d6a:	f025 0503 	bic.w	r5, r5, #3
 8009d6e:	3508      	adds	r5, #8
 8009d70:	2d0c      	cmp	r5, #12
 8009d72:	bf38      	it	cc
 8009d74:	250c      	movcc	r5, #12
 8009d76:	2d00      	cmp	r5, #0
 8009d78:	4606      	mov	r6, r0
 8009d7a:	db01      	blt.n	8009d80 <_malloc_r+0x1c>
 8009d7c:	42a9      	cmp	r1, r5
 8009d7e:	d904      	bls.n	8009d8a <_malloc_r+0x26>
 8009d80:	230c      	movs	r3, #12
 8009d82:	6033      	str	r3, [r6, #0]
 8009d84:	2000      	movs	r0, #0
 8009d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009e60 <_malloc_r+0xfc>
 8009d8e:	f000 f869 	bl	8009e64 <__malloc_lock>
 8009d92:	f8d8 3000 	ldr.w	r3, [r8]
 8009d96:	461c      	mov	r4, r3
 8009d98:	bb44      	cbnz	r4, 8009dec <_malloc_r+0x88>
 8009d9a:	4629      	mov	r1, r5
 8009d9c:	4630      	mov	r0, r6
 8009d9e:	f7ff ffbf 	bl	8009d20 <sbrk_aligned>
 8009da2:	1c43      	adds	r3, r0, #1
 8009da4:	4604      	mov	r4, r0
 8009da6:	d158      	bne.n	8009e5a <_malloc_r+0xf6>
 8009da8:	f8d8 4000 	ldr.w	r4, [r8]
 8009dac:	4627      	mov	r7, r4
 8009dae:	2f00      	cmp	r7, #0
 8009db0:	d143      	bne.n	8009e3a <_malloc_r+0xd6>
 8009db2:	2c00      	cmp	r4, #0
 8009db4:	d04b      	beq.n	8009e4e <_malloc_r+0xea>
 8009db6:	6823      	ldr	r3, [r4, #0]
 8009db8:	4639      	mov	r1, r7
 8009dba:	4630      	mov	r0, r6
 8009dbc:	eb04 0903 	add.w	r9, r4, r3
 8009dc0:	f000 fb5c 	bl	800a47c <_sbrk_r>
 8009dc4:	4581      	cmp	r9, r0
 8009dc6:	d142      	bne.n	8009e4e <_malloc_r+0xea>
 8009dc8:	6821      	ldr	r1, [r4, #0]
 8009dca:	1a6d      	subs	r5, r5, r1
 8009dcc:	4629      	mov	r1, r5
 8009dce:	4630      	mov	r0, r6
 8009dd0:	f7ff ffa6 	bl	8009d20 <sbrk_aligned>
 8009dd4:	3001      	adds	r0, #1
 8009dd6:	d03a      	beq.n	8009e4e <_malloc_r+0xea>
 8009dd8:	6823      	ldr	r3, [r4, #0]
 8009dda:	442b      	add	r3, r5
 8009ddc:	6023      	str	r3, [r4, #0]
 8009dde:	f8d8 3000 	ldr.w	r3, [r8]
 8009de2:	685a      	ldr	r2, [r3, #4]
 8009de4:	bb62      	cbnz	r2, 8009e40 <_malloc_r+0xdc>
 8009de6:	f8c8 7000 	str.w	r7, [r8]
 8009dea:	e00f      	b.n	8009e0c <_malloc_r+0xa8>
 8009dec:	6822      	ldr	r2, [r4, #0]
 8009dee:	1b52      	subs	r2, r2, r5
 8009df0:	d420      	bmi.n	8009e34 <_malloc_r+0xd0>
 8009df2:	2a0b      	cmp	r2, #11
 8009df4:	d917      	bls.n	8009e26 <_malloc_r+0xc2>
 8009df6:	1961      	adds	r1, r4, r5
 8009df8:	42a3      	cmp	r3, r4
 8009dfa:	6025      	str	r5, [r4, #0]
 8009dfc:	bf18      	it	ne
 8009dfe:	6059      	strne	r1, [r3, #4]
 8009e00:	6863      	ldr	r3, [r4, #4]
 8009e02:	bf08      	it	eq
 8009e04:	f8c8 1000 	streq.w	r1, [r8]
 8009e08:	5162      	str	r2, [r4, r5]
 8009e0a:	604b      	str	r3, [r1, #4]
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	f000 f82f 	bl	8009e70 <__malloc_unlock>
 8009e12:	f104 000b 	add.w	r0, r4, #11
 8009e16:	1d23      	adds	r3, r4, #4
 8009e18:	f020 0007 	bic.w	r0, r0, #7
 8009e1c:	1ac2      	subs	r2, r0, r3
 8009e1e:	bf1c      	itt	ne
 8009e20:	1a1b      	subne	r3, r3, r0
 8009e22:	50a3      	strne	r3, [r4, r2]
 8009e24:	e7af      	b.n	8009d86 <_malloc_r+0x22>
 8009e26:	6862      	ldr	r2, [r4, #4]
 8009e28:	42a3      	cmp	r3, r4
 8009e2a:	bf0c      	ite	eq
 8009e2c:	f8c8 2000 	streq.w	r2, [r8]
 8009e30:	605a      	strne	r2, [r3, #4]
 8009e32:	e7eb      	b.n	8009e0c <_malloc_r+0xa8>
 8009e34:	4623      	mov	r3, r4
 8009e36:	6864      	ldr	r4, [r4, #4]
 8009e38:	e7ae      	b.n	8009d98 <_malloc_r+0x34>
 8009e3a:	463c      	mov	r4, r7
 8009e3c:	687f      	ldr	r7, [r7, #4]
 8009e3e:	e7b6      	b.n	8009dae <_malloc_r+0x4a>
 8009e40:	461a      	mov	r2, r3
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	42a3      	cmp	r3, r4
 8009e46:	d1fb      	bne.n	8009e40 <_malloc_r+0xdc>
 8009e48:	2300      	movs	r3, #0
 8009e4a:	6053      	str	r3, [r2, #4]
 8009e4c:	e7de      	b.n	8009e0c <_malloc_r+0xa8>
 8009e4e:	230c      	movs	r3, #12
 8009e50:	6033      	str	r3, [r6, #0]
 8009e52:	4630      	mov	r0, r6
 8009e54:	f000 f80c 	bl	8009e70 <__malloc_unlock>
 8009e58:	e794      	b.n	8009d84 <_malloc_r+0x20>
 8009e5a:	6005      	str	r5, [r0, #0]
 8009e5c:	e7d6      	b.n	8009e0c <_malloc_r+0xa8>
 8009e5e:	bf00      	nop
 8009e60:	24000954 	.word	0x24000954

08009e64 <__malloc_lock>:
 8009e64:	4801      	ldr	r0, [pc, #4]	@ (8009e6c <__malloc_lock+0x8>)
 8009e66:	f7ff bf0f 	b.w	8009c88 <__retarget_lock_acquire_recursive>
 8009e6a:	bf00      	nop
 8009e6c:	2400094c 	.word	0x2400094c

08009e70 <__malloc_unlock>:
 8009e70:	4801      	ldr	r0, [pc, #4]	@ (8009e78 <__malloc_unlock+0x8>)
 8009e72:	f7ff bf0a 	b.w	8009c8a <__retarget_lock_release_recursive>
 8009e76:	bf00      	nop
 8009e78:	2400094c 	.word	0x2400094c

08009e7c <__ssputs_r>:
 8009e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e80:	688e      	ldr	r6, [r1, #8]
 8009e82:	461f      	mov	r7, r3
 8009e84:	42be      	cmp	r6, r7
 8009e86:	680b      	ldr	r3, [r1, #0]
 8009e88:	4682      	mov	sl, r0
 8009e8a:	460c      	mov	r4, r1
 8009e8c:	4690      	mov	r8, r2
 8009e8e:	d82d      	bhi.n	8009eec <__ssputs_r+0x70>
 8009e90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009e98:	d026      	beq.n	8009ee8 <__ssputs_r+0x6c>
 8009e9a:	6965      	ldr	r5, [r4, #20]
 8009e9c:	6909      	ldr	r1, [r1, #16]
 8009e9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ea2:	eba3 0901 	sub.w	r9, r3, r1
 8009ea6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009eaa:	1c7b      	adds	r3, r7, #1
 8009eac:	444b      	add	r3, r9
 8009eae:	106d      	asrs	r5, r5, #1
 8009eb0:	429d      	cmp	r5, r3
 8009eb2:	bf38      	it	cc
 8009eb4:	461d      	movcc	r5, r3
 8009eb6:	0553      	lsls	r3, r2, #21
 8009eb8:	d527      	bpl.n	8009f0a <__ssputs_r+0x8e>
 8009eba:	4629      	mov	r1, r5
 8009ebc:	f7ff ff52 	bl	8009d64 <_malloc_r>
 8009ec0:	4606      	mov	r6, r0
 8009ec2:	b360      	cbz	r0, 8009f1e <__ssputs_r+0xa2>
 8009ec4:	6921      	ldr	r1, [r4, #16]
 8009ec6:	464a      	mov	r2, r9
 8009ec8:	f000 fae8 	bl	800a49c <memcpy>
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ed6:	81a3      	strh	r3, [r4, #12]
 8009ed8:	6126      	str	r6, [r4, #16]
 8009eda:	6165      	str	r5, [r4, #20]
 8009edc:	444e      	add	r6, r9
 8009ede:	eba5 0509 	sub.w	r5, r5, r9
 8009ee2:	6026      	str	r6, [r4, #0]
 8009ee4:	60a5      	str	r5, [r4, #8]
 8009ee6:	463e      	mov	r6, r7
 8009ee8:	42be      	cmp	r6, r7
 8009eea:	d900      	bls.n	8009eee <__ssputs_r+0x72>
 8009eec:	463e      	mov	r6, r7
 8009eee:	6820      	ldr	r0, [r4, #0]
 8009ef0:	4632      	mov	r2, r6
 8009ef2:	4641      	mov	r1, r8
 8009ef4:	f000 faa8 	bl	800a448 <memmove>
 8009ef8:	68a3      	ldr	r3, [r4, #8]
 8009efa:	1b9b      	subs	r3, r3, r6
 8009efc:	60a3      	str	r3, [r4, #8]
 8009efe:	6823      	ldr	r3, [r4, #0]
 8009f00:	4433      	add	r3, r6
 8009f02:	6023      	str	r3, [r4, #0]
 8009f04:	2000      	movs	r0, #0
 8009f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f0a:	462a      	mov	r2, r5
 8009f0c:	f000 fad4 	bl	800a4b8 <_realloc_r>
 8009f10:	4606      	mov	r6, r0
 8009f12:	2800      	cmp	r0, #0
 8009f14:	d1e0      	bne.n	8009ed8 <__ssputs_r+0x5c>
 8009f16:	6921      	ldr	r1, [r4, #16]
 8009f18:	4650      	mov	r0, sl
 8009f1a:	f7ff feb7 	bl	8009c8c <_free_r>
 8009f1e:	230c      	movs	r3, #12
 8009f20:	f8ca 3000 	str.w	r3, [sl]
 8009f24:	89a3      	ldrh	r3, [r4, #12]
 8009f26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f2a:	81a3      	strh	r3, [r4, #12]
 8009f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f30:	e7e9      	b.n	8009f06 <__ssputs_r+0x8a>
	...

08009f34 <_svfiprintf_r>:
 8009f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f38:	4698      	mov	r8, r3
 8009f3a:	898b      	ldrh	r3, [r1, #12]
 8009f3c:	061b      	lsls	r3, r3, #24
 8009f3e:	b09d      	sub	sp, #116	@ 0x74
 8009f40:	4607      	mov	r7, r0
 8009f42:	460d      	mov	r5, r1
 8009f44:	4614      	mov	r4, r2
 8009f46:	d510      	bpl.n	8009f6a <_svfiprintf_r+0x36>
 8009f48:	690b      	ldr	r3, [r1, #16]
 8009f4a:	b973      	cbnz	r3, 8009f6a <_svfiprintf_r+0x36>
 8009f4c:	2140      	movs	r1, #64	@ 0x40
 8009f4e:	f7ff ff09 	bl	8009d64 <_malloc_r>
 8009f52:	6028      	str	r0, [r5, #0]
 8009f54:	6128      	str	r0, [r5, #16]
 8009f56:	b930      	cbnz	r0, 8009f66 <_svfiprintf_r+0x32>
 8009f58:	230c      	movs	r3, #12
 8009f5a:	603b      	str	r3, [r7, #0]
 8009f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f60:	b01d      	add	sp, #116	@ 0x74
 8009f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f66:	2340      	movs	r3, #64	@ 0x40
 8009f68:	616b      	str	r3, [r5, #20]
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f6e:	2320      	movs	r3, #32
 8009f70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f74:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f78:	2330      	movs	r3, #48	@ 0x30
 8009f7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a118 <_svfiprintf_r+0x1e4>
 8009f7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f82:	f04f 0901 	mov.w	r9, #1
 8009f86:	4623      	mov	r3, r4
 8009f88:	469a      	mov	sl, r3
 8009f8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f8e:	b10a      	cbz	r2, 8009f94 <_svfiprintf_r+0x60>
 8009f90:	2a25      	cmp	r2, #37	@ 0x25
 8009f92:	d1f9      	bne.n	8009f88 <_svfiprintf_r+0x54>
 8009f94:	ebba 0b04 	subs.w	fp, sl, r4
 8009f98:	d00b      	beq.n	8009fb2 <_svfiprintf_r+0x7e>
 8009f9a:	465b      	mov	r3, fp
 8009f9c:	4622      	mov	r2, r4
 8009f9e:	4629      	mov	r1, r5
 8009fa0:	4638      	mov	r0, r7
 8009fa2:	f7ff ff6b 	bl	8009e7c <__ssputs_r>
 8009fa6:	3001      	adds	r0, #1
 8009fa8:	f000 80a7 	beq.w	800a0fa <_svfiprintf_r+0x1c6>
 8009fac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fae:	445a      	add	r2, fp
 8009fb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	f000 809f 	beq.w	800a0fa <_svfiprintf_r+0x1c6>
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8009fc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fc6:	f10a 0a01 	add.w	sl, sl, #1
 8009fca:	9304      	str	r3, [sp, #16]
 8009fcc:	9307      	str	r3, [sp, #28]
 8009fce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009fd2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009fd4:	4654      	mov	r4, sl
 8009fd6:	2205      	movs	r2, #5
 8009fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fdc:	484e      	ldr	r0, [pc, #312]	@ (800a118 <_svfiprintf_r+0x1e4>)
 8009fde:	f7f6 f987 	bl	80002f0 <memchr>
 8009fe2:	9a04      	ldr	r2, [sp, #16]
 8009fe4:	b9d8      	cbnz	r0, 800a01e <_svfiprintf_r+0xea>
 8009fe6:	06d0      	lsls	r0, r2, #27
 8009fe8:	bf44      	itt	mi
 8009fea:	2320      	movmi	r3, #32
 8009fec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ff0:	0711      	lsls	r1, r2, #28
 8009ff2:	bf44      	itt	mi
 8009ff4:	232b      	movmi	r3, #43	@ 0x2b
 8009ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8009ffe:	2b2a      	cmp	r3, #42	@ 0x2a
 800a000:	d015      	beq.n	800a02e <_svfiprintf_r+0xfa>
 800a002:	9a07      	ldr	r2, [sp, #28]
 800a004:	4654      	mov	r4, sl
 800a006:	2000      	movs	r0, #0
 800a008:	f04f 0c0a 	mov.w	ip, #10
 800a00c:	4621      	mov	r1, r4
 800a00e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a012:	3b30      	subs	r3, #48	@ 0x30
 800a014:	2b09      	cmp	r3, #9
 800a016:	d94b      	bls.n	800a0b0 <_svfiprintf_r+0x17c>
 800a018:	b1b0      	cbz	r0, 800a048 <_svfiprintf_r+0x114>
 800a01a:	9207      	str	r2, [sp, #28]
 800a01c:	e014      	b.n	800a048 <_svfiprintf_r+0x114>
 800a01e:	eba0 0308 	sub.w	r3, r0, r8
 800a022:	fa09 f303 	lsl.w	r3, r9, r3
 800a026:	4313      	orrs	r3, r2
 800a028:	9304      	str	r3, [sp, #16]
 800a02a:	46a2      	mov	sl, r4
 800a02c:	e7d2      	b.n	8009fd4 <_svfiprintf_r+0xa0>
 800a02e:	9b03      	ldr	r3, [sp, #12]
 800a030:	1d19      	adds	r1, r3, #4
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	9103      	str	r1, [sp, #12]
 800a036:	2b00      	cmp	r3, #0
 800a038:	bfbb      	ittet	lt
 800a03a:	425b      	neglt	r3, r3
 800a03c:	f042 0202 	orrlt.w	r2, r2, #2
 800a040:	9307      	strge	r3, [sp, #28]
 800a042:	9307      	strlt	r3, [sp, #28]
 800a044:	bfb8      	it	lt
 800a046:	9204      	strlt	r2, [sp, #16]
 800a048:	7823      	ldrb	r3, [r4, #0]
 800a04a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a04c:	d10a      	bne.n	800a064 <_svfiprintf_r+0x130>
 800a04e:	7863      	ldrb	r3, [r4, #1]
 800a050:	2b2a      	cmp	r3, #42	@ 0x2a
 800a052:	d132      	bne.n	800a0ba <_svfiprintf_r+0x186>
 800a054:	9b03      	ldr	r3, [sp, #12]
 800a056:	1d1a      	adds	r2, r3, #4
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	9203      	str	r2, [sp, #12]
 800a05c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a060:	3402      	adds	r4, #2
 800a062:	9305      	str	r3, [sp, #20]
 800a064:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a128 <_svfiprintf_r+0x1f4>
 800a068:	7821      	ldrb	r1, [r4, #0]
 800a06a:	2203      	movs	r2, #3
 800a06c:	4650      	mov	r0, sl
 800a06e:	f7f6 f93f 	bl	80002f0 <memchr>
 800a072:	b138      	cbz	r0, 800a084 <_svfiprintf_r+0x150>
 800a074:	9b04      	ldr	r3, [sp, #16]
 800a076:	eba0 000a 	sub.w	r0, r0, sl
 800a07a:	2240      	movs	r2, #64	@ 0x40
 800a07c:	4082      	lsls	r2, r0
 800a07e:	4313      	orrs	r3, r2
 800a080:	3401      	adds	r4, #1
 800a082:	9304      	str	r3, [sp, #16]
 800a084:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a088:	4824      	ldr	r0, [pc, #144]	@ (800a11c <_svfiprintf_r+0x1e8>)
 800a08a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a08e:	2206      	movs	r2, #6
 800a090:	f7f6 f92e 	bl	80002f0 <memchr>
 800a094:	2800      	cmp	r0, #0
 800a096:	d036      	beq.n	800a106 <_svfiprintf_r+0x1d2>
 800a098:	4b21      	ldr	r3, [pc, #132]	@ (800a120 <_svfiprintf_r+0x1ec>)
 800a09a:	bb1b      	cbnz	r3, 800a0e4 <_svfiprintf_r+0x1b0>
 800a09c:	9b03      	ldr	r3, [sp, #12]
 800a09e:	3307      	adds	r3, #7
 800a0a0:	f023 0307 	bic.w	r3, r3, #7
 800a0a4:	3308      	adds	r3, #8
 800a0a6:	9303      	str	r3, [sp, #12]
 800a0a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0aa:	4433      	add	r3, r6
 800a0ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0ae:	e76a      	b.n	8009f86 <_svfiprintf_r+0x52>
 800a0b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0b4:	460c      	mov	r4, r1
 800a0b6:	2001      	movs	r0, #1
 800a0b8:	e7a8      	b.n	800a00c <_svfiprintf_r+0xd8>
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	3401      	adds	r4, #1
 800a0be:	9305      	str	r3, [sp, #20]
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	f04f 0c0a 	mov.w	ip, #10
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0cc:	3a30      	subs	r2, #48	@ 0x30
 800a0ce:	2a09      	cmp	r2, #9
 800a0d0:	d903      	bls.n	800a0da <_svfiprintf_r+0x1a6>
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d0c6      	beq.n	800a064 <_svfiprintf_r+0x130>
 800a0d6:	9105      	str	r1, [sp, #20]
 800a0d8:	e7c4      	b.n	800a064 <_svfiprintf_r+0x130>
 800a0da:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0de:	4604      	mov	r4, r0
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e7f0      	b.n	800a0c6 <_svfiprintf_r+0x192>
 800a0e4:	ab03      	add	r3, sp, #12
 800a0e6:	9300      	str	r3, [sp, #0]
 800a0e8:	462a      	mov	r2, r5
 800a0ea:	4b0e      	ldr	r3, [pc, #56]	@ (800a124 <_svfiprintf_r+0x1f0>)
 800a0ec:	a904      	add	r1, sp, #16
 800a0ee:	4638      	mov	r0, r7
 800a0f0:	f3af 8000 	nop.w
 800a0f4:	1c42      	adds	r2, r0, #1
 800a0f6:	4606      	mov	r6, r0
 800a0f8:	d1d6      	bne.n	800a0a8 <_svfiprintf_r+0x174>
 800a0fa:	89ab      	ldrh	r3, [r5, #12]
 800a0fc:	065b      	lsls	r3, r3, #25
 800a0fe:	f53f af2d 	bmi.w	8009f5c <_svfiprintf_r+0x28>
 800a102:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a104:	e72c      	b.n	8009f60 <_svfiprintf_r+0x2c>
 800a106:	ab03      	add	r3, sp, #12
 800a108:	9300      	str	r3, [sp, #0]
 800a10a:	462a      	mov	r2, r5
 800a10c:	4b05      	ldr	r3, [pc, #20]	@ (800a124 <_svfiprintf_r+0x1f0>)
 800a10e:	a904      	add	r1, sp, #16
 800a110:	4638      	mov	r0, r7
 800a112:	f000 f879 	bl	800a208 <_printf_i>
 800a116:	e7ed      	b.n	800a0f4 <_svfiprintf_r+0x1c0>
 800a118:	0800a5cc 	.word	0x0800a5cc
 800a11c:	0800a5d6 	.word	0x0800a5d6
 800a120:	00000000 	.word	0x00000000
 800a124:	08009e7d 	.word	0x08009e7d
 800a128:	0800a5d2 	.word	0x0800a5d2

0800a12c <_printf_common>:
 800a12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a130:	4616      	mov	r6, r2
 800a132:	4698      	mov	r8, r3
 800a134:	688a      	ldr	r2, [r1, #8]
 800a136:	690b      	ldr	r3, [r1, #16]
 800a138:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a13c:	4293      	cmp	r3, r2
 800a13e:	bfb8      	it	lt
 800a140:	4613      	movlt	r3, r2
 800a142:	6033      	str	r3, [r6, #0]
 800a144:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a148:	4607      	mov	r7, r0
 800a14a:	460c      	mov	r4, r1
 800a14c:	b10a      	cbz	r2, 800a152 <_printf_common+0x26>
 800a14e:	3301      	adds	r3, #1
 800a150:	6033      	str	r3, [r6, #0]
 800a152:	6823      	ldr	r3, [r4, #0]
 800a154:	0699      	lsls	r1, r3, #26
 800a156:	bf42      	ittt	mi
 800a158:	6833      	ldrmi	r3, [r6, #0]
 800a15a:	3302      	addmi	r3, #2
 800a15c:	6033      	strmi	r3, [r6, #0]
 800a15e:	6825      	ldr	r5, [r4, #0]
 800a160:	f015 0506 	ands.w	r5, r5, #6
 800a164:	d106      	bne.n	800a174 <_printf_common+0x48>
 800a166:	f104 0a19 	add.w	sl, r4, #25
 800a16a:	68e3      	ldr	r3, [r4, #12]
 800a16c:	6832      	ldr	r2, [r6, #0]
 800a16e:	1a9b      	subs	r3, r3, r2
 800a170:	42ab      	cmp	r3, r5
 800a172:	dc26      	bgt.n	800a1c2 <_printf_common+0x96>
 800a174:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a178:	6822      	ldr	r2, [r4, #0]
 800a17a:	3b00      	subs	r3, #0
 800a17c:	bf18      	it	ne
 800a17e:	2301      	movne	r3, #1
 800a180:	0692      	lsls	r2, r2, #26
 800a182:	d42b      	bmi.n	800a1dc <_printf_common+0xb0>
 800a184:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a188:	4641      	mov	r1, r8
 800a18a:	4638      	mov	r0, r7
 800a18c:	47c8      	blx	r9
 800a18e:	3001      	adds	r0, #1
 800a190:	d01e      	beq.n	800a1d0 <_printf_common+0xa4>
 800a192:	6823      	ldr	r3, [r4, #0]
 800a194:	6922      	ldr	r2, [r4, #16]
 800a196:	f003 0306 	and.w	r3, r3, #6
 800a19a:	2b04      	cmp	r3, #4
 800a19c:	bf02      	ittt	eq
 800a19e:	68e5      	ldreq	r5, [r4, #12]
 800a1a0:	6833      	ldreq	r3, [r6, #0]
 800a1a2:	1aed      	subeq	r5, r5, r3
 800a1a4:	68a3      	ldr	r3, [r4, #8]
 800a1a6:	bf0c      	ite	eq
 800a1a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1ac:	2500      	movne	r5, #0
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	bfc4      	itt	gt
 800a1b2:	1a9b      	subgt	r3, r3, r2
 800a1b4:	18ed      	addgt	r5, r5, r3
 800a1b6:	2600      	movs	r6, #0
 800a1b8:	341a      	adds	r4, #26
 800a1ba:	42b5      	cmp	r5, r6
 800a1bc:	d11a      	bne.n	800a1f4 <_printf_common+0xc8>
 800a1be:	2000      	movs	r0, #0
 800a1c0:	e008      	b.n	800a1d4 <_printf_common+0xa8>
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	4652      	mov	r2, sl
 800a1c6:	4641      	mov	r1, r8
 800a1c8:	4638      	mov	r0, r7
 800a1ca:	47c8      	blx	r9
 800a1cc:	3001      	adds	r0, #1
 800a1ce:	d103      	bne.n	800a1d8 <_printf_common+0xac>
 800a1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1d8:	3501      	adds	r5, #1
 800a1da:	e7c6      	b.n	800a16a <_printf_common+0x3e>
 800a1dc:	18e1      	adds	r1, r4, r3
 800a1de:	1c5a      	adds	r2, r3, #1
 800a1e0:	2030      	movs	r0, #48	@ 0x30
 800a1e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a1e6:	4422      	add	r2, r4
 800a1e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a1ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a1f0:	3302      	adds	r3, #2
 800a1f2:	e7c7      	b.n	800a184 <_printf_common+0x58>
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	4622      	mov	r2, r4
 800a1f8:	4641      	mov	r1, r8
 800a1fa:	4638      	mov	r0, r7
 800a1fc:	47c8      	blx	r9
 800a1fe:	3001      	adds	r0, #1
 800a200:	d0e6      	beq.n	800a1d0 <_printf_common+0xa4>
 800a202:	3601      	adds	r6, #1
 800a204:	e7d9      	b.n	800a1ba <_printf_common+0x8e>
	...

0800a208 <_printf_i>:
 800a208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a20c:	7e0f      	ldrb	r7, [r1, #24]
 800a20e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a210:	2f78      	cmp	r7, #120	@ 0x78
 800a212:	4691      	mov	r9, r2
 800a214:	4680      	mov	r8, r0
 800a216:	460c      	mov	r4, r1
 800a218:	469a      	mov	sl, r3
 800a21a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a21e:	d807      	bhi.n	800a230 <_printf_i+0x28>
 800a220:	2f62      	cmp	r7, #98	@ 0x62
 800a222:	d80a      	bhi.n	800a23a <_printf_i+0x32>
 800a224:	2f00      	cmp	r7, #0
 800a226:	f000 80d2 	beq.w	800a3ce <_printf_i+0x1c6>
 800a22a:	2f58      	cmp	r7, #88	@ 0x58
 800a22c:	f000 80b9 	beq.w	800a3a2 <_printf_i+0x19a>
 800a230:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a234:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a238:	e03a      	b.n	800a2b0 <_printf_i+0xa8>
 800a23a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a23e:	2b15      	cmp	r3, #21
 800a240:	d8f6      	bhi.n	800a230 <_printf_i+0x28>
 800a242:	a101      	add	r1, pc, #4	@ (adr r1, 800a248 <_printf_i+0x40>)
 800a244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a248:	0800a2a1 	.word	0x0800a2a1
 800a24c:	0800a2b5 	.word	0x0800a2b5
 800a250:	0800a231 	.word	0x0800a231
 800a254:	0800a231 	.word	0x0800a231
 800a258:	0800a231 	.word	0x0800a231
 800a25c:	0800a231 	.word	0x0800a231
 800a260:	0800a2b5 	.word	0x0800a2b5
 800a264:	0800a231 	.word	0x0800a231
 800a268:	0800a231 	.word	0x0800a231
 800a26c:	0800a231 	.word	0x0800a231
 800a270:	0800a231 	.word	0x0800a231
 800a274:	0800a3b5 	.word	0x0800a3b5
 800a278:	0800a2df 	.word	0x0800a2df
 800a27c:	0800a36f 	.word	0x0800a36f
 800a280:	0800a231 	.word	0x0800a231
 800a284:	0800a231 	.word	0x0800a231
 800a288:	0800a3d7 	.word	0x0800a3d7
 800a28c:	0800a231 	.word	0x0800a231
 800a290:	0800a2df 	.word	0x0800a2df
 800a294:	0800a231 	.word	0x0800a231
 800a298:	0800a231 	.word	0x0800a231
 800a29c:	0800a377 	.word	0x0800a377
 800a2a0:	6833      	ldr	r3, [r6, #0]
 800a2a2:	1d1a      	adds	r2, r3, #4
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	6032      	str	r2, [r6, #0]
 800a2a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e09d      	b.n	800a3f0 <_printf_i+0x1e8>
 800a2b4:	6833      	ldr	r3, [r6, #0]
 800a2b6:	6820      	ldr	r0, [r4, #0]
 800a2b8:	1d19      	adds	r1, r3, #4
 800a2ba:	6031      	str	r1, [r6, #0]
 800a2bc:	0606      	lsls	r6, r0, #24
 800a2be:	d501      	bpl.n	800a2c4 <_printf_i+0xbc>
 800a2c0:	681d      	ldr	r5, [r3, #0]
 800a2c2:	e003      	b.n	800a2cc <_printf_i+0xc4>
 800a2c4:	0645      	lsls	r5, r0, #25
 800a2c6:	d5fb      	bpl.n	800a2c0 <_printf_i+0xb8>
 800a2c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a2cc:	2d00      	cmp	r5, #0
 800a2ce:	da03      	bge.n	800a2d8 <_printf_i+0xd0>
 800a2d0:	232d      	movs	r3, #45	@ 0x2d
 800a2d2:	426d      	negs	r5, r5
 800a2d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2d8:	4859      	ldr	r0, [pc, #356]	@ (800a440 <_printf_i+0x238>)
 800a2da:	230a      	movs	r3, #10
 800a2dc:	e011      	b.n	800a302 <_printf_i+0xfa>
 800a2de:	6821      	ldr	r1, [r4, #0]
 800a2e0:	6833      	ldr	r3, [r6, #0]
 800a2e2:	0608      	lsls	r0, r1, #24
 800a2e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a2e8:	d402      	bmi.n	800a2f0 <_printf_i+0xe8>
 800a2ea:	0649      	lsls	r1, r1, #25
 800a2ec:	bf48      	it	mi
 800a2ee:	b2ad      	uxthmi	r5, r5
 800a2f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a2f2:	4853      	ldr	r0, [pc, #332]	@ (800a440 <_printf_i+0x238>)
 800a2f4:	6033      	str	r3, [r6, #0]
 800a2f6:	bf14      	ite	ne
 800a2f8:	230a      	movne	r3, #10
 800a2fa:	2308      	moveq	r3, #8
 800a2fc:	2100      	movs	r1, #0
 800a2fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a302:	6866      	ldr	r6, [r4, #4]
 800a304:	60a6      	str	r6, [r4, #8]
 800a306:	2e00      	cmp	r6, #0
 800a308:	bfa2      	ittt	ge
 800a30a:	6821      	ldrge	r1, [r4, #0]
 800a30c:	f021 0104 	bicge.w	r1, r1, #4
 800a310:	6021      	strge	r1, [r4, #0]
 800a312:	b90d      	cbnz	r5, 800a318 <_printf_i+0x110>
 800a314:	2e00      	cmp	r6, #0
 800a316:	d04b      	beq.n	800a3b0 <_printf_i+0x1a8>
 800a318:	4616      	mov	r6, r2
 800a31a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a31e:	fb03 5711 	mls	r7, r3, r1, r5
 800a322:	5dc7      	ldrb	r7, [r0, r7]
 800a324:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a328:	462f      	mov	r7, r5
 800a32a:	42bb      	cmp	r3, r7
 800a32c:	460d      	mov	r5, r1
 800a32e:	d9f4      	bls.n	800a31a <_printf_i+0x112>
 800a330:	2b08      	cmp	r3, #8
 800a332:	d10b      	bne.n	800a34c <_printf_i+0x144>
 800a334:	6823      	ldr	r3, [r4, #0]
 800a336:	07df      	lsls	r7, r3, #31
 800a338:	d508      	bpl.n	800a34c <_printf_i+0x144>
 800a33a:	6923      	ldr	r3, [r4, #16]
 800a33c:	6861      	ldr	r1, [r4, #4]
 800a33e:	4299      	cmp	r1, r3
 800a340:	bfde      	ittt	le
 800a342:	2330      	movle	r3, #48	@ 0x30
 800a344:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a348:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a34c:	1b92      	subs	r2, r2, r6
 800a34e:	6122      	str	r2, [r4, #16]
 800a350:	f8cd a000 	str.w	sl, [sp]
 800a354:	464b      	mov	r3, r9
 800a356:	aa03      	add	r2, sp, #12
 800a358:	4621      	mov	r1, r4
 800a35a:	4640      	mov	r0, r8
 800a35c:	f7ff fee6 	bl	800a12c <_printf_common>
 800a360:	3001      	adds	r0, #1
 800a362:	d14a      	bne.n	800a3fa <_printf_i+0x1f2>
 800a364:	f04f 30ff 	mov.w	r0, #4294967295
 800a368:	b004      	add	sp, #16
 800a36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a36e:	6823      	ldr	r3, [r4, #0]
 800a370:	f043 0320 	orr.w	r3, r3, #32
 800a374:	6023      	str	r3, [r4, #0]
 800a376:	4833      	ldr	r0, [pc, #204]	@ (800a444 <_printf_i+0x23c>)
 800a378:	2778      	movs	r7, #120	@ 0x78
 800a37a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a37e:	6823      	ldr	r3, [r4, #0]
 800a380:	6831      	ldr	r1, [r6, #0]
 800a382:	061f      	lsls	r7, r3, #24
 800a384:	f851 5b04 	ldr.w	r5, [r1], #4
 800a388:	d402      	bmi.n	800a390 <_printf_i+0x188>
 800a38a:	065f      	lsls	r7, r3, #25
 800a38c:	bf48      	it	mi
 800a38e:	b2ad      	uxthmi	r5, r5
 800a390:	6031      	str	r1, [r6, #0]
 800a392:	07d9      	lsls	r1, r3, #31
 800a394:	bf44      	itt	mi
 800a396:	f043 0320 	orrmi.w	r3, r3, #32
 800a39a:	6023      	strmi	r3, [r4, #0]
 800a39c:	b11d      	cbz	r5, 800a3a6 <_printf_i+0x19e>
 800a39e:	2310      	movs	r3, #16
 800a3a0:	e7ac      	b.n	800a2fc <_printf_i+0xf4>
 800a3a2:	4827      	ldr	r0, [pc, #156]	@ (800a440 <_printf_i+0x238>)
 800a3a4:	e7e9      	b.n	800a37a <_printf_i+0x172>
 800a3a6:	6823      	ldr	r3, [r4, #0]
 800a3a8:	f023 0320 	bic.w	r3, r3, #32
 800a3ac:	6023      	str	r3, [r4, #0]
 800a3ae:	e7f6      	b.n	800a39e <_printf_i+0x196>
 800a3b0:	4616      	mov	r6, r2
 800a3b2:	e7bd      	b.n	800a330 <_printf_i+0x128>
 800a3b4:	6833      	ldr	r3, [r6, #0]
 800a3b6:	6825      	ldr	r5, [r4, #0]
 800a3b8:	6961      	ldr	r1, [r4, #20]
 800a3ba:	1d18      	adds	r0, r3, #4
 800a3bc:	6030      	str	r0, [r6, #0]
 800a3be:	062e      	lsls	r6, r5, #24
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	d501      	bpl.n	800a3c8 <_printf_i+0x1c0>
 800a3c4:	6019      	str	r1, [r3, #0]
 800a3c6:	e002      	b.n	800a3ce <_printf_i+0x1c6>
 800a3c8:	0668      	lsls	r0, r5, #25
 800a3ca:	d5fb      	bpl.n	800a3c4 <_printf_i+0x1bc>
 800a3cc:	8019      	strh	r1, [r3, #0]
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	6123      	str	r3, [r4, #16]
 800a3d2:	4616      	mov	r6, r2
 800a3d4:	e7bc      	b.n	800a350 <_printf_i+0x148>
 800a3d6:	6833      	ldr	r3, [r6, #0]
 800a3d8:	1d1a      	adds	r2, r3, #4
 800a3da:	6032      	str	r2, [r6, #0]
 800a3dc:	681e      	ldr	r6, [r3, #0]
 800a3de:	6862      	ldr	r2, [r4, #4]
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	f7f5 ff84 	bl	80002f0 <memchr>
 800a3e8:	b108      	cbz	r0, 800a3ee <_printf_i+0x1e6>
 800a3ea:	1b80      	subs	r0, r0, r6
 800a3ec:	6060      	str	r0, [r4, #4]
 800a3ee:	6863      	ldr	r3, [r4, #4]
 800a3f0:	6123      	str	r3, [r4, #16]
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3f8:	e7aa      	b.n	800a350 <_printf_i+0x148>
 800a3fa:	6923      	ldr	r3, [r4, #16]
 800a3fc:	4632      	mov	r2, r6
 800a3fe:	4649      	mov	r1, r9
 800a400:	4640      	mov	r0, r8
 800a402:	47d0      	blx	sl
 800a404:	3001      	adds	r0, #1
 800a406:	d0ad      	beq.n	800a364 <_printf_i+0x15c>
 800a408:	6823      	ldr	r3, [r4, #0]
 800a40a:	079b      	lsls	r3, r3, #30
 800a40c:	d413      	bmi.n	800a436 <_printf_i+0x22e>
 800a40e:	68e0      	ldr	r0, [r4, #12]
 800a410:	9b03      	ldr	r3, [sp, #12]
 800a412:	4298      	cmp	r0, r3
 800a414:	bfb8      	it	lt
 800a416:	4618      	movlt	r0, r3
 800a418:	e7a6      	b.n	800a368 <_printf_i+0x160>
 800a41a:	2301      	movs	r3, #1
 800a41c:	4632      	mov	r2, r6
 800a41e:	4649      	mov	r1, r9
 800a420:	4640      	mov	r0, r8
 800a422:	47d0      	blx	sl
 800a424:	3001      	adds	r0, #1
 800a426:	d09d      	beq.n	800a364 <_printf_i+0x15c>
 800a428:	3501      	adds	r5, #1
 800a42a:	68e3      	ldr	r3, [r4, #12]
 800a42c:	9903      	ldr	r1, [sp, #12]
 800a42e:	1a5b      	subs	r3, r3, r1
 800a430:	42ab      	cmp	r3, r5
 800a432:	dcf2      	bgt.n	800a41a <_printf_i+0x212>
 800a434:	e7eb      	b.n	800a40e <_printf_i+0x206>
 800a436:	2500      	movs	r5, #0
 800a438:	f104 0619 	add.w	r6, r4, #25
 800a43c:	e7f5      	b.n	800a42a <_printf_i+0x222>
 800a43e:	bf00      	nop
 800a440:	0800a5dd 	.word	0x0800a5dd
 800a444:	0800a5ee 	.word	0x0800a5ee

0800a448 <memmove>:
 800a448:	4288      	cmp	r0, r1
 800a44a:	b510      	push	{r4, lr}
 800a44c:	eb01 0402 	add.w	r4, r1, r2
 800a450:	d902      	bls.n	800a458 <memmove+0x10>
 800a452:	4284      	cmp	r4, r0
 800a454:	4623      	mov	r3, r4
 800a456:	d807      	bhi.n	800a468 <memmove+0x20>
 800a458:	1e43      	subs	r3, r0, #1
 800a45a:	42a1      	cmp	r1, r4
 800a45c:	d008      	beq.n	800a470 <memmove+0x28>
 800a45e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a462:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a466:	e7f8      	b.n	800a45a <memmove+0x12>
 800a468:	4402      	add	r2, r0
 800a46a:	4601      	mov	r1, r0
 800a46c:	428a      	cmp	r2, r1
 800a46e:	d100      	bne.n	800a472 <memmove+0x2a>
 800a470:	bd10      	pop	{r4, pc}
 800a472:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a476:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a47a:	e7f7      	b.n	800a46c <memmove+0x24>

0800a47c <_sbrk_r>:
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	4d06      	ldr	r5, [pc, #24]	@ (800a498 <_sbrk_r+0x1c>)
 800a480:	2300      	movs	r3, #0
 800a482:	4604      	mov	r4, r0
 800a484:	4608      	mov	r0, r1
 800a486:	602b      	str	r3, [r5, #0]
 800a488:	f7f6 ff70 	bl	800136c <_sbrk>
 800a48c:	1c43      	adds	r3, r0, #1
 800a48e:	d102      	bne.n	800a496 <_sbrk_r+0x1a>
 800a490:	682b      	ldr	r3, [r5, #0]
 800a492:	b103      	cbz	r3, 800a496 <_sbrk_r+0x1a>
 800a494:	6023      	str	r3, [r4, #0]
 800a496:	bd38      	pop	{r3, r4, r5, pc}
 800a498:	24000948 	.word	0x24000948

0800a49c <memcpy>:
 800a49c:	440a      	add	r2, r1
 800a49e:	4291      	cmp	r1, r2
 800a4a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4a4:	d100      	bne.n	800a4a8 <memcpy+0xc>
 800a4a6:	4770      	bx	lr
 800a4a8:	b510      	push	{r4, lr}
 800a4aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4b2:	4291      	cmp	r1, r2
 800a4b4:	d1f9      	bne.n	800a4aa <memcpy+0xe>
 800a4b6:	bd10      	pop	{r4, pc}

0800a4b8 <_realloc_r>:
 800a4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4bc:	4680      	mov	r8, r0
 800a4be:	4615      	mov	r5, r2
 800a4c0:	460c      	mov	r4, r1
 800a4c2:	b921      	cbnz	r1, 800a4ce <_realloc_r+0x16>
 800a4c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c8:	4611      	mov	r1, r2
 800a4ca:	f7ff bc4b 	b.w	8009d64 <_malloc_r>
 800a4ce:	b92a      	cbnz	r2, 800a4dc <_realloc_r+0x24>
 800a4d0:	f7ff fbdc 	bl	8009c8c <_free_r>
 800a4d4:	2400      	movs	r4, #0
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4dc:	f000 f81a 	bl	800a514 <_malloc_usable_size_r>
 800a4e0:	4285      	cmp	r5, r0
 800a4e2:	4606      	mov	r6, r0
 800a4e4:	d802      	bhi.n	800a4ec <_realloc_r+0x34>
 800a4e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a4ea:	d8f4      	bhi.n	800a4d6 <_realloc_r+0x1e>
 800a4ec:	4629      	mov	r1, r5
 800a4ee:	4640      	mov	r0, r8
 800a4f0:	f7ff fc38 	bl	8009d64 <_malloc_r>
 800a4f4:	4607      	mov	r7, r0
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	d0ec      	beq.n	800a4d4 <_realloc_r+0x1c>
 800a4fa:	42b5      	cmp	r5, r6
 800a4fc:	462a      	mov	r2, r5
 800a4fe:	4621      	mov	r1, r4
 800a500:	bf28      	it	cs
 800a502:	4632      	movcs	r2, r6
 800a504:	f7ff ffca 	bl	800a49c <memcpy>
 800a508:	4621      	mov	r1, r4
 800a50a:	4640      	mov	r0, r8
 800a50c:	f7ff fbbe 	bl	8009c8c <_free_r>
 800a510:	463c      	mov	r4, r7
 800a512:	e7e0      	b.n	800a4d6 <_realloc_r+0x1e>

0800a514 <_malloc_usable_size_r>:
 800a514:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a518:	1f18      	subs	r0, r3, #4
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	bfbc      	itt	lt
 800a51e:	580b      	ldrlt	r3, [r1, r0]
 800a520:	18c0      	addlt	r0, r0, r3
 800a522:	4770      	bx	lr

0800a524 <_init>:
 800a524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a526:	bf00      	nop
 800a528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a52a:	bc08      	pop	{r3}
 800a52c:	469e      	mov	lr, r3
 800a52e:	4770      	bx	lr

0800a530 <_fini>:
 800a530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a532:	bf00      	nop
 800a534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a536:	bc08      	pop	{r3}
 800a538:	469e      	mov	lr, r3
 800a53a:	4770      	bx	lr

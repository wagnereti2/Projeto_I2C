
Projeto_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a434  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800a6d4  0800a6d4  0000b6d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a7a8  0800a7a8  0000b7a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a7b0  0800a7b0  0000b7b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a7b4  0800a7b4  0000b7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800a7b8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800a81c  0000c064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800a87c  0000c0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000848  24000124  0800a8dc  0000c124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400096c  0800a8dc  0000c96c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce8d  00000000  00000000  0000c152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000315d  00000000  00000000  00028fdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  0002c140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f1a  00000000  00000000  0002d498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000385f4  00000000  00000000  0002e3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c600  00000000  00000000  000669a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00162743  00000000  00000000  00082fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e56e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005848  00000000  00000000  001e572c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  001eaf74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a6bc 	.word	0x0800a6bc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800a6bc 	.word	0x0800a6bc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f000 ff98 	bl	80015b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f94c 	bl	8000924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 fad4 	bl	8000c38 <MX_GPIO_Init>
  MX_ETH_Init();
 8000690:	f000 f9c8 	bl	8000a24 <MX_ETH_Init>
  MX_I2C1_Init();
 8000694:	f000 fa12 	bl	8000abc <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000698:	f000 fa50 	bl	8000b3c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800069c:	f000 fa9a 	bl	8000bd4 <MX_USB_OTG_FS_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_UART_Receive_IT(&huart3, rx_buffer, sizeof(rx_buffer));
 80006a0:	2209      	movs	r2, #9
 80006a2:	4904      	ldr	r1, [pc, #16]	@ (80006b4 <main+0x34>)
 80006a4:	4804      	ldr	r0, [pc, #16]	@ (80006b8 <main+0x38>)
 80006a6:	f006 ff6d 	bl	8007584 <HAL_UART_Receive_IT>

  	  ExecuteProgram();
 80006aa:	f000 f807 	bl	80006bc <ExecuteProgram>
  {
 80006ae:	bf00      	nop
 80006b0:	e7f6      	b.n	80006a0 <main+0x20>
 80006b2:	bf00      	nop
 80006b4:	24000808 	.word	0x24000808
 80006b8:	2400027c 	.word	0x2400027c

080006bc <ExecuteProgram>:
  }
  /* USER CODE END 3 */
}

void ExecuteProgram()
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	if(execute_flag == '1'){
 80006c0:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <ExecuteProgram+0x40>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b31      	cmp	r3, #49	@ 0x31
 80006c6:	d102      	bne.n	80006ce <ExecuteProgram+0x12>
		Read_LDR();
 80006c8:	f000 f81a 	bl	8000700 <Read_LDR>
	}
	else if(execute_flag == '4'){
		Write_DAC();
	}

}
 80006cc:	e013      	b.n	80006f6 <ExecuteProgram+0x3a>
	else if(execute_flag == '2'){
 80006ce:	4b0b      	ldr	r3, [pc, #44]	@ (80006fc <ExecuteProgram+0x40>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b32      	cmp	r3, #50	@ 0x32
 80006d4:	d102      	bne.n	80006dc <ExecuteProgram+0x20>
		Read_Temp();
 80006d6:	f000 f857 	bl	8000788 <Read_Temp>
}
 80006da:	e00c      	b.n	80006f6 <ExecuteProgram+0x3a>
	else if(execute_flag == '3'){
 80006dc:	4b07      	ldr	r3, [pc, #28]	@ (80006fc <ExecuteProgram+0x40>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b33      	cmp	r3, #51	@ 0x33
 80006e2:	d102      	bne.n	80006ea <ExecuteProgram+0x2e>
		Read_Pot();
 80006e4:	f000 f894 	bl	8000810 <Read_Pot>
}
 80006e8:	e005      	b.n	80006f6 <ExecuteProgram+0x3a>
	else if(execute_flag == '4'){
 80006ea:	4b04      	ldr	r3, [pc, #16]	@ (80006fc <ExecuteProgram+0x40>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b34      	cmp	r3, #52	@ 0x34
 80006f0:	d101      	bne.n	80006f6 <ExecuteProgram+0x3a>
		Write_DAC();
 80006f2:	f000 f8d1 	bl	8000898 <Write_DAC>
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	24000001 	.word	0x24000001

08000700 <Read_LDR>:

void Read_LDR(){
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
	 // Read analog data from A0 (channel 0) of the PCF8591
		  uint8_t LDR = PCF8591_ReadAnalog(0);
 8000706:	2000      	movs	r0, #0
 8000708:	f000 fb72 	bl	8000df0 <PCF8591_ReadAnalog>
 800070c:	4603      	mov	r3, r0
 800070e:	73fb      	strb	r3, [r7, #15]
		  HAL_Delay(100); // Wait before next reading
 8000710:	2064      	movs	r0, #100	@ 0x64
 8000712:	f000 ffe3 	bl	80016dc <HAL_Delay>
		  char counterMessage[9];

		  snprintf(counterMessage, 8, "%s\r\n", " AIN0: ");
 8000716:	1d38      	adds	r0, r7, #4
 8000718:	4b16      	ldr	r3, [pc, #88]	@ (8000774 <Read_LDR+0x74>)
 800071a:	4a17      	ldr	r2, [pc, #92]	@ (8000778 <Read_LDR+0x78>)
 800071c:	2108      	movs	r1, #8
 800071e:	f009 fb07 	bl	8009d30 <sniprintf>
		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff fddb 	bl	80002e0 <strlen>
 800072a:	4603      	mov	r3, r0
 800072c:	b29a      	uxth	r2, r3
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	4619      	mov	r1, r3
 8000732:	4812      	ldr	r0, [pc, #72]	@ (800077c <Read_LDR+0x7c>)
 8000734:	f006 fe92 	bl	800745c <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 8000738:	2064      	movs	r0, #100	@ 0x64
 800073a:	f000 ffcf 	bl	80016dc <HAL_Delay>

		  snprintf(counterMessage, 4, "%d\r\n", LDR);
 800073e:	7bfb      	ldrb	r3, [r7, #15]
 8000740:	1d38      	adds	r0, r7, #4
 8000742:	4a0f      	ldr	r2, [pc, #60]	@ (8000780 <Read_LDR+0x80>)
 8000744:	2104      	movs	r1, #4
 8000746:	f009 faf3 	bl	8009d30 <sniprintf>
		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff fdc7 	bl	80002e0 <strlen>
 8000752:	4603      	mov	r3, r0
 8000754:	b29a      	uxth	r2, r3
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4619      	mov	r1, r3
 800075a:	4808      	ldr	r0, [pc, #32]	@ (800077c <Read_LDR+0x7c>)
 800075c:	f006 fe7e 	bl	800745c <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 8000760:	2064      	movs	r0, #100	@ 0x64
 8000762:	f000 ffbb 	bl	80016dc <HAL_Delay>
		  execute_flag = '0';
 8000766:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <Read_LDR+0x84>)
 8000768:	2230      	movs	r2, #48	@ 0x30
 800076a:	701a      	strb	r2, [r3, #0]


}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	0800a6d4 	.word	0x0800a6d4
 8000778:	0800a6dc 	.word	0x0800a6dc
 800077c:	2400027c 	.word	0x2400027c
 8000780:	0800a6e4 	.word	0x0800a6e4
 8000784:	24000001 	.word	0x24000001

08000788 <Read_Temp>:

void Read_Temp(){
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
	 // Read analog data from A1 (channel 1) of the PCF8591
		  uint8_t Temp = PCF8591_ReadAnalog(1);
 800078e:	2001      	movs	r0, #1
 8000790:	f000 fb2e 	bl	8000df0 <PCF8591_ReadAnalog>
 8000794:	4603      	mov	r3, r0
 8000796:	73fb      	strb	r3, [r7, #15]
		  HAL_Delay(100); // Wait before next reading
 8000798:	2064      	movs	r0, #100	@ 0x64
 800079a:	f000 ff9f 	bl	80016dc <HAL_Delay>
		  char counterMessage[9];

		  snprintf(counterMessage, 8, "%s\r\n", " AIN1: ");
 800079e:	1d38      	adds	r0, r7, #4
 80007a0:	4b16      	ldr	r3, [pc, #88]	@ (80007fc <Read_Temp+0x74>)
 80007a2:	4a17      	ldr	r2, [pc, #92]	@ (8000800 <Read_Temp+0x78>)
 80007a4:	2108      	movs	r1, #8
 80007a6:	f009 fac3 	bl	8009d30 <sniprintf>
		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fd97 	bl	80002e0 <strlen>
 80007b2:	4603      	mov	r3, r0
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	4619      	mov	r1, r3
 80007ba:	4812      	ldr	r0, [pc, #72]	@ (8000804 <Read_Temp+0x7c>)
 80007bc:	f006 fe4e 	bl	800745c <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 80007c0:	2064      	movs	r0, #100	@ 0x64
 80007c2:	f000 ff8b 	bl	80016dc <HAL_Delay>

		  snprintf(counterMessage, 4, "%d\r\n", Temp);
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
 80007c8:	1d38      	adds	r0, r7, #4
 80007ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000808 <Read_Temp+0x80>)
 80007cc:	2104      	movs	r1, #4
 80007ce:	f009 faaf 	bl	8009d30 <sniprintf>
  		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fd83 	bl	80002e0 <strlen>
 80007da:	4603      	mov	r3, r0
 80007dc:	b29a      	uxth	r2, r3
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	4619      	mov	r1, r3
 80007e2:	4808      	ldr	r0, [pc, #32]	@ (8000804 <Read_Temp+0x7c>)
 80007e4:	f006 fe3a 	bl	800745c <HAL_UART_Transmit_IT>
  		  HAL_Delay(100);
 80007e8:	2064      	movs	r0, #100	@ 0x64
 80007ea:	f000 ff77 	bl	80016dc <HAL_Delay>
  		  execute_flag = '0';
 80007ee:	4b07      	ldr	r3, [pc, #28]	@ (800080c <Read_Temp+0x84>)
 80007f0:	2230      	movs	r2, #48	@ 0x30
 80007f2:	701a      	strb	r2, [r3, #0]

}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	0800a6ec 	.word	0x0800a6ec
 8000800:	0800a6dc 	.word	0x0800a6dc
 8000804:	2400027c 	.word	0x2400027c
 8000808:	0800a6e4 	.word	0x0800a6e4
 800080c:	24000001 	.word	0x24000001

08000810 <Read_Pot>:

void Read_Pot(){
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
	 uint8_t Pot = PCF8591_ReadAnalog(3);
 8000816:	2003      	movs	r0, #3
 8000818:	f000 faea 	bl	8000df0 <PCF8591_ReadAnalog>
 800081c:	4603      	mov	r3, r0
 800081e:	73fb      	strb	r3, [r7, #15]
		  // Process the analog_value or send it over UART/Display it
		  HAL_Delay(100); // Wait for 1 second before next reading
 8000820:	2064      	movs	r0, #100	@ 0x64
 8000822:	f000 ff5b 	bl	80016dc <HAL_Delay>
		  char counterMessage[9];

		  snprintf(counterMessage, 8, "%s\r\n", " AIN3: ");
 8000826:	1d38      	adds	r0, r7, #4
 8000828:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <Read_Pot+0x74>)
 800082a:	4a17      	ldr	r2, [pc, #92]	@ (8000888 <Read_Pot+0x78>)
 800082c:	2108      	movs	r1, #8
 800082e:	f009 fa7f 	bl	8009d30 <sniprintf>
		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fd53 	bl	80002e0 <strlen>
 800083a:	4603      	mov	r3, r0
 800083c:	b29a      	uxth	r2, r3
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	4619      	mov	r1, r3
 8000842:	4812      	ldr	r0, [pc, #72]	@ (800088c <Read_Pot+0x7c>)
 8000844:	f006 fe0a 	bl	800745c <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 8000848:	2064      	movs	r0, #100	@ 0x64
 800084a:	f000 ff47 	bl	80016dc <HAL_Delay>

		  snprintf(counterMessage, 4, "%d\r\n", Pot);
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	1d38      	adds	r0, r7, #4
 8000852:	4a0f      	ldr	r2, [pc, #60]	@ (8000890 <Read_Pot+0x80>)
 8000854:	2104      	movs	r1, #4
 8000856:	f009 fa6b 	bl	8009d30 <sniprintf>
   		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fd3f 	bl	80002e0 <strlen>
 8000862:	4603      	mov	r3, r0
 8000864:	b29a      	uxth	r2, r3
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	4619      	mov	r1, r3
 800086a:	4808      	ldr	r0, [pc, #32]	@ (800088c <Read_Pot+0x7c>)
 800086c:	f006 fdf6 	bl	800745c <HAL_UART_Transmit_IT>
     	  HAL_Delay(100);
 8000870:	2064      	movs	r0, #100	@ 0x64
 8000872:	f000 ff33 	bl	80016dc <HAL_Delay>
   		  execute_flag = '0';
 8000876:	4b07      	ldr	r3, [pc, #28]	@ (8000894 <Read_Pot+0x84>)
 8000878:	2230      	movs	r2, #48	@ 0x30
 800087a:	701a      	strb	r2, [r3, #0]
}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	0800a6f4 	.word	0x0800a6f4
 8000888:	0800a6dc 	.word	0x0800a6dc
 800088c:	2400027c 	.word	0x2400027c
 8000890:	0800a6e4 	.word	0x0800a6e4
 8000894:	24000001 	.word	0x24000001

08000898 <Write_DAC>:

void Write_DAC(){
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af02      	add	r7, sp, #8

	{       // Teste do DAC 2 - Wagner
	        // Configura o valor do DAC no PCF8591
	        uint8_t data[2] = {0x40, dac_value};  // 0x40 seleciona o DAC, seguido do valor do DAC
 800089e:	2340      	movs	r3, #64	@ 0x40
 80008a0:	713b      	strb	r3, [r7, #4]
 80008a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000910 <Write_DAC+0x78>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	717b      	strb	r3, [r7, #5]
	        if (HAL_I2C_Master_Transmit(&hi2c1, PCF8591_ADDRESS, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 80008a8:	1d3a      	adds	r2, r7, #4
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	2302      	movs	r3, #2
 80008b2:	2190      	movs	r1, #144	@ 0x90
 80008b4:	4817      	ldr	r0, [pc, #92]	@ (8000914 <Write_DAC+0x7c>)
 80008b6:	f002 f953 	bl	8002b60 <HAL_I2C_Master_Transmit>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <Write_DAC+0x2c>
	            Error_Handler();
 80008c0:	f000 fb00 	bl	8000ec4 <Error_Handler>
	        }

	        // Exibe o valor escrito no DAC no terminal via UART
	        snprintf(uart_buffer, sizeof(uart_buffer), "DAC Value: %d\r\n", dac_value);
 80008c4:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <Write_DAC+0x78>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	4a13      	ldr	r2, [pc, #76]	@ (8000918 <Write_DAC+0x80>)
 80008ca:	2114      	movs	r1, #20
 80008cc:	4813      	ldr	r0, [pc, #76]	@ (800091c <Write_DAC+0x84>)
 80008ce:	f009 fa2f 	bl	8009d30 <sniprintf>
	        HAL_UART_Transmit(&huart3, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80008d2:	4812      	ldr	r0, [pc, #72]	@ (800091c <Write_DAC+0x84>)
 80008d4:	f7ff fd04 	bl	80002e0 <strlen>
 80008d8:	4603      	mov	r3, r0
 80008da:	b29a      	uxth	r2, r3
 80008dc:	f04f 33ff 	mov.w	r3, #4294967295
 80008e0:	490e      	ldr	r1, [pc, #56]	@ (800091c <Write_DAC+0x84>)
 80008e2:	480f      	ldr	r0, [pc, #60]	@ (8000920 <Write_DAC+0x88>)
 80008e4:	f006 fd2c 	bl	8007340 <HAL_UART_Transmit>

	        // Aumenta o valor do DAC com limite de 0 a 255
	        dac_value = (dac_value + 10) % 256;
 80008e8:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <Write_DAC+0x78>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	330a      	adds	r3, #10
 80008ee:	425a      	negs	r2, r3
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	b2d2      	uxtb	r2, r2
 80008f4:	bf58      	it	pl
 80008f6:	4253      	negpl	r3, r2
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b05      	ldr	r3, [pc, #20]	@ (8000910 <Write_DAC+0x78>)
 80008fc:	701a      	strb	r2, [r3, #0]

	        HAL_Delay(1000); // Intervalo de 1 segundo para cada envio
 80008fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000902:	f000 feeb 	bl	80016dc <HAL_Delay>
	    }
	}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	24000000 	.word	0x24000000
 8000914:	24000228 	.word	0x24000228
 8000918:	0800a6fc 	.word	0x0800a6fc
 800091c:	240007f4 	.word	0x240007f4
 8000920:	2400027c 	.word	0x2400027c

08000924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b09c      	sub	sp, #112	@ 0x70
 8000928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800092e:	224c      	movs	r2, #76	@ 0x4c
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f009 fa30 	bl	8009d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2220      	movs	r2, #32
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f009 fa2a 	bl	8009d98 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000944:	2002      	movs	r0, #2
 8000946:	f003 fe4f 	bl	80045e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b33      	ldr	r3, [pc, #204]	@ (8000a1c <SystemClock_Config+0xf8>)
 8000950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000952:	4a32      	ldr	r2, [pc, #200]	@ (8000a1c <SystemClock_Config+0xf8>)
 8000954:	f023 0301 	bic.w	r3, r3, #1
 8000958:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800095a:	4b30      	ldr	r3, [pc, #192]	@ (8000a1c <SystemClock_Config+0xf8>)
 800095c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	4b2e      	ldr	r3, [pc, #184]	@ (8000a20 <SystemClock_Config+0xfc>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800096c:	4a2c      	ldr	r2, [pc, #176]	@ (8000a20 <SystemClock_Config+0xfc>)
 800096e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000972:	6193      	str	r3, [r2, #24]
 8000974:	4b2a      	ldr	r3, [pc, #168]	@ (8000a20 <SystemClock_Config+0xfc>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000980:	bf00      	nop
 8000982:	4b27      	ldr	r3, [pc, #156]	@ (8000a20 <SystemClock_Config+0xfc>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800098a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800098e:	d1f8      	bne.n	8000982 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000990:	2303      	movs	r3, #3
 8000992:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000994:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000998:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800099a:	2301      	movs	r3, #1
 800099c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800099e:	2340      	movs	r3, #64	@ 0x40
 80009a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a2:	2302      	movs	r3, #2
 80009a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a6:	2302      	movs	r3, #2
 80009a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009aa:	2301      	movs	r3, #1
 80009ac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80009ae:	2318      	movs	r3, #24
 80009b0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009b2:	2302      	movs	r3, #2
 80009b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009b6:	2304      	movs	r3, #4
 80009b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009ba:	2302      	movs	r3, #2
 80009bc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009be:	230c      	movs	r3, #12
 80009c0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ce:	4618      	mov	r0, r3
 80009d0:	f003 fe54 	bl	800467c <HAL_RCC_OscConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0xba>
  {
    Error_Handler();
 80009da:	f000 fa73 	bl	8000ec4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009de:	233f      	movs	r3, #63	@ 0x3f
 80009e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2101      	movs	r1, #1
 8000a02:	4618      	mov	r0, r3
 8000a04:	f004 fa94 	bl	8004f30 <HAL_RCC_ClockConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000a0e:	f000 fa59 	bl	8000ec4 <Error_Handler>
  }
}
 8000a12:	bf00      	nop
 8000a14:	3770      	adds	r7, #112	@ 0x70
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	58000400 	.word	0x58000400
 8000a20:	58024800 	.word	0x58024800

08000a24 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a28:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa4 <MX_ETH_Init+0x80>)
 8000a2a:	4a1f      	ldr	r2, [pc, #124]	@ (8000aa8 <MX_ETH_Init+0x84>)
 8000a2c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000aac <MX_ETH_Init+0x88>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a34:	4b1d      	ldr	r3, [pc, #116]	@ (8000aac <MX_ETH_Init+0x88>)
 8000a36:	2280      	movs	r2, #128	@ 0x80
 8000a38:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aac <MX_ETH_Init+0x88>)
 8000a3c:	22e1      	movs	r2, #225	@ 0xe1
 8000a3e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a40:	4b1a      	ldr	r3, [pc, #104]	@ (8000aac <MX_ETH_Init+0x88>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a46:	4b19      	ldr	r3, [pc, #100]	@ (8000aac <MX_ETH_Init+0x88>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a4c:	4b17      	ldr	r3, [pc, #92]	@ (8000aac <MX_ETH_Init+0x88>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a52:	4b14      	ldr	r3, [pc, #80]	@ (8000aa4 <MX_ETH_Init+0x80>)
 8000a54:	4a15      	ldr	r2, [pc, #84]	@ (8000aac <MX_ETH_Init+0x88>)
 8000a56:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a58:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <MX_ETH_Init+0x80>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <MX_ETH_Init+0x80>)
 8000a60:	4a13      	ldr	r2, [pc, #76]	@ (8000ab0 <MX_ETH_Init+0x8c>)
 8000a62:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <MX_ETH_Init+0x80>)
 8000a66:	4a13      	ldr	r2, [pc, #76]	@ (8000ab4 <MX_ETH_Init+0x90>)
 8000a68:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <MX_ETH_Init+0x80>)
 8000a6c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000a70:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a72:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <MX_ETH_Init+0x80>)
 8000a74:	f001 f9da 	bl	8001e2c <HAL_ETH_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000a7e:	f000 fa21 	bl	8000ec4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a82:	2238      	movs	r2, #56	@ 0x38
 8000a84:	2100      	movs	r1, #0
 8000a86:	480c      	ldr	r0, [pc, #48]	@ (8000ab8 <MX_ETH_Init+0x94>)
 8000a88:	f009 f986 	bl	8009d98 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <MX_ETH_Init+0x94>)
 8000a8e:	2221      	movs	r2, #33	@ 0x21
 8000a90:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a92:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <MX_ETH_Init+0x94>)
 8000a94:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a98:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a9a:	4b07      	ldr	r3, [pc, #28]	@ (8000ab8 <MX_ETH_Init+0x94>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	24000178 	.word	0x24000178
 8000aa8:	40028000 	.word	0x40028000
 8000aac:	24000814 	.word	0x24000814
 8000ab0:	240000c4 	.word	0x240000c4
 8000ab4:	24000064 	.word	0x24000064
 8000ab8:	24000140 	.word	0x24000140

08000abc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b34 <MX_I2C1_Init+0x78>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b38 <MX_I2C1_Init+0x7c>)
 8000aca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000acc:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ade:	4b14      	ldr	r3, [pc, #80]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aea:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af6:	480e      	ldr	r0, [pc, #56]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000af8:	f001 ff96 	bl	8002a28 <HAL_I2C_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b02:	f000 f9df 	bl	8000ec4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b06:	2100      	movs	r1, #0
 8000b08:	4809      	ldr	r0, [pc, #36]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000b0a:	f003 fba5 	bl	8004258 <HAL_I2CEx_ConfigAnalogFilter>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b14:	f000 f9d6 	bl	8000ec4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000b1c:	f003 fbe7 	bl	80042ee <HAL_I2CEx_ConfigDigitalFilter>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b26:	f000 f9cd 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	24000228 	.word	0x24000228
 8000b34:	40005400 	.word	0x40005400
 8000b38:	10707dbc 	.word	0x10707dbc

08000b3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b40:	4b22      	ldr	r3, [pc, #136]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b42:	4a23      	ldr	r2, [pc, #140]	@ (8000bd0 <MX_USART3_UART_Init+0x94>)
 8000b44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b46:	4b21      	ldr	r3, [pc, #132]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b54:	4b1d      	ldr	r3, [pc, #116]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b60:	4b1a      	ldr	r3, [pc, #104]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b62:	220c      	movs	r2, #12
 8000b64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b66:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b6c:	4b17      	ldr	r3, [pc, #92]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b72:	4b16      	ldr	r3, [pc, #88]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b78:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b7e:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b84:	4811      	ldr	r0, [pc, #68]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b86:	f006 fb8b 	bl	80072a0 <HAL_UART_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b90:	f000 f998 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b94:	2100      	movs	r1, #0
 8000b96:	480d      	ldr	r0, [pc, #52]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b98:	f008 fcf7 	bl	800958a <HAL_UARTEx_SetTxFifoThreshold>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ba2:	f000 f98f 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4808      	ldr	r0, [pc, #32]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000baa:	f008 fd2c 	bl	8009606 <HAL_UARTEx_SetRxFifoThreshold>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bb4:	f000 f986 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bb8:	4804      	ldr	r0, [pc, #16]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000bba:	f008 fcad 	bl	8009518 <HAL_UARTEx_DisableFifoMode>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bc4:	f000 f97e 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	2400027c 	.word	0x2400027c
 8000bd0:	40004800 	.word	0x40004800

08000bd4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bd8:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bda:	4a16      	ldr	r2, [pc, #88]	@ (8000c34 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000bde:	4b14      	ldr	r3, [pc, #80]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000be0:	2209      	movs	r2, #9
 8000be2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000be4:	4b12      	ldr	r3, [pc, #72]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000be6:	2202      	movs	r2, #2
 8000be8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bea:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000c08:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c1c:	f003 fbb3 	bl	8004386 <HAL_PCD_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000c26:	f000 f94d 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	24000310 	.word	0x24000310
 8000c34:	40080000 	.word	0x40080000

08000c38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08c      	sub	sp, #48	@ 0x30
 8000c3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4e:	4b62      	ldr	r3, [pc, #392]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c54:	4a60      	ldr	r2, [pc, #384]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000c56:	f043 0304 	orr.w	r3, r3, #4
 8000c5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c5e:	4b5e      	ldr	r3, [pc, #376]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c64:	f003 0304 	and.w	r3, r3, #4
 8000c68:	61bb      	str	r3, [r7, #24]
 8000c6a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c6c:	4b5a      	ldr	r3, [pc, #360]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c72:	4a59      	ldr	r2, [pc, #356]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000c74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c7c:	4b56      	ldr	r3, [pc, #344]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b53      	ldr	r3, [pc, #332]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c90:	4a51      	ldr	r2, [pc, #324]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c9a:	4b4f      	ldr	r3, [pc, #316]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca8:	4b4b      	ldr	r3, [pc, #300]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cae:	4a4a      	ldr	r2, [pc, #296]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000cb0:	f043 0302 	orr.w	r3, r3, #2
 8000cb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb8:	4b47      	ldr	r3, [pc, #284]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc6:	4b44      	ldr	r3, [pc, #272]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ccc:	4a42      	ldr	r2, [pc, #264]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000cce:	f043 0308 	orr.w	r3, r3, #8
 8000cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd6:	4b40      	ldr	r3, [pc, #256]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cdc:	f003 0308 	and.w	r3, r3, #8
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ce4:	4b3c      	ldr	r3, [pc, #240]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cea:	4a3b      	ldr	r2, [pc, #236]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000cec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cf0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cf4:	4b38      	ldr	r3, [pc, #224]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d02:	4b35      	ldr	r3, [pc, #212]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d08:	4a33      	ldr	r2, [pc, #204]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000d0a:	f043 0310 	orr.w	r3, r3, #16
 8000d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d12:	4b31      	ldr	r3, [pc, #196]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d18:	f003 0310 	and.w	r3, r3, #16
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000d26:	482d      	ldr	r0, [pc, #180]	@ (8000ddc <MX_GPIO_Init+0x1a4>)
 8000d28:	f001 fe64 	bl	80029f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d32:	482b      	ldr	r0, [pc, #172]	@ (8000de0 <MX_GPIO_Init+0x1a8>)
 8000d34:	f001 fe5e 	bl	80029f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2102      	movs	r1, #2
 8000d3c:	4829      	ldr	r0, [pc, #164]	@ (8000de4 <MX_GPIO_Init+0x1ac>)
 8000d3e:	f001 fe59 	bl	80029f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	4619      	mov	r1, r3
 8000d56:	4824      	ldr	r0, [pc, #144]	@ (8000de8 <MX_GPIO_Init+0x1b0>)
 8000d58:	f001 fc9c 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000d5c:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	4819      	ldr	r0, [pc, #100]	@ (8000ddc <MX_GPIO_Init+0x1a4>)
 8000d76:	f001 fc8d 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000d7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	4619      	mov	r1, r3
 8000d92:	4813      	ldr	r0, [pc, #76]	@ (8000de0 <MX_GPIO_Init+0x1a8>)
 8000d94:	f001 fc7e 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d98:	2380      	movs	r3, #128	@ 0x80
 8000d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d9c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000da0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	480f      	ldr	r0, [pc, #60]	@ (8000dec <MX_GPIO_Init+0x1b4>)
 8000dae:	f001 fc71 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000db2:	2302      	movs	r3, #2
 8000db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4806      	ldr	r0, [pc, #24]	@ (8000de4 <MX_GPIO_Init+0x1ac>)
 8000dca:	f001 fc63 	bl	8002694 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dce:	bf00      	nop
 8000dd0:	3730      	adds	r7, #48	@ 0x30
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	58024400 	.word	0x58024400
 8000ddc:	58020400 	.word	0x58020400
 8000de0:	58020c00 	.word	0x58020c00
 8000de4:	58021000 	.word	0x58021000
 8000de8:	58020800 	.word	0x58020800
 8000dec:	58021800 	.word	0x58021800

08000df0 <PCF8591_ReadAnalog>:

/* USER CODE BEGIN 4 */

//Função de leitura no modulo sensor
uint8_t PCF8591_ReadAnalog(uint8_t channel)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af02      	add	r7, sp, #8
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
	uint8_t config_byte = 0x40 | (channel & 0x03); // Select the channel (A0, A1, A2, A3)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	f003 0303 	and.w	r3, r3, #3
 8000e02:	b25b      	sxtb	r3, r3
 8000e04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e08:	b25b      	sxtb	r3, r3
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	73fb      	strb	r3, [r7, #15]
	uint8_t analog_data[2];

	// Send configuration byte to select the ADC channel
	HAL_I2C_Master_Transmit(&hi2c1, PCF8591_ADDRESS, &config_byte, 1, 1000);
 8000e0e:	f107 020f 	add.w	r2, r7, #15
 8000e12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	2301      	movs	r3, #1
 8000e1a:	2190      	movs	r1, #144	@ 0x90
 8000e1c:	4808      	ldr	r0, [pc, #32]	@ (8000e40 <PCF8591_ReadAnalog+0x50>)
 8000e1e:	f001 fe9f 	bl	8002b60 <HAL_I2C_Master_Transmit>

	// Read two bytes: first byte is a dummy, second byte is the actual analog value
	HAL_I2C_Master_Receive(&hi2c1, PCF8591_ADDRESS, analog_data, 2, 1000);
 8000e22:	f107 020c 	add.w	r2, r7, #12
 8000e26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	2190      	movs	r1, #144	@ 0x90
 8000e30:	4803      	ldr	r0, [pc, #12]	@ (8000e40 <PCF8591_ReadAnalog+0x50>)
 8000e32:	f001 ffad 	bl	8002d90 <HAL_I2C_Master_Receive>

	// Return the second byte which contains the valid ADC reading
	return analog_data[1];
 8000e36:	7b7b      	ldrb	r3, [r7, #13]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	24000228 	.word	0x24000228

08000e44 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]

  if (strncmp(rx_buffer, "Read_AIN0", 9) == 0) {
 8000e4c:	2209      	movs	r2, #9
 8000e4e:	4917      	ldr	r1, [pc, #92]	@ (8000eac <HAL_UART_RxCpltCallback+0x68>)
 8000e50:	4817      	ldr	r0, [pc, #92]	@ (8000eb0 <HAL_UART_RxCpltCallback+0x6c>)
 8000e52:	f008 ffa9 	bl	8009da8 <strncmp>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d102      	bne.n	8000e62 <HAL_UART_RxCpltCallback+0x1e>
	  execute_flag = '1';
 8000e5c:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <HAL_UART_RxCpltCallback+0x70>)
 8000e5e:	2231      	movs	r2, #49	@ 0x31
 8000e60:	701a      	strb	r2, [r3, #0]
  }
  if (strncmp(rx_buffer, "Read_AIN1", 9) == 0) {
 8000e62:	2209      	movs	r2, #9
 8000e64:	4914      	ldr	r1, [pc, #80]	@ (8000eb8 <HAL_UART_RxCpltCallback+0x74>)
 8000e66:	4812      	ldr	r0, [pc, #72]	@ (8000eb0 <HAL_UART_RxCpltCallback+0x6c>)
 8000e68:	f008 ff9e 	bl	8009da8 <strncmp>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d102      	bne.n	8000e78 <HAL_UART_RxCpltCallback+0x34>
	  execute_flag = '2';
 8000e72:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <HAL_UART_RxCpltCallback+0x70>)
 8000e74:	2232      	movs	r2, #50	@ 0x32
 8000e76:	701a      	strb	r2, [r3, #0]
  }
  if (strncmp(rx_buffer, "Read_AIN3", 9) == 0) {
 8000e78:	2209      	movs	r2, #9
 8000e7a:	4910      	ldr	r1, [pc, #64]	@ (8000ebc <HAL_UART_RxCpltCallback+0x78>)
 8000e7c:	480c      	ldr	r0, [pc, #48]	@ (8000eb0 <HAL_UART_RxCpltCallback+0x6c>)
 8000e7e:	f008 ff93 	bl	8009da8 <strncmp>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d102      	bne.n	8000e8e <HAL_UART_RxCpltCallback+0x4a>
	  execute_flag = '3';
 8000e88:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb4 <HAL_UART_RxCpltCallback+0x70>)
 8000e8a:	2233      	movs	r2, #51	@ 0x33
 8000e8c:	701a      	strb	r2, [r3, #0]
  }
  if (strncmp(rx_buffer, "Set_DAC_255", 11) == 0) {
 8000e8e:	220b      	movs	r2, #11
 8000e90:	490b      	ldr	r1, [pc, #44]	@ (8000ec0 <HAL_UART_RxCpltCallback+0x7c>)
 8000e92:	4807      	ldr	r0, [pc, #28]	@ (8000eb0 <HAL_UART_RxCpltCallback+0x6c>)
 8000e94:	f008 ff88 	bl	8009da8 <strncmp>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d102      	bne.n	8000ea4 <HAL_UART_RxCpltCallback+0x60>
	  execute_flag = '4';
 8000e9e:	4b05      	ldr	r3, [pc, #20]	@ (8000eb4 <HAL_UART_RxCpltCallback+0x70>)
 8000ea0:	2234      	movs	r2, #52	@ 0x34
 8000ea2:	701a      	strb	r2, [r3, #0]
  }

}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	0800a70c 	.word	0x0800a70c
 8000eb0:	24000808 	.word	0x24000808
 8000eb4:	24000001 	.word	0x24000001
 8000eb8:	0800a718 	.word	0x0800a718
 8000ebc:	0800a724 	.word	0x0800a724
 8000ec0:	0800a730 	.word	0x0800a730

08000ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec8:	b672      	cpsid	i
}
 8000eca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <Error_Handler+0x8>

08000ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <HAL_MspInit+0x30>)
 8000ed8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000edc:	4a08      	ldr	r2, [pc, #32]	@ (8000f00 <HAL_MspInit+0x30>)
 8000ede:	f043 0302 	orr.w	r3, r3, #2
 8000ee2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_MspInit+0x30>)
 8000ee8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	58024400 	.word	0x58024400

08000f04 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08e      	sub	sp, #56	@ 0x38
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a59      	ldr	r2, [pc, #356]	@ (8001088 <HAL_ETH_MspInit+0x184>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	f040 80ab 	bne.w	800107e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f28:	4b58      	ldr	r3, [pc, #352]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f2e:	4a57      	ldr	r2, [pc, #348]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f34:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f38:	4b54      	ldr	r3, [pc, #336]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f42:	623b      	str	r3, [r7, #32]
 8000f44:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f46:	4b51      	ldr	r3, [pc, #324]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f4c:	4a4f      	ldr	r2, [pc, #316]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f52:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f56:	4b4d      	ldr	r3, [pc, #308]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f60:	61fb      	str	r3, [r7, #28]
 8000f62:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000f64:	4b49      	ldr	r3, [pc, #292]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f6a:	4a48      	ldr	r2, [pc, #288]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f70:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f74:	4b45      	ldr	r3, [pc, #276]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f7e:	61bb      	str	r3, [r7, #24]
 8000f80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	4b42      	ldr	r3, [pc, #264]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f88:	4a40      	ldr	r2, [pc, #256]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f8a:	f043 0304 	orr.w	r3, r3, #4
 8000f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f92:	4b3e      	ldr	r3, [pc, #248]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa0:	4b3a      	ldr	r3, [pc, #232]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa6:	4a39      	ldr	r2, [pc, #228]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb0:	4b36      	ldr	r3, [pc, #216]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	4b33      	ldr	r3, [pc, #204]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc4:	4a31      	ldr	r2, [pc, #196]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fce:	4b2f      	ldr	r3, [pc, #188]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe2:	4a2a      	ldr	r2, [pc, #168]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fec:	4b27      	ldr	r3, [pc, #156]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ffa:	2332      	movs	r3, #50	@ 0x32
 8000ffc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800100a:	230b      	movs	r3, #11
 800100c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001012:	4619      	mov	r1, r3
 8001014:	481e      	ldr	r0, [pc, #120]	@ (8001090 <HAL_ETH_MspInit+0x18c>)
 8001016:	f001 fb3d 	bl	8002694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800101a:	2386      	movs	r3, #134	@ 0x86
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800102a:	230b      	movs	r3, #11
 800102c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001032:	4619      	mov	r1, r3
 8001034:	4817      	ldr	r0, [pc, #92]	@ (8001094 <HAL_ETH_MspInit+0x190>)
 8001036:	f001 fb2d 	bl	8002694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800103a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800104c:	230b      	movs	r3, #11
 800104e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001050:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001054:	4619      	mov	r1, r3
 8001056:	4810      	ldr	r0, [pc, #64]	@ (8001098 <HAL_ETH_MspInit+0x194>)
 8001058:	f001 fb1c 	bl	8002694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800105c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001060:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800106e:	230b      	movs	r3, #11
 8001070:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001072:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001076:	4619      	mov	r1, r3
 8001078:	4808      	ldr	r0, [pc, #32]	@ (800109c <HAL_ETH_MspInit+0x198>)
 800107a:	f001 fb0b 	bl	8002694 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 800107e:	bf00      	nop
 8001080:	3738      	adds	r7, #56	@ 0x38
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40028000 	.word	0x40028000
 800108c:	58024400 	.word	0x58024400
 8001090:	58020800 	.word	0x58020800
 8001094:	58020000 	.word	0x58020000
 8001098:	58020400 	.word	0x58020400
 800109c:	58021800 	.word	0x58021800

080010a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b0ba      	sub	sp, #232	@ 0xe8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	22c0      	movs	r2, #192	@ 0xc0
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f008 fe69 	bl	8009d98 <memset>
  if(hi2c->Instance==I2C1)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001188 <HAL_I2C_MspInit+0xe8>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d156      	bne.n	800117e <HAL_I2C_MspInit+0xde>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010d0:	f04f 0208 	mov.w	r2, #8
 80010d4:	f04f 0300 	mov.w	r3, #0
 80010d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80010dc:	2300      	movs	r3, #0
 80010de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e2:	f107 0310 	add.w	r3, r7, #16
 80010e6:	4618      	mov	r0, r3
 80010e8:	f004 faae 	bl	8005648 <HAL_RCCEx_PeriphCLKConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80010f2:	f7ff fee7 	bl	8000ec4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	4b25      	ldr	r3, [pc, #148]	@ (800118c <HAL_I2C_MspInit+0xec>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fc:	4a23      	ldr	r2, [pc, #140]	@ (800118c <HAL_I2C_MspInit+0xec>)
 80010fe:	f043 0302 	orr.w	r3, r3, #2
 8001102:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001106:	4b21      	ldr	r3, [pc, #132]	@ (800118c <HAL_I2C_MspInit+0xec>)
 8001108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001114:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001118:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800111c:	2312      	movs	r3, #18
 800111e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001122:	2301      	movs	r3, #1
 8001124:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800112e:	2304      	movs	r3, #4
 8001130:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001138:	4619      	mov	r1, r3
 800113a:	4815      	ldr	r0, [pc, #84]	@ (8001190 <HAL_I2C_MspInit+0xf0>)
 800113c:	f001 faaa 	bl	8002694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <HAL_I2C_MspInit+0xec>)
 8001142:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001146:	4a11      	ldr	r2, [pc, #68]	@ (800118c <HAL_I2C_MspInit+0xec>)
 8001148:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800114c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001150:	4b0e      	ldr	r3, [pc, #56]	@ (800118c <HAL_I2C_MspInit+0xec>)
 8001152:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001156:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	201f      	movs	r0, #31
 8001164:	f000 fbd9 	bl	800191a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001168:	201f      	movs	r0, #31
 800116a:	f000 fbf0 	bl	800194e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	2020      	movs	r0, #32
 8001174:	f000 fbd1 	bl	800191a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001178:	2020      	movs	r0, #32
 800117a:	f000 fbe8 	bl	800194e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800117e:	bf00      	nop
 8001180:	37e8      	adds	r7, #232	@ 0xe8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40005400 	.word	0x40005400
 800118c:	58024400 	.word	0x58024400
 8001190:	58020400 	.word	0x58020400

08001194 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b0ba      	sub	sp, #232	@ 0xe8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	22c0      	movs	r2, #192	@ 0xc0
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f008 fdef 	bl	8009d98 <memset>
  if(huart->Instance==USART3)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a27      	ldr	r2, [pc, #156]	@ (800125c <HAL_UART_MspInit+0xc8>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d146      	bne.n	8001252 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011c4:	f04f 0202 	mov.w	r2, #2
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d6:	f107 0310 	add.w	r3, r7, #16
 80011da:	4618      	mov	r0, r3
 80011dc:	f004 fa34 	bl	8005648 <HAL_RCCEx_PeriphCLKConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80011e6:	f7ff fe6d 	bl	8000ec4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001260 <HAL_UART_MspInit+0xcc>)
 80011ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001260 <HAL_UART_MspInit+0xcc>)
 80011f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011f6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011fa:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <HAL_UART_MspInit+0xcc>)
 80011fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001200:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001208:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <HAL_UART_MspInit+0xcc>)
 800120a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800120e:	4a14      	ldr	r2, [pc, #80]	@ (8001260 <HAL_UART_MspInit+0xcc>)
 8001210:	f043 0308 	orr.w	r3, r3, #8
 8001214:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001218:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <HAL_UART_MspInit+0xcc>)
 800121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001226:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800122a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122e:	2302      	movs	r3, #2
 8001230:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001240:	2307      	movs	r3, #7
 8001242:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001246:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	@ (8001264 <HAL_UART_MspInit+0xd0>)
 800124e:	f001 fa21 	bl	8002694 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001252:	bf00      	nop
 8001254:	37e8      	adds	r7, #232	@ 0xe8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40004800 	.word	0x40004800
 8001260:	58024400 	.word	0x58024400
 8001264:	58020c00 	.word	0x58020c00

08001268 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b0ba      	sub	sp, #232	@ 0xe8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	22c0      	movs	r2, #192	@ 0xc0
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f008 fd85 	bl	8009d98 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a30      	ldr	r2, [pc, #192]	@ (8001354 <HAL_PCD_MspInit+0xec>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d159      	bne.n	800134c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001298:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80012a4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80012a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ac:	f107 0310 	add.w	r3, r7, #16
 80012b0:	4618      	mov	r0, r3
 80012b2:	f004 f9c9 	bl	8005648 <HAL_RCCEx_PeriphCLKConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80012bc:	f7ff fe02 	bl	8000ec4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80012c0:	f003 f9cc 	bl	800465c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	4b24      	ldr	r3, [pc, #144]	@ (8001358 <HAL_PCD_MspInit+0xf0>)
 80012c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ca:	4a23      	ldr	r2, [pc, #140]	@ (8001358 <HAL_PCD_MspInit+0xf0>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012d4:	4b20      	ldr	r3, [pc, #128]	@ (8001358 <HAL_PCD_MspInit+0xf0>)
 80012d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80012e2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80012e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80012fc:	230a      	movs	r3, #10
 80012fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001306:	4619      	mov	r1, r3
 8001308:	4814      	ldr	r0, [pc, #80]	@ (800135c <HAL_PCD_MspInit+0xf4>)
 800130a:	f001 f9c3 	bl	8002694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800130e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001312:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001316:	2300      	movs	r3, #0
 8001318:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001326:	4619      	mov	r1, r3
 8001328:	480c      	ldr	r0, [pc, #48]	@ (800135c <HAL_PCD_MspInit+0xf4>)
 800132a:	f001 f9b3 	bl	8002694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800132e:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <HAL_PCD_MspInit+0xf0>)
 8001330:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001334:	4a08      	ldr	r2, [pc, #32]	@ (8001358 <HAL_PCD_MspInit+0xf0>)
 8001336:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800133a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800133e:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <HAL_PCD_MspInit+0xf0>)
 8001340:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001344:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800134c:	bf00      	nop
 800134e:	37e8      	adds	r7, #232	@ 0xe8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40080000 	.word	0x40080000
 8001358:	58024400 	.word	0x58024400
 800135c:	58020000 	.word	0x58020000

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <NMI_Handler+0x4>

08001368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <HardFault_Handler+0x4>

08001370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <MemManage_Handler+0x4>

08001378 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <BusFault_Handler+0x4>

08001380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <UsageFault_Handler+0x4>

08001388 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b6:	f000 f971 	bl	800169c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80013c4:	4802      	ldr	r0, [pc, #8]	@ (80013d0 <I2C1_EV_IRQHandler+0x10>)
 80013c6:	f001 fdd9 	bl	8002f7c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	24000228 	.word	0x24000228

080013d4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80013d8:	4802      	ldr	r0, [pc, #8]	@ (80013e4 <I2C1_ER_IRQHandler+0x10>)
 80013da:	f001 fde9 	bl	8002fb0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	24000228 	.word	0x24000228

080013e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f0:	4a14      	ldr	r2, [pc, #80]	@ (8001444 <_sbrk+0x5c>)
 80013f2:	4b15      	ldr	r3, [pc, #84]	@ (8001448 <_sbrk+0x60>)
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013fc:	4b13      	ldr	r3, [pc, #76]	@ (800144c <_sbrk+0x64>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d102      	bne.n	800140a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001404:	4b11      	ldr	r3, [pc, #68]	@ (800144c <_sbrk+0x64>)
 8001406:	4a12      	ldr	r2, [pc, #72]	@ (8001450 <_sbrk+0x68>)
 8001408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800140a:	4b10      	ldr	r3, [pc, #64]	@ (800144c <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	429a      	cmp	r2, r3
 8001416:	d207      	bcs.n	8001428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001418:	f008 fcd8 	bl	8009dcc <__errno>
 800141c:	4603      	mov	r3, r0
 800141e:	220c      	movs	r2, #12
 8001420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	e009      	b.n	800143c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001428:	4b08      	ldr	r3, [pc, #32]	@ (800144c <_sbrk+0x64>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800142e:	4b07      	ldr	r3, [pc, #28]	@ (800144c <_sbrk+0x64>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	4a05      	ldr	r2, [pc, #20]	@ (800144c <_sbrk+0x64>)
 8001438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800143a:	68fb      	ldr	r3, [r7, #12]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	24080000 	.word	0x24080000
 8001448:	00000400 	.word	0x00000400
 800144c:	2400081c 	.word	0x2400081c
 8001450:	24000970 	.word	0x24000970

08001454 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001454:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800148c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001458:	f000 f826 	bl	80014a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800145c:	480c      	ldr	r0, [pc, #48]	@ (8001490 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800145e:	490d      	ldr	r1, [pc, #52]	@ (8001494 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001460:	4a0d      	ldr	r2, [pc, #52]	@ (8001498 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001464:	e002      	b.n	800146c <LoopCopyDataInit>

08001466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146a:	3304      	adds	r3, #4

0800146c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800146c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001470:	d3f9      	bcc.n	8001466 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001472:	4a0a      	ldr	r2, [pc, #40]	@ (800149c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001474:	4c0a      	ldr	r4, [pc, #40]	@ (80014a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001478:	e001      	b.n	800147e <LoopFillZerobss>

0800147a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800147c:	3204      	adds	r2, #4

0800147e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001480:	d3fb      	bcc.n	800147a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001482:	f008 fca9 	bl	8009dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001486:	f7ff f8fb 	bl	8000680 <main>
  bx  lr
 800148a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800148c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001490:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001494:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001498:	0800a7b8 	.word	0x0800a7b8
  ldr r2, =_sbss
 800149c:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 80014a0:	2400096c 	.word	0x2400096c

080014a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014a4:	e7fe      	b.n	80014a4 <ADC3_IRQHandler>
	...

080014a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014ac:	4b37      	ldr	r3, [pc, #220]	@ (800158c <SystemInit+0xe4>)
 80014ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014b2:	4a36      	ldr	r2, [pc, #216]	@ (800158c <SystemInit+0xe4>)
 80014b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014bc:	4b34      	ldr	r3, [pc, #208]	@ (8001590 <SystemInit+0xe8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 030f 	and.w	r3, r3, #15
 80014c4:	2b06      	cmp	r3, #6
 80014c6:	d807      	bhi.n	80014d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014c8:	4b31      	ldr	r3, [pc, #196]	@ (8001590 <SystemInit+0xe8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f023 030f 	bic.w	r3, r3, #15
 80014d0:	4a2f      	ldr	r2, [pc, #188]	@ (8001590 <SystemInit+0xe8>)
 80014d2:	f043 0307 	orr.w	r3, r3, #7
 80014d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001594 <SystemInit+0xec>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a2d      	ldr	r2, [pc, #180]	@ (8001594 <SystemInit+0xec>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001594 <SystemInit+0xec>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001594 <SystemInit+0xec>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4929      	ldr	r1, [pc, #164]	@ (8001594 <SystemInit+0xec>)
 80014f0:	4b29      	ldr	r3, [pc, #164]	@ (8001598 <SystemInit+0xf0>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014f6:	4b26      	ldr	r3, [pc, #152]	@ (8001590 <SystemInit+0xe8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d007      	beq.n	8001512 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001502:	4b23      	ldr	r3, [pc, #140]	@ (8001590 <SystemInit+0xe8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f023 030f 	bic.w	r3, r3, #15
 800150a:	4a21      	ldr	r2, [pc, #132]	@ (8001590 <SystemInit+0xe8>)
 800150c:	f043 0307 	orr.w	r3, r3, #7
 8001510:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001512:	4b20      	ldr	r3, [pc, #128]	@ (8001594 <SystemInit+0xec>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001518:	4b1e      	ldr	r3, [pc, #120]	@ (8001594 <SystemInit+0xec>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800151e:	4b1d      	ldr	r3, [pc, #116]	@ (8001594 <SystemInit+0xec>)
 8001520:	2200      	movs	r2, #0
 8001522:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001524:	4b1b      	ldr	r3, [pc, #108]	@ (8001594 <SystemInit+0xec>)
 8001526:	4a1d      	ldr	r2, [pc, #116]	@ (800159c <SystemInit+0xf4>)
 8001528:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800152a:	4b1a      	ldr	r3, [pc, #104]	@ (8001594 <SystemInit+0xec>)
 800152c:	4a1c      	ldr	r2, [pc, #112]	@ (80015a0 <SystemInit+0xf8>)
 800152e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001530:	4b18      	ldr	r3, [pc, #96]	@ (8001594 <SystemInit+0xec>)
 8001532:	4a1c      	ldr	r2, [pc, #112]	@ (80015a4 <SystemInit+0xfc>)
 8001534:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001536:	4b17      	ldr	r3, [pc, #92]	@ (8001594 <SystemInit+0xec>)
 8001538:	2200      	movs	r2, #0
 800153a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800153c:	4b15      	ldr	r3, [pc, #84]	@ (8001594 <SystemInit+0xec>)
 800153e:	4a19      	ldr	r2, [pc, #100]	@ (80015a4 <SystemInit+0xfc>)
 8001540:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001542:	4b14      	ldr	r3, [pc, #80]	@ (8001594 <SystemInit+0xec>)
 8001544:	2200      	movs	r2, #0
 8001546:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001548:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <SystemInit+0xec>)
 800154a:	4a16      	ldr	r2, [pc, #88]	@ (80015a4 <SystemInit+0xfc>)
 800154c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800154e:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <SystemInit+0xec>)
 8001550:	2200      	movs	r2, #0
 8001552:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001554:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <SystemInit+0xec>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0e      	ldr	r2, [pc, #56]	@ (8001594 <SystemInit+0xec>)
 800155a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800155e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001560:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <SystemInit+0xec>)
 8001562:	2200      	movs	r2, #0
 8001564:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001566:	4b10      	ldr	r3, [pc, #64]	@ (80015a8 <SystemInit+0x100>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	4b10      	ldr	r3, [pc, #64]	@ (80015ac <SystemInit+0x104>)
 800156c:	4013      	ands	r3, r2
 800156e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001572:	d202      	bcs.n	800157a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001574:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <SystemInit+0x108>)
 8001576:	2201      	movs	r2, #1
 8001578:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800157a:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <SystemInit+0x10c>)
 800157c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001580:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000ed00 	.word	0xe000ed00
 8001590:	52002000 	.word	0x52002000
 8001594:	58024400 	.word	0x58024400
 8001598:	eaf6ed7f 	.word	0xeaf6ed7f
 800159c:	02020200 	.word	0x02020200
 80015a0:	01ff0000 	.word	0x01ff0000
 80015a4:	01010280 	.word	0x01010280
 80015a8:	5c001000 	.word	0x5c001000
 80015ac:	ffff0000 	.word	0xffff0000
 80015b0:	51008108 	.word	0x51008108
 80015b4:	52004000 	.word	0x52004000

080015b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015be:	2003      	movs	r0, #3
 80015c0:	f000 f9a0 	bl	8001904 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015c4:	f003 fe6a 	bl	800529c <HAL_RCC_GetSysClockFreq>
 80015c8:	4602      	mov	r2, r0
 80015ca:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <HAL_Init+0x68>)
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	0a1b      	lsrs	r3, r3, #8
 80015d0:	f003 030f 	and.w	r3, r3, #15
 80015d4:	4913      	ldr	r1, [pc, #76]	@ (8001624 <HAL_Init+0x6c>)
 80015d6:	5ccb      	ldrb	r3, [r1, r3]
 80015d8:	f003 031f 	and.w	r3, r3, #31
 80015dc:	fa22 f303 	lsr.w	r3, r2, r3
 80015e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <HAL_Init+0x68>)
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001624 <HAL_Init+0x6c>)
 80015ec:	5cd3      	ldrb	r3, [r2, r3]
 80015ee:	f003 031f 	and.w	r3, r3, #31
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	fa22 f303 	lsr.w	r3, r2, r3
 80015f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001628 <HAL_Init+0x70>)
 80015fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015fc:	4a0b      	ldr	r2, [pc, #44]	@ (800162c <HAL_Init+0x74>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001602:	2000      	movs	r0, #0
 8001604:	f000 f814 	bl	8001630 <HAL_InitTick>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e002      	b.n	8001618 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001612:	f7ff fc5d 	bl	8000ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	58024400 	.word	0x58024400
 8001624:	0800a73c 	.word	0x0800a73c
 8001628:	24000008 	.word	0x24000008
 800162c:	24000004 	.word	0x24000004

08001630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001638:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <HAL_InitTick+0x60>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e021      	b.n	8001688 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001644:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <HAL_InitTick+0x64>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <HAL_InitTick+0x60>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	4619      	mov	r1, r3
 800164e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001652:	fbb3 f3f1 	udiv	r3, r3, r1
 8001656:	fbb2 f3f3 	udiv	r3, r2, r3
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f985 	bl	800196a <HAL_SYSTICK_Config>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e00e      	b.n	8001688 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b0f      	cmp	r3, #15
 800166e:	d80a      	bhi.n	8001686 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001670:	2200      	movs	r2, #0
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	f000 f94f 	bl	800191a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800167c:	4a06      	ldr	r2, [pc, #24]	@ (8001698 <HAL_InitTick+0x68>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	e000      	b.n	8001688 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
}
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	24000010 	.word	0x24000010
 8001694:	24000004 	.word	0x24000004
 8001698:	2400000c 	.word	0x2400000c

0800169c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016a0:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <HAL_IncTick+0x20>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <HAL_IncTick+0x24>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	4a04      	ldr	r2, [pc, #16]	@ (80016c0 <HAL_IncTick+0x24>)
 80016ae:	6013      	str	r3, [r2, #0]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	24000010 	.word	0x24000010
 80016c0:	24000820 	.word	0x24000820

080016c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return uwTick;
 80016c8:	4b03      	ldr	r3, [pc, #12]	@ (80016d8 <HAL_GetTick+0x14>)
 80016ca:	681b      	ldr	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	24000820 	.word	0x24000820

080016dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016e4:	f7ff ffee 	bl	80016c4 <HAL_GetTick>
 80016e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f4:	d005      	beq.n	8001702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <HAL_Delay+0x44>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4413      	add	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001702:	bf00      	nop
 8001704:	f7ff ffde 	bl	80016c4 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	429a      	cmp	r2, r3
 8001712:	d8f7      	bhi.n	8001704 <HAL_Delay+0x28>
  {
  }
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	24000010 	.word	0x24000010

08001724 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001728:	4b03      	ldr	r3, [pc, #12]	@ (8001738 <HAL_GetREVID+0x14>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	0c1b      	lsrs	r3, r3, #16
}
 800172e:	4618      	mov	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	5c001000 	.word	0x5c001000

0800173c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001744:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800174c:	4904      	ldr	r1, [pc, #16]	@ (8001760 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	58000400 	.word	0x58000400

08001764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001774:	4b0b      	ldr	r3, [pc, #44]	@ (80017a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001780:	4013      	ands	r3, r2
 8001782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800178c:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 800178e:	4313      	orrs	r3, r2
 8001790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001792:	4a04      	ldr	r2, [pc, #16]	@ (80017a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	60d3      	str	r3, [r2, #12]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00
 80017a8:	05fa0000 	.word	0x05fa0000

080017ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b0:	4b04      	ldr	r3, [pc, #16]	@ (80017c4 <__NVIC_GetPriorityGrouping+0x18>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	f003 0307 	and.w	r3, r3, #7
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	db0b      	blt.n	80017f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	f003 021f 	and.w	r2, r3, #31
 80017e0:	4907      	ldr	r1, [pc, #28]	@ (8001800 <__NVIC_EnableIRQ+0x38>)
 80017e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	2001      	movs	r0, #1
 80017ea:	fa00 f202 	lsl.w	r2, r0, r2
 80017ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000e100 	.word	0xe000e100

08001804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001810:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001814:	2b00      	cmp	r3, #0
 8001816:	db0a      	blt.n	800182e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	b2da      	uxtb	r2, r3
 800181c:	490c      	ldr	r1, [pc, #48]	@ (8001850 <__NVIC_SetPriority+0x4c>)
 800181e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001822:	0112      	lsls	r2, r2, #4
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	440b      	add	r3, r1
 8001828:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800182c:	e00a      	b.n	8001844 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4908      	ldr	r1, [pc, #32]	@ (8001854 <__NVIC_SetPriority+0x50>)
 8001834:	88fb      	ldrh	r3, [r7, #6]
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	3b04      	subs	r3, #4
 800183c:	0112      	lsls	r2, r2, #4
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	440b      	add	r3, r1
 8001842:	761a      	strb	r2, [r3, #24]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000e100 	.word	0xe000e100
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001858:	b480      	push	{r7}
 800185a:	b089      	sub	sp, #36	@ 0x24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f1c3 0307 	rsb	r3, r3, #7
 8001872:	2b04      	cmp	r3, #4
 8001874:	bf28      	it	cs
 8001876:	2304      	movcs	r3, #4
 8001878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3304      	adds	r3, #4
 800187e:	2b06      	cmp	r3, #6
 8001880:	d902      	bls.n	8001888 <NVIC_EncodePriority+0x30>
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3b03      	subs	r3, #3
 8001886:	e000      	b.n	800188a <NVIC_EncodePriority+0x32>
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	f04f 32ff 	mov.w	r2, #4294967295
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43da      	mvns	r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	401a      	ands	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a0:	f04f 31ff 	mov.w	r1, #4294967295
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	43d9      	mvns	r1, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	4313      	orrs	r3, r2
         );
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3724      	adds	r7, #36	@ 0x24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018d0:	d301      	bcc.n	80018d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00f      	b.n	80018f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001900 <SysTick_Config+0x40>)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018de:	210f      	movs	r1, #15
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f7ff ff8e 	bl	8001804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e8:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <SysTick_Config+0x40>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ee:	4b04      	ldr	r3, [pc, #16]	@ (8001900 <SysTick_Config+0x40>)
 80018f0:	2207      	movs	r2, #7
 80018f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	e000e010 	.word	0xe000e010

08001904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff ff29 	bl	8001764 <__NVIC_SetPriorityGrouping>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	4603      	mov	r3, r0
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
 8001926:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001928:	f7ff ff40 	bl	80017ac <__NVIC_GetPriorityGrouping>
 800192c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	6978      	ldr	r0, [r7, #20]
 8001934:	f7ff ff90 	bl	8001858 <NVIC_EncodePriority>
 8001938:	4602      	mov	r2, r0
 800193a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800193e:	4611      	mov	r1, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff5f 	bl	8001804 <__NVIC_SetPriority>
}
 8001946:	bf00      	nop
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001958:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff33 	bl	80017c8 <__NVIC_EnableIRQ>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ffa4 	bl	80018c0 <SysTick_Config>
 8001978:	4603      	mov	r3, r0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e237      	b.n	8001e06 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d004      	beq.n	80019ac <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2280      	movs	r2, #128	@ 0x80
 80019a6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e22c      	b.n	8001e06 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a5c      	ldr	r2, [pc, #368]	@ (8001b24 <HAL_DMA_Abort_IT+0x1a0>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d04a      	beq.n	8001a4c <HAL_DMA_Abort_IT+0xc8>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a5b      	ldr	r2, [pc, #364]	@ (8001b28 <HAL_DMA_Abort_IT+0x1a4>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d045      	beq.n	8001a4c <HAL_DMA_Abort_IT+0xc8>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a59      	ldr	r2, [pc, #356]	@ (8001b2c <HAL_DMA_Abort_IT+0x1a8>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d040      	beq.n	8001a4c <HAL_DMA_Abort_IT+0xc8>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a58      	ldr	r2, [pc, #352]	@ (8001b30 <HAL_DMA_Abort_IT+0x1ac>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d03b      	beq.n	8001a4c <HAL_DMA_Abort_IT+0xc8>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a56      	ldr	r2, [pc, #344]	@ (8001b34 <HAL_DMA_Abort_IT+0x1b0>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d036      	beq.n	8001a4c <HAL_DMA_Abort_IT+0xc8>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a55      	ldr	r2, [pc, #340]	@ (8001b38 <HAL_DMA_Abort_IT+0x1b4>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d031      	beq.n	8001a4c <HAL_DMA_Abort_IT+0xc8>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a53      	ldr	r2, [pc, #332]	@ (8001b3c <HAL_DMA_Abort_IT+0x1b8>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d02c      	beq.n	8001a4c <HAL_DMA_Abort_IT+0xc8>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a52      	ldr	r2, [pc, #328]	@ (8001b40 <HAL_DMA_Abort_IT+0x1bc>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d027      	beq.n	8001a4c <HAL_DMA_Abort_IT+0xc8>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a50      	ldr	r2, [pc, #320]	@ (8001b44 <HAL_DMA_Abort_IT+0x1c0>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d022      	beq.n	8001a4c <HAL_DMA_Abort_IT+0xc8>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a4f      	ldr	r2, [pc, #316]	@ (8001b48 <HAL_DMA_Abort_IT+0x1c4>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d01d      	beq.n	8001a4c <HAL_DMA_Abort_IT+0xc8>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a4d      	ldr	r2, [pc, #308]	@ (8001b4c <HAL_DMA_Abort_IT+0x1c8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d018      	beq.n	8001a4c <HAL_DMA_Abort_IT+0xc8>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a4c      	ldr	r2, [pc, #304]	@ (8001b50 <HAL_DMA_Abort_IT+0x1cc>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d013      	beq.n	8001a4c <HAL_DMA_Abort_IT+0xc8>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a4a      	ldr	r2, [pc, #296]	@ (8001b54 <HAL_DMA_Abort_IT+0x1d0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d00e      	beq.n	8001a4c <HAL_DMA_Abort_IT+0xc8>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a49      	ldr	r2, [pc, #292]	@ (8001b58 <HAL_DMA_Abort_IT+0x1d4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d009      	beq.n	8001a4c <HAL_DMA_Abort_IT+0xc8>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a47      	ldr	r2, [pc, #284]	@ (8001b5c <HAL_DMA_Abort_IT+0x1d8>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d004      	beq.n	8001a4c <HAL_DMA_Abort_IT+0xc8>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a46      	ldr	r2, [pc, #280]	@ (8001b60 <HAL_DMA_Abort_IT+0x1dc>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d101      	bne.n	8001a50 <HAL_DMA_Abort_IT+0xcc>
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <HAL_DMA_Abort_IT+0xce>
 8001a50:	2300      	movs	r3, #0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 8086 	beq.w	8001b64 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2204      	movs	r2, #4
 8001a5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a2f      	ldr	r2, [pc, #188]	@ (8001b24 <HAL_DMA_Abort_IT+0x1a0>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d04a      	beq.n	8001b00 <HAL_DMA_Abort_IT+0x17c>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a2e      	ldr	r2, [pc, #184]	@ (8001b28 <HAL_DMA_Abort_IT+0x1a4>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d045      	beq.n	8001b00 <HAL_DMA_Abort_IT+0x17c>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a2c      	ldr	r2, [pc, #176]	@ (8001b2c <HAL_DMA_Abort_IT+0x1a8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d040      	beq.n	8001b00 <HAL_DMA_Abort_IT+0x17c>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a2b      	ldr	r2, [pc, #172]	@ (8001b30 <HAL_DMA_Abort_IT+0x1ac>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d03b      	beq.n	8001b00 <HAL_DMA_Abort_IT+0x17c>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a29      	ldr	r2, [pc, #164]	@ (8001b34 <HAL_DMA_Abort_IT+0x1b0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d036      	beq.n	8001b00 <HAL_DMA_Abort_IT+0x17c>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a28      	ldr	r2, [pc, #160]	@ (8001b38 <HAL_DMA_Abort_IT+0x1b4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d031      	beq.n	8001b00 <HAL_DMA_Abort_IT+0x17c>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a26      	ldr	r2, [pc, #152]	@ (8001b3c <HAL_DMA_Abort_IT+0x1b8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d02c      	beq.n	8001b00 <HAL_DMA_Abort_IT+0x17c>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a25      	ldr	r2, [pc, #148]	@ (8001b40 <HAL_DMA_Abort_IT+0x1bc>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d027      	beq.n	8001b00 <HAL_DMA_Abort_IT+0x17c>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a23      	ldr	r2, [pc, #140]	@ (8001b44 <HAL_DMA_Abort_IT+0x1c0>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d022      	beq.n	8001b00 <HAL_DMA_Abort_IT+0x17c>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a22      	ldr	r2, [pc, #136]	@ (8001b48 <HAL_DMA_Abort_IT+0x1c4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d01d      	beq.n	8001b00 <HAL_DMA_Abort_IT+0x17c>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a20      	ldr	r2, [pc, #128]	@ (8001b4c <HAL_DMA_Abort_IT+0x1c8>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d018      	beq.n	8001b00 <HAL_DMA_Abort_IT+0x17c>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8001b50 <HAL_DMA_Abort_IT+0x1cc>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d013      	beq.n	8001b00 <HAL_DMA_Abort_IT+0x17c>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a1d      	ldr	r2, [pc, #116]	@ (8001b54 <HAL_DMA_Abort_IT+0x1d0>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d00e      	beq.n	8001b00 <HAL_DMA_Abort_IT+0x17c>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8001b58 <HAL_DMA_Abort_IT+0x1d4>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d009      	beq.n	8001b00 <HAL_DMA_Abort_IT+0x17c>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a1a      	ldr	r2, [pc, #104]	@ (8001b5c <HAL_DMA_Abort_IT+0x1d8>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d004      	beq.n	8001b00 <HAL_DMA_Abort_IT+0x17c>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a19      	ldr	r2, [pc, #100]	@ (8001b60 <HAL_DMA_Abort_IT+0x1dc>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d108      	bne.n	8001b12 <HAL_DMA_Abort_IT+0x18e>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0201 	bic.w	r2, r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	e178      	b.n	8001e04 <HAL_DMA_Abort_IT+0x480>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0201 	bic.w	r2, r2, #1
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	e16f      	b.n	8001e04 <HAL_DMA_Abort_IT+0x480>
 8001b24:	40020010 	.word	0x40020010
 8001b28:	40020028 	.word	0x40020028
 8001b2c:	40020040 	.word	0x40020040
 8001b30:	40020058 	.word	0x40020058
 8001b34:	40020070 	.word	0x40020070
 8001b38:	40020088 	.word	0x40020088
 8001b3c:	400200a0 	.word	0x400200a0
 8001b40:	400200b8 	.word	0x400200b8
 8001b44:	40020410 	.word	0x40020410
 8001b48:	40020428 	.word	0x40020428
 8001b4c:	40020440 	.word	0x40020440
 8001b50:	40020458 	.word	0x40020458
 8001b54:	40020470 	.word	0x40020470
 8001b58:	40020488 	.word	0x40020488
 8001b5c:	400204a0 	.word	0x400204a0
 8001b60:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 020e 	bic.w	r2, r2, #14
 8001b72:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a6c      	ldr	r2, [pc, #432]	@ (8001d2c <HAL_DMA_Abort_IT+0x3a8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d04a      	beq.n	8001c14 <HAL_DMA_Abort_IT+0x290>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a6b      	ldr	r2, [pc, #428]	@ (8001d30 <HAL_DMA_Abort_IT+0x3ac>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d045      	beq.n	8001c14 <HAL_DMA_Abort_IT+0x290>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a69      	ldr	r2, [pc, #420]	@ (8001d34 <HAL_DMA_Abort_IT+0x3b0>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d040      	beq.n	8001c14 <HAL_DMA_Abort_IT+0x290>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a68      	ldr	r2, [pc, #416]	@ (8001d38 <HAL_DMA_Abort_IT+0x3b4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d03b      	beq.n	8001c14 <HAL_DMA_Abort_IT+0x290>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a66      	ldr	r2, [pc, #408]	@ (8001d3c <HAL_DMA_Abort_IT+0x3b8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d036      	beq.n	8001c14 <HAL_DMA_Abort_IT+0x290>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a65      	ldr	r2, [pc, #404]	@ (8001d40 <HAL_DMA_Abort_IT+0x3bc>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d031      	beq.n	8001c14 <HAL_DMA_Abort_IT+0x290>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a63      	ldr	r2, [pc, #396]	@ (8001d44 <HAL_DMA_Abort_IT+0x3c0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d02c      	beq.n	8001c14 <HAL_DMA_Abort_IT+0x290>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a62      	ldr	r2, [pc, #392]	@ (8001d48 <HAL_DMA_Abort_IT+0x3c4>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d027      	beq.n	8001c14 <HAL_DMA_Abort_IT+0x290>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a60      	ldr	r2, [pc, #384]	@ (8001d4c <HAL_DMA_Abort_IT+0x3c8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d022      	beq.n	8001c14 <HAL_DMA_Abort_IT+0x290>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a5f      	ldr	r2, [pc, #380]	@ (8001d50 <HAL_DMA_Abort_IT+0x3cc>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d01d      	beq.n	8001c14 <HAL_DMA_Abort_IT+0x290>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a5d      	ldr	r2, [pc, #372]	@ (8001d54 <HAL_DMA_Abort_IT+0x3d0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d018      	beq.n	8001c14 <HAL_DMA_Abort_IT+0x290>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a5c      	ldr	r2, [pc, #368]	@ (8001d58 <HAL_DMA_Abort_IT+0x3d4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d013      	beq.n	8001c14 <HAL_DMA_Abort_IT+0x290>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a5a      	ldr	r2, [pc, #360]	@ (8001d5c <HAL_DMA_Abort_IT+0x3d8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d00e      	beq.n	8001c14 <HAL_DMA_Abort_IT+0x290>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a59      	ldr	r2, [pc, #356]	@ (8001d60 <HAL_DMA_Abort_IT+0x3dc>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d009      	beq.n	8001c14 <HAL_DMA_Abort_IT+0x290>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a57      	ldr	r2, [pc, #348]	@ (8001d64 <HAL_DMA_Abort_IT+0x3e0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d004      	beq.n	8001c14 <HAL_DMA_Abort_IT+0x290>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a56      	ldr	r2, [pc, #344]	@ (8001d68 <HAL_DMA_Abort_IT+0x3e4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d108      	bne.n	8001c26 <HAL_DMA_Abort_IT+0x2a2>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0201 	bic.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	e007      	b.n	8001c36 <HAL_DMA_Abort_IT+0x2b2>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0201 	bic.w	r2, r2, #1
 8001c34:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a3c      	ldr	r2, [pc, #240]	@ (8001d2c <HAL_DMA_Abort_IT+0x3a8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d072      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x3a2>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a3a      	ldr	r2, [pc, #232]	@ (8001d30 <HAL_DMA_Abort_IT+0x3ac>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d06d      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x3a2>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a39      	ldr	r2, [pc, #228]	@ (8001d34 <HAL_DMA_Abort_IT+0x3b0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d068      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x3a2>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a37      	ldr	r2, [pc, #220]	@ (8001d38 <HAL_DMA_Abort_IT+0x3b4>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d063      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x3a2>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a36      	ldr	r2, [pc, #216]	@ (8001d3c <HAL_DMA_Abort_IT+0x3b8>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d05e      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x3a2>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a34      	ldr	r2, [pc, #208]	@ (8001d40 <HAL_DMA_Abort_IT+0x3bc>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d059      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x3a2>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a33      	ldr	r2, [pc, #204]	@ (8001d44 <HAL_DMA_Abort_IT+0x3c0>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d054      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x3a2>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a31      	ldr	r2, [pc, #196]	@ (8001d48 <HAL_DMA_Abort_IT+0x3c4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d04f      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x3a2>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a30      	ldr	r2, [pc, #192]	@ (8001d4c <HAL_DMA_Abort_IT+0x3c8>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d04a      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x3a2>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a2e      	ldr	r2, [pc, #184]	@ (8001d50 <HAL_DMA_Abort_IT+0x3cc>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d045      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x3a2>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a2d      	ldr	r2, [pc, #180]	@ (8001d54 <HAL_DMA_Abort_IT+0x3d0>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d040      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x3a2>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a2b      	ldr	r2, [pc, #172]	@ (8001d58 <HAL_DMA_Abort_IT+0x3d4>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d03b      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x3a2>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a2a      	ldr	r2, [pc, #168]	@ (8001d5c <HAL_DMA_Abort_IT+0x3d8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d036      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x3a2>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a28      	ldr	r2, [pc, #160]	@ (8001d60 <HAL_DMA_Abort_IT+0x3dc>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d031      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x3a2>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a27      	ldr	r2, [pc, #156]	@ (8001d64 <HAL_DMA_Abort_IT+0x3e0>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d02c      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x3a2>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a25      	ldr	r2, [pc, #148]	@ (8001d68 <HAL_DMA_Abort_IT+0x3e4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d027      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x3a2>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a24      	ldr	r2, [pc, #144]	@ (8001d6c <HAL_DMA_Abort_IT+0x3e8>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d022      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x3a2>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a22      	ldr	r2, [pc, #136]	@ (8001d70 <HAL_DMA_Abort_IT+0x3ec>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d01d      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x3a2>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a21      	ldr	r2, [pc, #132]	@ (8001d74 <HAL_DMA_Abort_IT+0x3f0>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d018      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x3a2>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a1f      	ldr	r2, [pc, #124]	@ (8001d78 <HAL_DMA_Abort_IT+0x3f4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d013      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x3a2>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a1e      	ldr	r2, [pc, #120]	@ (8001d7c <HAL_DMA_Abort_IT+0x3f8>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d00e      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x3a2>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a1c      	ldr	r2, [pc, #112]	@ (8001d80 <HAL_DMA_Abort_IT+0x3fc>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d009      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x3a2>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a1b      	ldr	r2, [pc, #108]	@ (8001d84 <HAL_DMA_Abort_IT+0x400>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d004      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x3a2>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a19      	ldr	r2, [pc, #100]	@ (8001d88 <HAL_DMA_Abort_IT+0x404>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d132      	bne.n	8001d8c <HAL_DMA_Abort_IT+0x408>
 8001d26:	2301      	movs	r3, #1
 8001d28:	e031      	b.n	8001d8e <HAL_DMA_Abort_IT+0x40a>
 8001d2a:	bf00      	nop
 8001d2c:	40020010 	.word	0x40020010
 8001d30:	40020028 	.word	0x40020028
 8001d34:	40020040 	.word	0x40020040
 8001d38:	40020058 	.word	0x40020058
 8001d3c:	40020070 	.word	0x40020070
 8001d40:	40020088 	.word	0x40020088
 8001d44:	400200a0 	.word	0x400200a0
 8001d48:	400200b8 	.word	0x400200b8
 8001d4c:	40020410 	.word	0x40020410
 8001d50:	40020428 	.word	0x40020428
 8001d54:	40020440 	.word	0x40020440
 8001d58:	40020458 	.word	0x40020458
 8001d5c:	40020470 	.word	0x40020470
 8001d60:	40020488 	.word	0x40020488
 8001d64:	400204a0 	.word	0x400204a0
 8001d68:	400204b8 	.word	0x400204b8
 8001d6c:	58025408 	.word	0x58025408
 8001d70:	5802541c 	.word	0x5802541c
 8001d74:	58025430 	.word	0x58025430
 8001d78:	58025444 	.word	0x58025444
 8001d7c:	58025458 	.word	0x58025458
 8001d80:	5802546c 	.word	0x5802546c
 8001d84:	58025480 	.word	0x58025480
 8001d88:	58025494 	.word	0x58025494
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d028      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001da0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	2201      	movs	r2, #1
 8001db2:	409a      	lsls	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001dc0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00c      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001dd8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001de2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop

08001e10 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e1e:	b2db      	uxtb	r3, r3
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e0e3      	b.n	8002006 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d106      	bne.n	8001e56 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2223      	movs	r2, #35	@ 0x23
 8001e4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff f857 	bl	8000f04 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e56:	4b6e      	ldr	r3, [pc, #440]	@ (8002010 <HAL_ETH_Init+0x1e4>)
 8001e58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e5c:	4a6c      	ldr	r2, [pc, #432]	@ (8002010 <HAL_ETH_Init+0x1e4>)
 8001e5e:	f043 0302 	orr.w	r3, r3, #2
 8001e62:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e66:	4b6a      	ldr	r3, [pc, #424]	@ (8002010 <HAL_ETH_Init+0x1e4>)
 8001e68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	7a1b      	ldrb	r3, [r3, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d103      	bne.n	8001e84 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f7ff fc5d 	bl	800173c <HAL_SYSCFG_ETHInterfaceSelect>
 8001e82:	e003      	b.n	8001e8c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001e84:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001e88:	f7ff fc58 	bl	800173c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001e8c:	4b61      	ldr	r3, [pc, #388]	@ (8002014 <HAL_ETH_Init+0x1e8>)
 8001e8e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ea6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ea8:	f7ff fc0c 	bl	80016c4 <HAL_GetTick>
 8001eac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001eae:	e011      	b.n	8001ed4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001eb0:	f7ff fc08 	bl	80016c4 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001ebe:	d909      	bls.n	8001ed4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	22e0      	movs	r2, #224	@ 0xe0
 8001ecc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e098      	b.n	8002006 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1e4      	bne.n	8001eb0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f89e 	bl	8002028 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001eec:	f003 fb50 	bl	8005590 <HAL_RCC_GetHCLKFreq>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	4a49      	ldr	r2, [pc, #292]	@ (8002018 <HAL_ETH_Init+0x1ec>)
 8001ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef8:	0c9a      	lsrs	r2, r3, #18
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	3a01      	subs	r2, #1
 8001f00:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 fa81 	bl	800240c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f12:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001f16:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001f22:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f26:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d009      	beq.n	8001f4a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	22e0      	movs	r2, #224	@ 0xe0
 8001f42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e05d      	b.n	8002006 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f52:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001f56:	4b31      	ldr	r3, [pc, #196]	@ (800201c <HAL_ETH_Init+0x1f0>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6952      	ldr	r2, [r2, #20]
 8001f5e:	0051      	lsls	r1, r2, #1
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	430b      	orrs	r3, r1
 8001f66:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f6a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 fae9 	bl	8002546 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 fb2f 	bl	80025d8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	3305      	adds	r3, #5
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	021a      	lsls	r2, r3, #8
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	3303      	adds	r3, #3
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	061a      	lsls	r2, r3, #24
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	041b      	lsls	r3, r3, #16
 8001fac:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001fb8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001fc6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001fc8:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4b11      	ldr	r3, [pc, #68]	@ (8002020 <HAL_ETH_Init+0x1f4>)
 8001fda:	430b      	orrs	r3, r1
 8001fdc:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b0d      	ldr	r3, [pc, #52]	@ (8002024 <HAL_ETH_Init+0x1f8>)
 8001fee:	430b      	orrs	r3, r1
 8001ff0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2210      	movs	r2, #16
 8002000:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	58024400 	.word	0x58024400
 8002014:	58000400 	.word	0x58000400
 8002018:	431bde83 	.word	0x431bde83
 800201c:	ffff8001 	.word	0xffff8001
 8002020:	0c020060 	.word	0x0c020060
 8002024:	0c20c000 	.word	0x0c20c000

08002028 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002038:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002040:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002042:	f003 faa5 	bl	8005590 <HAL_RCC_GetHCLKFreq>
 8002046:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	4a1a      	ldr	r2, [pc, #104]	@ (80020b4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d804      	bhi.n	800205a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	e022      	b.n	80020a0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	4a16      	ldr	r2, [pc, #88]	@ (80020b8 <HAL_ETH_SetMDIOClockRange+0x90>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d204      	bcs.n	800206c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	e019      	b.n	80020a0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	4a13      	ldr	r2, [pc, #76]	@ (80020bc <HAL_ETH_SetMDIOClockRange+0x94>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d915      	bls.n	80020a0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	4a12      	ldr	r2, [pc, #72]	@ (80020c0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d804      	bhi.n	8002086 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	e00c      	b.n	80020a0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	4a0e      	ldr	r2, [pc, #56]	@ (80020c4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d804      	bhi.n	8002098 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	e003      	b.n	80020a0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800209e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80020aa:	bf00      	nop
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	02160ebf 	.word	0x02160ebf
 80020b8:	03938700 	.word	0x03938700
 80020bc:	05f5e0ff 	.word	0x05f5e0ff
 80020c0:	08f0d17f 	.word	0x08f0d17f
 80020c4:	0ee6b27f 	.word	0x0ee6b27f

080020c8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80020da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	791b      	ldrb	r3, [r3, #4]
 80020e0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80020e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	7b1b      	ldrb	r3, [r3, #12]
 80020e8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80020ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	7b5b      	ldrb	r3, [r3, #13]
 80020f0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80020f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	7b9b      	ldrb	r3, [r3, #14]
 80020f8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80020fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	7bdb      	ldrb	r3, [r3, #15]
 8002100:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002102:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	7c12      	ldrb	r2, [r2, #16]
 8002108:	2a00      	cmp	r2, #0
 800210a:	d102      	bne.n	8002112 <ETH_SetMACConfig+0x4a>
 800210c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002110:	e000      	b.n	8002114 <ETH_SetMACConfig+0x4c>
 8002112:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002114:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	7c52      	ldrb	r2, [r2, #17]
 800211a:	2a00      	cmp	r2, #0
 800211c:	d102      	bne.n	8002124 <ETH_SetMACConfig+0x5c>
 800211e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002122:	e000      	b.n	8002126 <ETH_SetMACConfig+0x5e>
 8002124:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002126:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	7c9b      	ldrb	r3, [r3, #18]
 800212c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800212e:	431a      	orrs	r2, r3
               macconf->Speed |
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002134:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800213a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	7f1b      	ldrb	r3, [r3, #28]
 8002140:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002142:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	7f5b      	ldrb	r3, [r3, #29]
 8002148:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800214a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	7f92      	ldrb	r2, [r2, #30]
 8002150:	2a00      	cmp	r2, #0
 8002152:	d102      	bne.n	800215a <ETH_SetMACConfig+0x92>
 8002154:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002158:	e000      	b.n	800215c <ETH_SetMACConfig+0x94>
 800215a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800215c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	7fdb      	ldrb	r3, [r3, #31]
 8002162:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002164:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	f892 2020 	ldrb.w	r2, [r2, #32]
 800216c:	2a00      	cmp	r2, #0
 800216e:	d102      	bne.n	8002176 <ETH_SetMACConfig+0xae>
 8002170:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002174:	e000      	b.n	8002178 <ETH_SetMACConfig+0xb0>
 8002176:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002178:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800217e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002186:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002188:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800218e:	4313      	orrs	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4b56      	ldr	r3, [pc, #344]	@ (80022f4 <ETH_SetMACConfig+0x22c>)
 800219a:	4013      	ands	r3, r2
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6812      	ldr	r2, [r2, #0]
 80021a0:	68f9      	ldr	r1, [r7, #12]
 80021a2:	430b      	orrs	r3, r1
 80021a4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021aa:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80021b2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80021b4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80021bc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80021be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80021c6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80021c8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80021d0:	2a00      	cmp	r2, #0
 80021d2:	d102      	bne.n	80021da <ETH_SetMACConfig+0x112>
 80021d4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80021d8:	e000      	b.n	80021dc <ETH_SetMACConfig+0x114>
 80021da:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80021dc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80021e2:	4313      	orrs	r3, r2
 80021e4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	4b42      	ldr	r3, [pc, #264]	@ (80022f8 <ETH_SetMACConfig+0x230>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	68f9      	ldr	r1, [r7, #12]
 80021f6:	430b      	orrs	r3, r1
 80021f8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002200:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002206:	4313      	orrs	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68da      	ldr	r2, [r3, #12]
 8002210:	4b3a      	ldr	r3, [pc, #232]	@ (80022fc <ETH_SetMACConfig+0x234>)
 8002212:	4013      	ands	r3, r2
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	68f9      	ldr	r1, [r7, #12]
 800221a:	430b      	orrs	r3, r1
 800221c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002224:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800222a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002232:	2a00      	cmp	r2, #0
 8002234:	d101      	bne.n	800223a <ETH_SetMACConfig+0x172>
 8002236:	2280      	movs	r2, #128	@ 0x80
 8002238:	e000      	b.n	800223c <ETH_SetMACConfig+0x174>
 800223a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800223c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002242:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002244:	4313      	orrs	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800224e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002252:	4013      	ands	r3, r2
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	68f9      	ldr	r1, [r7, #12]
 800225a:	430b      	orrs	r3, r1
 800225c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002264:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800226c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800226e:	4313      	orrs	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800227a:	f023 0103 	bic.w	r1, r3, #3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	430a      	orrs	r2, r1
 8002286:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002292:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80022ae:	2a00      	cmp	r2, #0
 80022b0:	d101      	bne.n	80022b6 <ETH_SetMACConfig+0x1ee>
 80022b2:	2240      	movs	r2, #64	@ 0x40
 80022b4:	e000      	b.n	80022b8 <ETH_SetMACConfig+0x1f0>
 80022b6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80022b8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80022c0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80022c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80022ca:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80022cc:	4313      	orrs	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80022d8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	00048083 	.word	0x00048083
 80022f8:	c0f88000 	.word	0xc0f88000
 80022fc:	fffffef0 	.word	0xfffffef0

08002300 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4b38      	ldr	r3, [pc, #224]	@ (80023f8 <ETH_SetDMAConfig+0xf8>)
 8002316:	4013      	ands	r3, r2
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	6811      	ldr	r1, [r2, #0]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	430b      	orrs	r3, r1
 8002322:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002326:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	791b      	ldrb	r3, [r3, #4]
 800232c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002332:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	7b1b      	ldrb	r3, [r3, #12]
 8002338:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800233a:	4313      	orrs	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	4b2c      	ldr	r3, [pc, #176]	@ (80023fc <ETH_SetDMAConfig+0xfc>)
 800234a:	4013      	ands	r3, r2
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	68f9      	ldr	r1, [r7, #12]
 8002352:	430b      	orrs	r3, r1
 8002354:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002358:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	7b5b      	ldrb	r3, [r3, #13]
 800235e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002364:	4313      	orrs	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002370:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002374:	4b22      	ldr	r3, [pc, #136]	@ (8002400 <ETH_SetDMAConfig+0x100>)
 8002376:	4013      	ands	r3, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	68f9      	ldr	r1, [r7, #12]
 800237e:	430b      	orrs	r3, r1
 8002380:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002384:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	7d1b      	ldrb	r3, [r3, #20]
 8002390:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002392:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	7f5b      	ldrb	r3, [r3, #29]
 8002398:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800239a:	4313      	orrs	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023a6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80023aa:	4b16      	ldr	r3, [pc, #88]	@ (8002404 <ETH_SetDMAConfig+0x104>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	68f9      	ldr	r1, [r7, #12]
 80023b4:	430b      	orrs	r3, r1
 80023b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023ba:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	7f1b      	ldrb	r3, [r3, #28]
 80023c2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80023c8:	4313      	orrs	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023d4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80023d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002408 <ETH_SetDMAConfig+0x108>)
 80023da:	4013      	ands	r3, r2
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	68f9      	ldr	r1, [r7, #12]
 80023e2:	430b      	orrs	r3, r1
 80023e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023e8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	ffff87fd 	.word	0xffff87fd
 80023fc:	ffff2ffe 	.word	0xffff2ffe
 8002400:	fffec000 	.word	0xfffec000
 8002404:	ffc0efef 	.word	0xffc0efef
 8002408:	7fc0ffff 	.word	0x7fc0ffff

0800240c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b0a4      	sub	sp, #144	@ 0x90
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002414:	2301      	movs	r3, #1
 8002416:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800241a:	2300      	movs	r3, #0
 800241c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800241e:	2300      	movs	r3, #0
 8002420:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002424:	2300      	movs	r3, #0
 8002426:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800242a:	2301      	movs	r3, #1
 800242c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002430:	2301      	movs	r3, #1
 8002432:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002436:	2301      	movs	r3, #1
 8002438:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800243c:	2300      	movs	r3, #0
 800243e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002442:	2301      	movs	r3, #1
 8002444:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002448:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800244c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800244e:	2300      	movs	r3, #0
 8002450:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002454:	2300      	movs	r3, #0
 8002456:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002458:	2300      	movs	r3, #0
 800245a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800245e:	2300      	movs	r3, #0
 8002460:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002464:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002468:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800246a:	2300      	movs	r3, #0
 800246c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002470:	2300      	movs	r3, #0
 8002472:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002474:	2301      	movs	r3, #1
 8002476:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800247a:	2300      	movs	r3, #0
 800247c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002480:	2300      	movs	r3, #0
 8002482:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002486:	2300      	movs	r3, #0
 8002488:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800248a:	2300      	movs	r3, #0
 800248c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800248e:	2300      	movs	r3, #0
 8002490:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002492:	2300      	movs	r3, #0
 8002494:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002498:	2300      	movs	r3, #0
 800249a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800249e:	2301      	movs	r3, #1
 80024a0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80024a4:	2320      	movs	r3, #32
 80024a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80024aa:	2301      	movs	r3, #1
 80024ac:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80024b6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80024ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80024bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80024c0:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80024c8:	2302      	movs	r3, #2
 80024ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80024d4:	2300      	movs	r3, #0
 80024d6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80024da:	2300      	movs	r3, #0
 80024dc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80024e0:	2301      	movs	r3, #1
 80024e2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80024e6:	2300      	movs	r3, #0
 80024e8:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80024ea:	2301      	movs	r3, #1
 80024ec:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80024f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024f4:	4619      	mov	r1, r3
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7ff fde6 	bl	80020c8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80024fc:	2301      	movs	r3, #1
 80024fe:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002500:	2301      	movs	r3, #1
 8002502:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002504:	2300      	movs	r3, #0
 8002506:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800250e:	2300      	movs	r3, #0
 8002510:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002512:	2300      	movs	r3, #0
 8002514:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002516:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800251a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800251c:	2300      	movs	r3, #0
 800251e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002520:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002524:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002526:	2300      	movs	r3, #0
 8002528:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800252c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002530:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002532:	f107 0308 	add.w	r3, r7, #8
 8002536:	4619      	mov	r1, r3
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff fee1 	bl	8002300 <ETH_SetDMAConfig>
}
 800253e:	bf00      	nop
 8002540:	3790      	adds	r7, #144	@ 0x90
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002546:	b480      	push	{r7}
 8002548:	b085      	sub	sp, #20
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	e01d      	b.n	8002590 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68d9      	ldr	r1, [r3, #12]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4613      	mov	r3, r2
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	4413      	add	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	440b      	add	r3, r1
 8002564:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2200      	movs	r2, #0
 8002570:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2200      	movs	r2, #0
 800257c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800257e:	68b9      	ldr	r1, [r7, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	3206      	adds	r2, #6
 8002586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	3301      	adds	r3, #1
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2b03      	cmp	r3, #3
 8002594:	d9de      	bls.n	8002554 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025a4:	461a      	mov	r2, r3
 80025a6:	2303      	movs	r3, #3
 80025a8:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025b8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025c8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80025e0:	2300      	movs	r3, #0
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	e023      	b.n	800262e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6919      	ldr	r1, [r3, #16]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4613      	mov	r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4413      	add	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	440b      	add	r3, r1
 80025f6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2200      	movs	r2, #0
 8002602:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2200      	movs	r2, #0
 800260e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2200      	movs	r2, #0
 8002614:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2200      	movs	r2, #0
 800261a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	3212      	adds	r2, #18
 8002624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	3301      	adds	r3, #1
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b03      	cmp	r3, #3
 8002632:	d9d8      	bls.n	80025e6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800265a:	461a      	mov	r2, r3
 800265c:	2303      	movs	r3, #3
 800265e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800266e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002682:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002694:	b480      	push	{r7}
 8002696:	b089      	sub	sp, #36	@ 0x24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80026a2:	4b89      	ldr	r3, [pc, #548]	@ (80028c8 <HAL_GPIO_Init+0x234>)
 80026a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026a6:	e194      	b.n	80029d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	2101      	movs	r1, #1
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	fa01 f303 	lsl.w	r3, r1, r3
 80026b4:	4013      	ands	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 8186 	beq.w	80029cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d005      	beq.n	80026d8 <HAL_GPIO_Init+0x44>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d130      	bne.n	800273a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	2203      	movs	r2, #3
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800270e:	2201      	movs	r2, #1
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	091b      	lsrs	r3, r3, #4
 8002724:	f003 0201 	and.w	r2, r3, #1
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b03      	cmp	r3, #3
 8002744:	d017      	beq.n	8002776 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	2203      	movs	r2, #3
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4013      	ands	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d123      	bne.n	80027ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	08da      	lsrs	r2, r3, #3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3208      	adds	r2, #8
 800278a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	220f      	movs	r2, #15
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	691a      	ldr	r2, [r3, #16]
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	08da      	lsrs	r2, r3, #3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3208      	adds	r2, #8
 80027c4:	69b9      	ldr	r1, [r7, #24]
 80027c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	2203      	movs	r2, #3
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 0203 	and.w	r2, r3, #3
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 80e0 	beq.w	80029cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280c:	4b2f      	ldr	r3, [pc, #188]	@ (80028cc <HAL_GPIO_Init+0x238>)
 800280e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002812:	4a2e      	ldr	r2, [pc, #184]	@ (80028cc <HAL_GPIO_Init+0x238>)
 8002814:	f043 0302 	orr.w	r3, r3, #2
 8002818:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800281c:	4b2b      	ldr	r3, [pc, #172]	@ (80028cc <HAL_GPIO_Init+0x238>)
 800281e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800282a:	4a29      	ldr	r2, [pc, #164]	@ (80028d0 <HAL_GPIO_Init+0x23c>)
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	089b      	lsrs	r3, r3, #2
 8002830:	3302      	adds	r3, #2
 8002832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	220f      	movs	r2, #15
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a20      	ldr	r2, [pc, #128]	@ (80028d4 <HAL_GPIO_Init+0x240>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d052      	beq.n	80028fc <HAL_GPIO_Init+0x268>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a1f      	ldr	r2, [pc, #124]	@ (80028d8 <HAL_GPIO_Init+0x244>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d031      	beq.n	80028c2 <HAL_GPIO_Init+0x22e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a1e      	ldr	r2, [pc, #120]	@ (80028dc <HAL_GPIO_Init+0x248>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d02b      	beq.n	80028be <HAL_GPIO_Init+0x22a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a1d      	ldr	r2, [pc, #116]	@ (80028e0 <HAL_GPIO_Init+0x24c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d025      	beq.n	80028ba <HAL_GPIO_Init+0x226>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a1c      	ldr	r2, [pc, #112]	@ (80028e4 <HAL_GPIO_Init+0x250>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d01f      	beq.n	80028b6 <HAL_GPIO_Init+0x222>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a1b      	ldr	r2, [pc, #108]	@ (80028e8 <HAL_GPIO_Init+0x254>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d019      	beq.n	80028b2 <HAL_GPIO_Init+0x21e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a1a      	ldr	r2, [pc, #104]	@ (80028ec <HAL_GPIO_Init+0x258>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d013      	beq.n	80028ae <HAL_GPIO_Init+0x21a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a19      	ldr	r2, [pc, #100]	@ (80028f0 <HAL_GPIO_Init+0x25c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d00d      	beq.n	80028aa <HAL_GPIO_Init+0x216>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a18      	ldr	r2, [pc, #96]	@ (80028f4 <HAL_GPIO_Init+0x260>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d007      	beq.n	80028a6 <HAL_GPIO_Init+0x212>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a17      	ldr	r2, [pc, #92]	@ (80028f8 <HAL_GPIO_Init+0x264>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d101      	bne.n	80028a2 <HAL_GPIO_Init+0x20e>
 800289e:	2309      	movs	r3, #9
 80028a0:	e02d      	b.n	80028fe <HAL_GPIO_Init+0x26a>
 80028a2:	230a      	movs	r3, #10
 80028a4:	e02b      	b.n	80028fe <HAL_GPIO_Init+0x26a>
 80028a6:	2308      	movs	r3, #8
 80028a8:	e029      	b.n	80028fe <HAL_GPIO_Init+0x26a>
 80028aa:	2307      	movs	r3, #7
 80028ac:	e027      	b.n	80028fe <HAL_GPIO_Init+0x26a>
 80028ae:	2306      	movs	r3, #6
 80028b0:	e025      	b.n	80028fe <HAL_GPIO_Init+0x26a>
 80028b2:	2305      	movs	r3, #5
 80028b4:	e023      	b.n	80028fe <HAL_GPIO_Init+0x26a>
 80028b6:	2304      	movs	r3, #4
 80028b8:	e021      	b.n	80028fe <HAL_GPIO_Init+0x26a>
 80028ba:	2303      	movs	r3, #3
 80028bc:	e01f      	b.n	80028fe <HAL_GPIO_Init+0x26a>
 80028be:	2302      	movs	r3, #2
 80028c0:	e01d      	b.n	80028fe <HAL_GPIO_Init+0x26a>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e01b      	b.n	80028fe <HAL_GPIO_Init+0x26a>
 80028c6:	bf00      	nop
 80028c8:	58000080 	.word	0x58000080
 80028cc:	58024400 	.word	0x58024400
 80028d0:	58000400 	.word	0x58000400
 80028d4:	58020000 	.word	0x58020000
 80028d8:	58020400 	.word	0x58020400
 80028dc:	58020800 	.word	0x58020800
 80028e0:	58020c00 	.word	0x58020c00
 80028e4:	58021000 	.word	0x58021000
 80028e8:	58021400 	.word	0x58021400
 80028ec:	58021800 	.word	0x58021800
 80028f0:	58021c00 	.word	0x58021c00
 80028f4:	58022000 	.word	0x58022000
 80028f8:	58022400 	.word	0x58022400
 80028fc:	2300      	movs	r3, #0
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	f002 0203 	and.w	r2, r2, #3
 8002904:	0092      	lsls	r2, r2, #2
 8002906:	4093      	lsls	r3, r2
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800290e:	4938      	ldr	r1, [pc, #224]	@ (80029f0 <HAL_GPIO_Init+0x35c>)
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	089b      	lsrs	r3, r3, #2
 8002914:	3302      	adds	r3, #2
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800291c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	43db      	mvns	r3, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4013      	ands	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002942:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800294a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002970:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	3301      	adds	r3, #1
 80029d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	fa22 f303 	lsr.w	r3, r2, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f47f ae63 	bne.w	80026a8 <HAL_GPIO_Init+0x14>
  }
}
 80029e2:	bf00      	nop
 80029e4:	bf00      	nop
 80029e6:	3724      	adds	r7, #36	@ 0x24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	58000400 	.word	0x58000400

080029f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	807b      	strh	r3, [r7, #2]
 8002a00:	4613      	mov	r3, r2
 8002a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a04:	787b      	ldrb	r3, [r7, #1]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a0a:	887a      	ldrh	r2, [r7, #2]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002a10:	e003      	b.n	8002a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a12:	887b      	ldrh	r3, [r7, #2]
 8002a14:	041a      	lsls	r2, r3, #16
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	619a      	str	r2, [r3, #24]
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e08b      	b.n	8002b52 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d106      	bne.n	8002a54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7fe fb26 	bl	80010a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2224      	movs	r2, #36	@ 0x24
 8002a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0201 	bic.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d107      	bne.n	8002aa2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	e006      	b.n	8002ab0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002aae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d108      	bne.n	8002aca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ac6:	605a      	str	r2, [r3, #4]
 8002ac8:	e007      	b.n	8002ada <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ad8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6859      	ldr	r1, [r3, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b5c <HAL_I2C_Init+0x134>)
 8002ae6:	430b      	orrs	r3, r1
 8002ae8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68da      	ldr	r2, [r3, #12]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002af8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691a      	ldr	r2, [r3, #16]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69d9      	ldr	r1, [r3, #28]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a1a      	ldr	r2, [r3, #32]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	02008000 	.word	0x02008000

08002b60 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	607a      	str	r2, [r7, #4]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	817b      	strh	r3, [r7, #10]
 8002b70:	4613      	mov	r3, r2
 8002b72:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	f040 80fd 	bne.w	8002d7c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_I2C_Master_Transmit+0x30>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e0f6      	b.n	8002d7e <HAL_I2C_Master_Transmit+0x21e>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b98:	f7fe fd94 	bl	80016c4 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	2319      	movs	r3, #25
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f001 f875 	bl	8003c9a <I2C_WaitOnFlagUntilTimeout>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e0e1      	b.n	8002d7e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2221      	movs	r2, #33	@ 0x21
 8002bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2210      	movs	r2, #16
 8002bc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	893a      	ldrh	r2, [r7, #8]
 8002bda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	2bff      	cmp	r3, #255	@ 0xff
 8002bea:	d906      	bls.n	8002bfa <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	22ff      	movs	r2, #255	@ 0xff
 8002bf0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002bf2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	e007      	b.n	8002c0a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002c04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c08:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d024      	beq.n	8002c5c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c16:	781a      	ldrb	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	3301      	adds	r3, #1
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	8979      	ldrh	r1, [r7, #10]
 8002c4e:	4b4e      	ldr	r3, [pc, #312]	@ (8002d88 <HAL_I2C_Master_Transmit+0x228>)
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f001 fa6f 	bl	8004138 <I2C_TransferConfig>
 8002c5a:	e066      	b.n	8002d2a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	8979      	ldrh	r1, [r7, #10]
 8002c64:	4b48      	ldr	r3, [pc, #288]	@ (8002d88 <HAL_I2C_Master_Transmit+0x228>)
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f001 fa64 	bl	8004138 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002c70:	e05b      	b.n	8002d2a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	6a39      	ldr	r1, [r7, #32]
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f001 f868 	bl	8003d4c <I2C_WaitOnTXISFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e07b      	b.n	8002d7e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8a:	781a      	ldrb	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d034      	beq.n	8002d2a <HAL_I2C_Master_Transmit+0x1ca>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d130      	bne.n	8002d2a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2180      	movs	r1, #128	@ 0x80
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 ffe1 	bl	8003c9a <I2C_WaitOnFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e04d      	b.n	8002d7e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2bff      	cmp	r3, #255	@ 0xff
 8002cea:	d90e      	bls.n	8002d0a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	22ff      	movs	r2, #255	@ 0xff
 8002cf0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	8979      	ldrh	r1, [r7, #10]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f001 fa18 	bl	8004138 <I2C_TransferConfig>
 8002d08:	e00f      	b.n	8002d2a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	8979      	ldrh	r1, [r7, #10]
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f001 fa07 	bl	8004138 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d19e      	bne.n	8002c72 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	6a39      	ldr	r1, [r7, #32]
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f001 f84e 	bl	8003dda <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e01a      	b.n	8002d7e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6859      	ldr	r1, [r3, #4]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d8c <HAL_I2C_Master_Transmit+0x22c>)
 8002d5c:	400b      	ands	r3, r1
 8002d5e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	e000      	b.n	8002d7e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002d7c:	2302      	movs	r3, #2
  }
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	80002000 	.word	0x80002000
 8002d8c:	fe00e800 	.word	0xfe00e800

08002d90 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	607a      	str	r2, [r7, #4]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	817b      	strh	r3, [r7, #10]
 8002da0:	4613      	mov	r3, r2
 8002da2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b20      	cmp	r3, #32
 8002dae:	f040 80db 	bne.w	8002f68 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_I2C_Master_Receive+0x30>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e0d4      	b.n	8002f6a <HAL_I2C_Master_Receive+0x1da>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dc8:	f7fe fc7c 	bl	80016c4 <HAL_GetTick>
 8002dcc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	2319      	movs	r3, #25
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 ff5d 	bl	8003c9a <I2C_WaitOnFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e0bf      	b.n	8002f6a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2222      	movs	r2, #34	@ 0x22
 8002dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2210      	movs	r2, #16
 8002df6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	893a      	ldrh	r2, [r7, #8]
 8002e0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	2bff      	cmp	r3, #255	@ 0xff
 8002e1a:	d90e      	bls.n	8002e3a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	22ff      	movs	r2, #255	@ 0xff
 8002e20:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	8979      	ldrh	r1, [r7, #10]
 8002e2a:	4b52      	ldr	r3, [pc, #328]	@ (8002f74 <HAL_I2C_Master_Receive+0x1e4>)
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f001 f980 	bl	8004138 <I2C_TransferConfig>
 8002e38:	e06d      	b.n	8002f16 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	8979      	ldrh	r1, [r7, #10]
 8002e4c:	4b49      	ldr	r3, [pc, #292]	@ (8002f74 <HAL_I2C_Master_Receive+0x1e4>)
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f001 f96f 	bl	8004138 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002e5a:	e05c      	b.n	8002f16 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	6a39      	ldr	r1, [r7, #32]
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 fffd 	bl	8003e60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e07c      	b.n	8002f6a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d034      	beq.n	8002f16 <HAL_I2C_Master_Receive+0x186>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d130      	bne.n	8002f16 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2180      	movs	r1, #128	@ 0x80
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 feeb 	bl	8003c9a <I2C_WaitOnFlagUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e04d      	b.n	8002f6a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2bff      	cmp	r3, #255	@ 0xff
 8002ed6:	d90e      	bls.n	8002ef6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	22ff      	movs	r2, #255	@ 0xff
 8002edc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	8979      	ldrh	r1, [r7, #10]
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f001 f922 	bl	8004138 <I2C_TransferConfig>
 8002ef4:	e00f      	b.n	8002f16 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	8979      	ldrh	r1, [r7, #10]
 8002f08:	2300      	movs	r3, #0
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f001 f911 	bl	8004138 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d19d      	bne.n	8002e5c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	6a39      	ldr	r1, [r7, #32]
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 ff58 	bl	8003dda <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e01a      	b.n	8002f6a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6859      	ldr	r1, [r3, #4]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	4b0c      	ldr	r3, [pc, #48]	@ (8002f78 <HAL_I2C_Master_Receive+0x1e8>)
 8002f48:	400b      	ands	r3, r1
 8002f4a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	e000      	b.n	8002f6a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002f68:	2302      	movs	r3, #2
  }
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	80002400 	.word	0x80002400
 8002f78:	fe00e800 	.word	0xfe00e800

08002f7c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	68f9      	ldr	r1, [r7, #12]
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	4798      	blx	r3
  }
}
 8002fa8:	bf00      	nop
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00f      	beq.n	8002ff2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00a      	beq.n	8002ff2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe0:	f043 0201 	orr.w	r2, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ff0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00f      	beq.n	800301c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300a:	f043 0208 	orr.w	r2, r3, #8
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800301a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00f      	beq.n	8003046 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00a      	beq.n	8003046 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003034:	f043 0202 	orr.w	r2, r3, #2
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003044:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 030b 	and.w	r3, r3, #11
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8003056:	68f9      	ldr	r1, [r7, #12]
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fcc5 	bl	80039e8 <I2C_ITError>
  }
}
 800305e:	bf00      	nop
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	70fb      	strb	r3, [r7, #3]
 800309a:	4613      	mov	r3, r2
 800309c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b086      	sub	sp, #24
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	60f8      	str	r0, [r7, #12]
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <I2C_Slave_ISR_IT+0x24>
 8003106:	2302      	movs	r3, #2
 8003108:	e0e2      	b.n	80032d0 <I2C_Slave_ISR_IT+0x1ea>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	2b00      	cmp	r3, #0
 800311a:	d009      	beq.n	8003130 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003122:	2b00      	cmp	r3, #0
 8003124:	d004      	beq.n	8003130 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003126:	6939      	ldr	r1, [r7, #16]
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 f9b5 	bl	8003498 <I2C_ITSlaveCplt>
 800312e:	e0ca      	b.n	80032c6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f003 0310 	and.w	r3, r3, #16
 8003136:	2b00      	cmp	r3, #0
 8003138:	d04b      	beq.n	80031d2 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003140:	2b00      	cmp	r3, #0
 8003142:	d046      	beq.n	80031d2 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003148:	b29b      	uxth	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d128      	bne.n	80031a0 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b28      	cmp	r3, #40	@ 0x28
 8003158:	d108      	bne.n	800316c <I2C_Slave_ISR_IT+0x86>
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003160:	d104      	bne.n	800316c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003162:	6939      	ldr	r1, [r7, #16]
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 fbeb 	bl	8003940 <I2C_ITListenCplt>
 800316a:	e031      	b.n	80031d0 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b29      	cmp	r3, #41	@ 0x29
 8003176:	d10e      	bne.n	8003196 <I2C_Slave_ISR_IT+0xb0>
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800317e:	d00a      	beq.n	8003196 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2210      	movs	r2, #16
 8003186:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 fd44 	bl	8003c16 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 f926 	bl	80033e0 <I2C_ITSlaveSeqCplt>
 8003194:	e01c      	b.n	80031d0 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2210      	movs	r2, #16
 800319c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800319e:	e08f      	b.n	80032c0 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2210      	movs	r2, #16
 80031a6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ac:	f043 0204 	orr.w	r2, r3, #4
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <I2C_Slave_ISR_IT+0xdc>
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031c0:	d17e      	bne.n	80032c0 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c6:	4619      	mov	r1, r3
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 fc0d 	bl	80039e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80031ce:	e077      	b.n	80032c0 <I2C_Slave_ISR_IT+0x1da>
 80031d0:	e076      	b.n	80032c0 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d02f      	beq.n	800323c <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d02a      	beq.n	800323c <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d018      	beq.n	8003222 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003218:	b29b      	uxth	r3, r3
 800321a:	3b01      	subs	r3, #1
 800321c:	b29a      	uxth	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003226:	b29b      	uxth	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	d14b      	bne.n	80032c4 <I2C_Slave_ISR_IT+0x1de>
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003232:	d047      	beq.n	80032c4 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 f8d3 	bl	80033e0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800323a:	e043      	b.n	80032c4 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d009      	beq.n	800325a <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800324c:	2b00      	cmp	r3, #0
 800324e:	d004      	beq.n	800325a <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003250:	6939      	ldr	r1, [r7, #16]
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 f840 	bl	80032d8 <I2C_ITAddrCplt>
 8003258:	e035      	b.n	80032c6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d030      	beq.n	80032c6 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800326a:	2b00      	cmp	r3, #0
 800326c:	d02b      	beq.n	80032c6 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003272:	b29b      	uxth	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d018      	beq.n	80032aa <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327c:	781a      	ldrb	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80032a8:	e00d      	b.n	80032c6 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032b0:	d002      	beq.n	80032b8 <I2C_Slave_ISR_IT+0x1d2>
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d106      	bne.n	80032c6 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 f891 	bl	80033e0 <I2C_ITSlaveSeqCplt>
 80032be:	e002      	b.n	80032c6 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80032c0:	bf00      	nop
 80032c2:	e000      	b.n	80032c6 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80032c4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80032ee:	2b28      	cmp	r3, #40	@ 0x28
 80032f0:	d16a      	bne.n	80033c8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	0c1b      	lsrs	r3, r3, #16
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	0c1b      	lsrs	r3, r3, #16
 800330a:	b29b      	uxth	r3, r3
 800330c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003310:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	b29b      	uxth	r3, r3
 800331a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800331e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	b29b      	uxth	r3, r3
 8003328:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800332c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d138      	bne.n	80033a8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003336:	897b      	ldrh	r3, [r7, #10]
 8003338:	09db      	lsrs	r3, r3, #7
 800333a:	b29a      	uxth	r2, r3
 800333c:	89bb      	ldrh	r3, [r7, #12]
 800333e:	4053      	eors	r3, r2
 8003340:	b29b      	uxth	r3, r3
 8003342:	f003 0306 	and.w	r3, r3, #6
 8003346:	2b00      	cmp	r3, #0
 8003348:	d11c      	bne.n	8003384 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800334a:	897b      	ldrh	r3, [r7, #10]
 800334c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800335c:	2b02      	cmp	r3, #2
 800335e:	d13b      	bne.n	80033d8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2208      	movs	r2, #8
 800336c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003376:	89ba      	ldrh	r2, [r7, #12]
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	4619      	mov	r1, r3
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff fe86 	bl	800308e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003382:	e029      	b.n	80033d8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003384:	893b      	ldrh	r3, [r7, #8]
 8003386:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003388:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 ff05 	bl	800419c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800339a:	89ba      	ldrh	r2, [r7, #12]
 800339c:	7bfb      	ldrb	r3, [r7, #15]
 800339e:	4619      	mov	r1, r3
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7ff fe74 	bl	800308e <HAL_I2C_AddrCallback>
}
 80033a6:	e017      	b.n	80033d8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80033a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 fef5 	bl	800419c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80033ba:	89ba      	ldrh	r2, [r7, #12]
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	4619      	mov	r1, r3
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff fe64 	bl	800308e <HAL_I2C_AddrCallback>
}
 80033c6:	e007      	b.n	80033d8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2208      	movs	r2, #8
 80033ce:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80033d8:	bf00      	nop
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d008      	beq.n	8003414 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	e00c      	b.n	800342e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d007      	beq.n	800342e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800342c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b29      	cmp	r3, #41	@ 0x29
 8003438:	d112      	bne.n	8003460 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2228      	movs	r2, #40	@ 0x28
 800343e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2221      	movs	r2, #33	@ 0x21
 8003446:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003448:	2101      	movs	r1, #1
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fea6 	bl	800419c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff fe04 	bl	8003066 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800345e:	e017      	b.n	8003490 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b2a      	cmp	r3, #42	@ 0x2a
 800346a:	d111      	bne.n	8003490 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2228      	movs	r2, #40	@ 0x28
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2222      	movs	r2, #34	@ 0x22
 8003478:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800347a:	2102      	movs	r1, #2
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 fe8d 	bl	800419c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff fdf5 	bl	800307a <HAL_I2C_SlaveRxCpltCallback>
}
 8003490:	bf00      	nop
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034ba:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2220      	movs	r2, #32
 80034c2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034c4:	7afb      	ldrb	r3, [r7, #11]
 80034c6:	2b21      	cmp	r3, #33	@ 0x21
 80034c8:	d002      	beq.n	80034d0 <I2C_ITSlaveCplt+0x38>
 80034ca:	7afb      	ldrb	r3, [r7, #11]
 80034cc:	2b29      	cmp	r3, #41	@ 0x29
 80034ce:	d108      	bne.n	80034e2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80034d0:	f248 0101 	movw	r1, #32769	@ 0x8001
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 fe61 	bl	800419c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2221      	movs	r2, #33	@ 0x21
 80034de:	631a      	str	r2, [r3, #48]	@ 0x30
 80034e0:	e019      	b.n	8003516 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80034e2:	7afb      	ldrb	r3, [r7, #11]
 80034e4:	2b22      	cmp	r3, #34	@ 0x22
 80034e6:	d002      	beq.n	80034ee <I2C_ITSlaveCplt+0x56>
 80034e8:	7afb      	ldrb	r3, [r7, #11]
 80034ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80034ec:	d108      	bne.n	8003500 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80034ee:	f248 0102 	movw	r1, #32770	@ 0x8002
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fe52 	bl	800419c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2222      	movs	r2, #34	@ 0x22
 80034fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80034fe:	e00a      	b.n	8003516 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003500:	7afb      	ldrb	r3, [r7, #11]
 8003502:	2b28      	cmp	r3, #40	@ 0x28
 8003504:	d107      	bne.n	8003516 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003506:	f248 0103 	movw	r1, #32771	@ 0x8003
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fe46 	bl	800419c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003524:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6859      	ldr	r1, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4b7f      	ldr	r3, [pc, #508]	@ (8003730 <I2C_ITSlaveCplt+0x298>)
 8003532:	400b      	ands	r3, r1
 8003534:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fb6d 	bl	8003c16 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d07a      	beq.n	800363c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003554:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 8111 	beq.w	8003782 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a73      	ldr	r2, [pc, #460]	@ (8003734 <I2C_ITSlaveCplt+0x29c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d059      	beq.n	8003620 <I2C_ITSlaveCplt+0x188>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a71      	ldr	r2, [pc, #452]	@ (8003738 <I2C_ITSlaveCplt+0x2a0>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d053      	beq.n	8003620 <I2C_ITSlaveCplt+0x188>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a6f      	ldr	r2, [pc, #444]	@ (800373c <I2C_ITSlaveCplt+0x2a4>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d04d      	beq.n	8003620 <I2C_ITSlaveCplt+0x188>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a6d      	ldr	r2, [pc, #436]	@ (8003740 <I2C_ITSlaveCplt+0x2a8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d047      	beq.n	8003620 <I2C_ITSlaveCplt+0x188>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a6b      	ldr	r2, [pc, #428]	@ (8003744 <I2C_ITSlaveCplt+0x2ac>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d041      	beq.n	8003620 <I2C_ITSlaveCplt+0x188>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a69      	ldr	r2, [pc, #420]	@ (8003748 <I2C_ITSlaveCplt+0x2b0>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d03b      	beq.n	8003620 <I2C_ITSlaveCplt+0x188>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a67      	ldr	r2, [pc, #412]	@ (800374c <I2C_ITSlaveCplt+0x2b4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d035      	beq.n	8003620 <I2C_ITSlaveCplt+0x188>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a65      	ldr	r2, [pc, #404]	@ (8003750 <I2C_ITSlaveCplt+0x2b8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d02f      	beq.n	8003620 <I2C_ITSlaveCplt+0x188>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a63      	ldr	r2, [pc, #396]	@ (8003754 <I2C_ITSlaveCplt+0x2bc>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d029      	beq.n	8003620 <I2C_ITSlaveCplt+0x188>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a61      	ldr	r2, [pc, #388]	@ (8003758 <I2C_ITSlaveCplt+0x2c0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d023      	beq.n	8003620 <I2C_ITSlaveCplt+0x188>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a5f      	ldr	r2, [pc, #380]	@ (800375c <I2C_ITSlaveCplt+0x2c4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d01d      	beq.n	8003620 <I2C_ITSlaveCplt+0x188>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a5d      	ldr	r2, [pc, #372]	@ (8003760 <I2C_ITSlaveCplt+0x2c8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d017      	beq.n	8003620 <I2C_ITSlaveCplt+0x188>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003764 <I2C_ITSlaveCplt+0x2cc>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d011      	beq.n	8003620 <I2C_ITSlaveCplt+0x188>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a59      	ldr	r2, [pc, #356]	@ (8003768 <I2C_ITSlaveCplt+0x2d0>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00b      	beq.n	8003620 <I2C_ITSlaveCplt+0x188>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a57      	ldr	r2, [pc, #348]	@ (800376c <I2C_ITSlaveCplt+0x2d4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d005      	beq.n	8003620 <I2C_ITSlaveCplt+0x188>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a55      	ldr	r2, [pc, #340]	@ (8003770 <I2C_ITSlaveCplt+0x2d8>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d105      	bne.n	800362c <I2C_ITSlaveCplt+0x194>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	b29b      	uxth	r3, r3
 800362a:	e004      	b.n	8003636 <I2C_ITSlaveCplt+0x19e>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	b29b      	uxth	r3, r3
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800363a:	e0a2      	b.n	8003782 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 809d 	beq.w	8003782 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003656:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 8090 	beq.w	8003782 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a32      	ldr	r2, [pc, #200]	@ (8003734 <I2C_ITSlaveCplt+0x29c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d059      	beq.n	8003722 <I2C_ITSlaveCplt+0x28a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a30      	ldr	r2, [pc, #192]	@ (8003738 <I2C_ITSlaveCplt+0x2a0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d053      	beq.n	8003722 <I2C_ITSlaveCplt+0x28a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a2e      	ldr	r2, [pc, #184]	@ (800373c <I2C_ITSlaveCplt+0x2a4>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d04d      	beq.n	8003722 <I2C_ITSlaveCplt+0x28a>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a2c      	ldr	r2, [pc, #176]	@ (8003740 <I2C_ITSlaveCplt+0x2a8>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d047      	beq.n	8003722 <I2C_ITSlaveCplt+0x28a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a2a      	ldr	r2, [pc, #168]	@ (8003744 <I2C_ITSlaveCplt+0x2ac>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d041      	beq.n	8003722 <I2C_ITSlaveCplt+0x28a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a28      	ldr	r2, [pc, #160]	@ (8003748 <I2C_ITSlaveCplt+0x2b0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d03b      	beq.n	8003722 <I2C_ITSlaveCplt+0x28a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a26      	ldr	r2, [pc, #152]	@ (800374c <I2C_ITSlaveCplt+0x2b4>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d035      	beq.n	8003722 <I2C_ITSlaveCplt+0x28a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a24      	ldr	r2, [pc, #144]	@ (8003750 <I2C_ITSlaveCplt+0x2b8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d02f      	beq.n	8003722 <I2C_ITSlaveCplt+0x28a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a22      	ldr	r2, [pc, #136]	@ (8003754 <I2C_ITSlaveCplt+0x2bc>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d029      	beq.n	8003722 <I2C_ITSlaveCplt+0x28a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a20      	ldr	r2, [pc, #128]	@ (8003758 <I2C_ITSlaveCplt+0x2c0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d023      	beq.n	8003722 <I2C_ITSlaveCplt+0x28a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1e      	ldr	r2, [pc, #120]	@ (800375c <I2C_ITSlaveCplt+0x2c4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d01d      	beq.n	8003722 <I2C_ITSlaveCplt+0x28a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003760 <I2C_ITSlaveCplt+0x2c8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d017      	beq.n	8003722 <I2C_ITSlaveCplt+0x28a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003764 <I2C_ITSlaveCplt+0x2cc>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d011      	beq.n	8003722 <I2C_ITSlaveCplt+0x28a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a18      	ldr	r2, [pc, #96]	@ (8003768 <I2C_ITSlaveCplt+0x2d0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00b      	beq.n	8003722 <I2C_ITSlaveCplt+0x28a>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a16      	ldr	r2, [pc, #88]	@ (800376c <I2C_ITSlaveCplt+0x2d4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d005      	beq.n	8003722 <I2C_ITSlaveCplt+0x28a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a14      	ldr	r2, [pc, #80]	@ (8003770 <I2C_ITSlaveCplt+0x2d8>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d128      	bne.n	8003774 <I2C_ITSlaveCplt+0x2dc>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	b29b      	uxth	r3, r3
 800372c:	e027      	b.n	800377e <I2C_ITSlaveCplt+0x2e6>
 800372e:	bf00      	nop
 8003730:	fe00e800 	.word	0xfe00e800
 8003734:	40020010 	.word	0x40020010
 8003738:	40020028 	.word	0x40020028
 800373c:	40020040 	.word	0x40020040
 8003740:	40020058 	.word	0x40020058
 8003744:	40020070 	.word	0x40020070
 8003748:	40020088 	.word	0x40020088
 800374c:	400200a0 	.word	0x400200a0
 8003750:	400200b8 	.word	0x400200b8
 8003754:	40020410 	.word	0x40020410
 8003758:	40020428 	.word	0x40020428
 800375c:	40020440 	.word	0x40020440
 8003760:	40020458 	.word	0x40020458
 8003764:	40020470 	.word	0x40020470
 8003768:	40020488 	.word	0x40020488
 800376c:	400204a0 	.word	0x400204a0
 8003770:	400204b8 	.word	0x400204b8
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	b29b      	uxth	r3, r3
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d020      	beq.n	80037ce <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f023 0304 	bic.w	r3, r3, #4
 8003792:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00c      	beq.n	80037ce <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	3b01      	subs	r3, #1
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037dc:	f043 0204 	orr.w	r2, r3, #4
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f003 0310 	and.w	r3, r3, #16
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d049      	beq.n	8003882 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d044      	beq.n	8003882 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d128      	bne.n	8003854 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b28      	cmp	r3, #40	@ 0x28
 800380c:	d108      	bne.n	8003820 <I2C_ITSlaveCplt+0x388>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003814:	d104      	bne.n	8003820 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003816:	6979      	ldr	r1, [r7, #20]
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f891 	bl	8003940 <I2C_ITListenCplt>
 800381e:	e030      	b.n	8003882 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b29      	cmp	r3, #41	@ 0x29
 800382a:	d10e      	bne.n	800384a <I2C_ITSlaveCplt+0x3b2>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003832:	d00a      	beq.n	800384a <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2210      	movs	r2, #16
 800383a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f9ea 	bl	8003c16 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7ff fdcc 	bl	80033e0 <I2C_ITSlaveSeqCplt>
 8003848:	e01b      	b.n	8003882 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2210      	movs	r2, #16
 8003850:	61da      	str	r2, [r3, #28]
 8003852:	e016      	b.n	8003882 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2210      	movs	r2, #16
 800385a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003860:	f043 0204 	orr.w	r2, r3, #4
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <I2C_ITSlaveCplt+0x3de>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003874:	d105      	bne.n	8003882 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387a:	4619      	mov	r1, r3
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f8b3 	bl	80039e8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003894:	2b00      	cmp	r3, #0
 8003896:	d010      	beq.n	80038ba <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389c:	4619      	mov	r1, r3
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f8a2 	bl	80039e8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b28      	cmp	r3, #40	@ 0x28
 80038ae:	d141      	bne.n	8003934 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80038b0:	6979      	ldr	r1, [r7, #20]
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f844 	bl	8003940 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80038b8:	e03c      	b.n	8003934 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038be:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038c2:	d014      	beq.n	80038ee <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff fd8b 	bl	80033e0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a1b      	ldr	r2, [pc, #108]	@ (800393c <I2C_ITSlaveCplt+0x4a4>)
 80038ce:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7ff fbdf 	bl	80030aa <HAL_I2C_ListenCpltCallback>
}
 80038ec:	e022      	b.n	8003934 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b22      	cmp	r3, #34	@ 0x22
 80038f8:	d10e      	bne.n	8003918 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2220      	movs	r2, #32
 80038fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7ff fbb2 	bl	800307a <HAL_I2C_SlaveRxCpltCallback>
}
 8003916:	e00d      	b.n	8003934 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2220      	movs	r2, #32
 800391c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff fb99 	bl	8003066 <HAL_I2C_SlaveTxCpltCallback>
}
 8003934:	bf00      	nop
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	ffff0000 	.word	0xffff0000

08003940 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a25      	ldr	r2, [pc, #148]	@ (80039e4 <I2C_ITListenCplt+0xa4>)
 800394e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	2b00      	cmp	r3, #0
 8003974:	d022      	beq.n	80039bc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003992:	2b00      	cmp	r3, #0
 8003994:	d012      	beq.n	80039bc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b4:	f043 0204 	orr.w	r2, r3, #4
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80039bc:	f248 0103 	movw	r1, #32771	@ 0x8003
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 fbeb 	bl	800419c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2210      	movs	r2, #16
 80039cc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7ff fb67 	bl	80030aa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80039dc:	bf00      	nop
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	ffff0000 	.word	0xffff0000

080039e8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039f8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a6d      	ldr	r2, [pc, #436]	@ (8003bbc <I2C_ITError+0x1d4>)
 8003a06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	2b28      	cmp	r3, #40	@ 0x28
 8003a1e:	d005      	beq.n	8003a2c <I2C_ITError+0x44>
 8003a20:	7bfb      	ldrb	r3, [r7, #15]
 8003a22:	2b29      	cmp	r3, #41	@ 0x29
 8003a24:	d002      	beq.n	8003a2c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
 8003a28:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a2a:	d10b      	bne.n	8003a44 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003a2c:	2103      	movs	r1, #3
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fbb4 	bl	800419c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2228      	movs	r2, #40	@ 0x28
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a60      	ldr	r2, [pc, #384]	@ (8003bc0 <I2C_ITError+0x1d8>)
 8003a40:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a42:	e030      	b.n	8003aa6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003a44:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 fba7 	bl	800419c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f8e1 	bl	8003c16 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b60      	cmp	r3, #96	@ 0x60
 8003a5e:	d01f      	beq.n	8003aa0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	2b20      	cmp	r3, #32
 8003a74:	d114      	bne.n	8003aa0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	f003 0310 	and.w	r3, r3, #16
 8003a80:	2b10      	cmp	r3, #16
 8003a82:	d109      	bne.n	8003a98 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2210      	movs	r2, #16
 8003a8a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a90:	f043 0204 	orr.w	r2, r3, #4
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aaa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d039      	beq.n	8003b28 <I2C_ITError+0x140>
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b11      	cmp	r3, #17
 8003ab8:	d002      	beq.n	8003ac0 <I2C_ITError+0xd8>
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b21      	cmp	r3, #33	@ 0x21
 8003abe:	d133      	bne.n	8003b28 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ace:	d107      	bne.n	8003ae0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003ade:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fe f993 	bl	8001e10 <HAL_DMA_GetState>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d017      	beq.n	8003b20 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af4:	4a33      	ldr	r2, [pc, #204]	@ (8003bc4 <I2C_ITError+0x1dc>)
 8003af6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fd ff3d 	bl	8001984 <HAL_DMA_Abort_IT>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d04d      	beq.n	8003bac <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b1e:	e045      	b.n	8003bac <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f851 	bl	8003bc8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b26:	e041      	b.n	8003bac <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d039      	beq.n	8003ba4 <I2C_ITError+0x1bc>
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b12      	cmp	r3, #18
 8003b34:	d002      	beq.n	8003b3c <I2C_ITError+0x154>
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	2b22      	cmp	r3, #34	@ 0x22
 8003b3a:	d133      	bne.n	8003ba4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b4a:	d107      	bne.n	8003b5c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b5a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fe f955 	bl	8001e10 <HAL_DMA_GetState>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d017      	beq.n	8003b9c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b70:	4a14      	ldr	r2, [pc, #80]	@ (8003bc4 <I2C_ITError+0x1dc>)
 8003b72:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fd feff 	bl	8001984 <HAL_DMA_Abort_IT>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d011      	beq.n	8003bb0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b96:	4610      	mov	r0, r2
 8003b98:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b9a:	e009      	b.n	8003bb0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f813 	bl	8003bc8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ba2:	e005      	b.n	8003bb0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f80f 	bl	8003bc8 <I2C_TreatErrorCallback>
  }
}
 8003baa:	e002      	b.n	8003bb2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003bac:	bf00      	nop
 8003bae:	e000      	b.n	8003bb2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bb0:	bf00      	nop
}
 8003bb2:	bf00      	nop
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	ffff0000 	.word	0xffff0000
 8003bc0:	080030e7 	.word	0x080030e7
 8003bc4:	08003c5f 	.word	0x08003c5f

08003bc8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b60      	cmp	r3, #96	@ 0x60
 8003bda:	d10e      	bne.n	8003bfa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff fa6d 	bl	80030d2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003bf8:	e009      	b.n	8003c0e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7ff fa58 	bl	80030be <HAL_I2C_ErrorCallback>
}
 8003c0e:	bf00      	nop
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d103      	bne.n	8003c34 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2200      	movs	r2, #0
 8003c32:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d007      	beq.n	8003c52 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	699a      	ldr	r2, [r3, #24]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 0201 	orr.w	r2, r2, #1
 8003c50:	619a      	str	r2, [r3, #24]
  }
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b084      	sub	sp, #16
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c78:	2200      	movs	r2, #0
 8003c7a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c88:	2200      	movs	r2, #0
 8003c8a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f7ff ff9b 	bl	8003bc8 <I2C_TreatErrorCallback>
}
 8003c92:	bf00      	nop
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b084      	sub	sp, #16
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	60b9      	str	r1, [r7, #8]
 8003ca4:	603b      	str	r3, [r7, #0]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003caa:	e03b      	b.n	8003d24 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	6839      	ldr	r1, [r7, #0]
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 f961 	bl	8003f78 <I2C_IsErrorOccurred>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e041      	b.n	8003d44 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc6:	d02d      	beq.n	8003d24 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc8:	f7fd fcfc 	bl	80016c4 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d302      	bcc.n	8003cde <I2C_WaitOnFlagUntilTimeout+0x44>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d122      	bne.n	8003d24 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699a      	ldr	r2, [r3, #24]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	bf0c      	ite	eq
 8003cee:	2301      	moveq	r3, #1
 8003cf0:	2300      	movne	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	79fb      	ldrb	r3, [r7, #7]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d113      	bne.n	8003d24 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d00:	f043 0220 	orr.w	r2, r3, #32
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e00f      	b.n	8003d44 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699a      	ldr	r2, [r3, #24]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	bf0c      	ite	eq
 8003d34:	2301      	moveq	r3, #1
 8003d36:	2300      	movne	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	79fb      	ldrb	r3, [r7, #7]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d0b4      	beq.n	8003cac <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d58:	e033      	b.n	8003dc2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	68b9      	ldr	r1, [r7, #8]
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 f90a 	bl	8003f78 <I2C_IsErrorOccurred>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e031      	b.n	8003dd2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d74:	d025      	beq.n	8003dc2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d76:	f7fd fca5 	bl	80016c4 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d302      	bcc.n	8003d8c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d11a      	bne.n	8003dc2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d013      	beq.n	8003dc2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9e:	f043 0220 	orr.w	r2, r3, #32
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e007      	b.n	8003dd2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d1c4      	bne.n	8003d5a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b084      	sub	sp, #16
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	60f8      	str	r0, [r7, #12]
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003de6:	e02f      	b.n	8003e48 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	68b9      	ldr	r1, [r7, #8]
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 f8c3 	bl	8003f78 <I2C_IsErrorOccurred>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e02d      	b.n	8003e58 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dfc:	f7fd fc62 	bl	80016c4 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d302      	bcc.n	8003e12 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d11a      	bne.n	8003e48 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	f003 0320 	and.w	r3, r3, #32
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	d013      	beq.n	8003e48 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e24:	f043 0220 	orr.w	r2, r3, #32
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e007      	b.n	8003e58 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	f003 0320 	and.w	r3, r3, #32
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	d1c8      	bne.n	8003de8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003e70:	e071      	b.n	8003f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 f87e 	bl	8003f78 <I2C_IsErrorOccurred>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	d13b      	bne.n	8003f0c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003e94:	7dfb      	ldrb	r3, [r7, #23]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d138      	bne.n	8003f0c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	d105      	bne.n	8003eb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	f003 0310 	and.w	r3, r3, #16
 8003ebe:	2b10      	cmp	r3, #16
 8003ec0:	d121      	bne.n	8003f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2210      	movs	r2, #16
 8003ec8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2204      	movs	r2, #4
 8003ece:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6859      	ldr	r1, [r3, #4]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	4b24      	ldr	r3, [pc, #144]	@ (8003f74 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003ee4:	400b      	ands	r3, r1
 8003ee6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	75fb      	strb	r3, [r7, #23]
 8003f04:	e002      	b.n	8003f0c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003f0c:	f7fd fbda 	bl	80016c4 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d302      	bcc.n	8003f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d119      	bne.n	8003f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003f22:	7dfb      	ldrb	r3, [r7, #23]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d116      	bne.n	8003f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	f003 0304 	and.w	r3, r3, #4
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d00f      	beq.n	8003f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3a:	f043 0220 	orr.w	r2, r3, #32
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b04      	cmp	r3, #4
 8003f62:	d002      	beq.n	8003f6a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003f64:	7dfb      	ldrb	r3, [r7, #23]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d083      	beq.n	8003e72 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	fe00e800 	.word	0xfe00e800

08003f78 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08a      	sub	sp, #40	@ 0x28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f84:	2300      	movs	r3, #0
 8003f86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003f92:	2300      	movs	r3, #0
 8003f94:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	f003 0310 	and.w	r3, r3, #16
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d068      	beq.n	8004076 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2210      	movs	r2, #16
 8003faa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003fac:	e049      	b.n	8004042 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb4:	d045      	beq.n	8004042 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fb6:	f7fd fb85 	bl	80016c4 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d302      	bcc.n	8003fcc <I2C_IsErrorOccurred+0x54>
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d13a      	bne.n	8004042 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fd6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003fde:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fee:	d121      	bne.n	8004034 <I2C_IsErrorOccurred+0xbc>
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ff6:	d01d      	beq.n	8004034 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003ff8:	7cfb      	ldrb	r3, [r7, #19]
 8003ffa:	2b20      	cmp	r3, #32
 8003ffc:	d01a      	beq.n	8004034 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800400c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800400e:	f7fd fb59 	bl	80016c4 <HAL_GetTick>
 8004012:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004014:	e00e      	b.n	8004034 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004016:	f7fd fb55 	bl	80016c4 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b19      	cmp	r3, #25
 8004022:	d907      	bls.n	8004034 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	f043 0320 	orr.w	r3, r3, #32
 800402a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004032:	e006      	b.n	8004042 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	f003 0320 	and.w	r3, r3, #32
 800403e:	2b20      	cmp	r3, #32
 8004040:	d1e9      	bne.n	8004016 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	2b20      	cmp	r3, #32
 800404e:	d003      	beq.n	8004058 <I2C_IsErrorOccurred+0xe0>
 8004050:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0aa      	beq.n	8003fae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004058:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800405c:	2b00      	cmp	r3, #0
 800405e:	d103      	bne.n	8004068 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2220      	movs	r2, #32
 8004066:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	f043 0304 	orr.w	r3, r3, #4
 800406e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00b      	beq.n	80040a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	f043 0301 	orr.w	r3, r3, #1
 800408e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004098:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00b      	beq.n	80040c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	f043 0308 	orr.w	r3, r3, #8
 80040b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80040ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00b      	beq.n	80040e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	f043 0302 	orr.w	r3, r3, #2
 80040d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80040e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d01c      	beq.n	8004126 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f7ff fd92 	bl	8003c16 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6859      	ldr	r1, [r3, #4]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	4b0d      	ldr	r3, [pc, #52]	@ (8004134 <I2C_IsErrorOccurred+0x1bc>)
 80040fe:	400b      	ands	r3, r1
 8004100:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	431a      	orrs	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2220      	movs	r2, #32
 8004112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004126:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800412a:	4618      	mov	r0, r3
 800412c:	3728      	adds	r7, #40	@ 0x28
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	fe00e800 	.word	0xfe00e800

08004138 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	607b      	str	r3, [r7, #4]
 8004142:	460b      	mov	r3, r1
 8004144:	817b      	strh	r3, [r7, #10]
 8004146:	4613      	mov	r3, r2
 8004148:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800414a:	897b      	ldrh	r3, [r7, #10]
 800414c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004150:	7a7b      	ldrb	r3, [r7, #9]
 8004152:	041b      	lsls	r3, r3, #16
 8004154:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004158:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	4313      	orrs	r3, r2
 8004162:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004166:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	0d5b      	lsrs	r3, r3, #21
 8004172:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004176:	4b08      	ldr	r3, [pc, #32]	@ (8004198 <I2C_TransferConfig+0x60>)
 8004178:	430b      	orrs	r3, r1
 800417a:	43db      	mvns	r3, r3
 800417c:	ea02 0103 	and.w	r1, r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	430a      	orrs	r2, r1
 8004188:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800418a:	bf00      	nop
 800418c:	371c      	adds	r7, #28
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	03ff63ff 	.word	0x03ff63ff

0800419c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80041ac:	887b      	ldrh	r3, [r7, #2]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00f      	beq.n	80041d6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80041bc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80041ca:	2b28      	cmp	r3, #40	@ 0x28
 80041cc:	d003      	beq.n	80041d6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80041d4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80041d6:	887b      	ldrh	r3, [r7, #2]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00f      	beq.n	8004200 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80041e6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80041f4:	2b28      	cmp	r3, #40	@ 0x28
 80041f6:	d003      	beq.n	8004200 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80041fe:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004200:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004204:	2b00      	cmp	r3, #0
 8004206:	da03      	bge.n	8004210 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800420e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004210:	887b      	ldrh	r3, [r7, #2]
 8004212:	2b10      	cmp	r3, #16
 8004214:	d103      	bne.n	800421e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800421c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800421e:	887b      	ldrh	r3, [r7, #2]
 8004220:	2b20      	cmp	r3, #32
 8004222:	d103      	bne.n	800422c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f043 0320 	orr.w	r3, r3, #32
 800422a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800422c:	887b      	ldrh	r3, [r7, #2]
 800422e:	2b40      	cmp	r3, #64	@ 0x40
 8004230:	d103      	bne.n	800423a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004238:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6819      	ldr	r1, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	43da      	mvns	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	400a      	ands	r2, r1
 800424a:	601a      	str	r2, [r3, #0]
}
 800424c:	bf00      	nop
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b20      	cmp	r3, #32
 800426c:	d138      	bne.n	80042e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004278:	2302      	movs	r3, #2
 800427a:	e032      	b.n	80042e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2224      	movs	r2, #36	@ 0x24
 8004288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0201 	bic.w	r2, r2, #1
 800429a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80042aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6819      	ldr	r1, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0201 	orr.w	r2, r2, #1
 80042ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80042dc:	2300      	movs	r3, #0
 80042de:	e000      	b.n	80042e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042e0:	2302      	movs	r3, #2
  }
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b085      	sub	sp, #20
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b20      	cmp	r3, #32
 8004302:	d139      	bne.n	8004378 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800430a:	2b01      	cmp	r3, #1
 800430c:	d101      	bne.n	8004312 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800430e:	2302      	movs	r3, #2
 8004310:	e033      	b.n	800437a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2224      	movs	r2, #36	@ 0x24
 800431e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0201 	bic.w	r2, r2, #1
 8004330:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004340:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	021b      	lsls	r3, r3, #8
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4313      	orrs	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0201 	orr.w	r2, r2, #1
 8004362:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004374:	2300      	movs	r3, #0
 8004376:	e000      	b.n	800437a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004378:	2302      	movs	r3, #2
  }
}
 800437a:	4618      	mov	r0, r3
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b086      	sub	sp, #24
 800438a:	af02      	add	r7, sp, #8
 800438c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e0fe      	b.n	8004596 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d106      	bne.n	80043b2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7fc ff5b 	bl	8001268 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2203      	movs	r2, #3
 80043b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4618      	mov	r0, r3
 80043c0:	f005 fa20 	bl	8009804 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6818      	ldr	r0, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	7c1a      	ldrb	r2, [r3, #16]
 80043cc:	f88d 2000 	strb.w	r2, [sp]
 80043d0:	3304      	adds	r3, #4
 80043d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043d4:	f005 f9a4 	bl	8009720 <USB_CoreInit>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d005      	beq.n	80043ea <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2202      	movs	r2, #2
 80043e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e0d5      	b.n	8004596 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2100      	movs	r1, #0
 80043f0:	4618      	mov	r0, r3
 80043f2:	f005 fa18 	bl	8009826 <USB_SetCurrentMode>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e0c6      	b.n	8004596 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004408:	2300      	movs	r3, #0
 800440a:	73fb      	strb	r3, [r7, #15]
 800440c:	e04a      	b.n	80044a4 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800440e:	7bfa      	ldrb	r2, [r7, #15]
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	4613      	mov	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	4413      	add	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	440b      	add	r3, r1
 800441c:	3315      	adds	r3, #21
 800441e:	2201      	movs	r2, #1
 8004420:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004422:	7bfa      	ldrb	r2, [r7, #15]
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	440b      	add	r3, r1
 8004430:	3314      	adds	r3, #20
 8004432:	7bfa      	ldrb	r2, [r7, #15]
 8004434:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004436:	7bfa      	ldrb	r2, [r7, #15]
 8004438:	7bfb      	ldrb	r3, [r7, #15]
 800443a:	b298      	uxth	r0, r3
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	4613      	mov	r3, r2
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	4413      	add	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	440b      	add	r3, r1
 8004448:	332e      	adds	r3, #46	@ 0x2e
 800444a:	4602      	mov	r2, r0
 800444c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800444e:	7bfa      	ldrb	r2, [r7, #15]
 8004450:	6879      	ldr	r1, [r7, #4]
 8004452:	4613      	mov	r3, r2
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	440b      	add	r3, r1
 800445c:	3318      	adds	r3, #24
 800445e:	2200      	movs	r2, #0
 8004460:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004462:	7bfa      	ldrb	r2, [r7, #15]
 8004464:	6879      	ldr	r1, [r7, #4]
 8004466:	4613      	mov	r3, r2
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	4413      	add	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	440b      	add	r3, r1
 8004470:	331c      	adds	r3, #28
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004476:	7bfa      	ldrb	r2, [r7, #15]
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	4613      	mov	r3, r2
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	440b      	add	r3, r1
 8004484:	3320      	adds	r3, #32
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800448a:	7bfa      	ldrb	r2, [r7, #15]
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	4413      	add	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	440b      	add	r3, r1
 8004498:	3324      	adds	r3, #36	@ 0x24
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800449e:	7bfb      	ldrb	r3, [r7, #15]
 80044a0:	3301      	adds	r3, #1
 80044a2:	73fb      	strb	r3, [r7, #15]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	791b      	ldrb	r3, [r3, #4]
 80044a8:	7bfa      	ldrb	r2, [r7, #15]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d3af      	bcc.n	800440e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044ae:	2300      	movs	r3, #0
 80044b0:	73fb      	strb	r3, [r7, #15]
 80044b2:	e044      	b.n	800453e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80044b4:	7bfa      	ldrb	r2, [r7, #15]
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	4613      	mov	r3, r2
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	4413      	add	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80044c6:	2200      	movs	r2, #0
 80044c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80044ca:	7bfa      	ldrb	r2, [r7, #15]
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	4613      	mov	r3, r2
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	4413      	add	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80044dc:	7bfa      	ldrb	r2, [r7, #15]
 80044de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80044e0:	7bfa      	ldrb	r2, [r7, #15]
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	4613      	mov	r3, r2
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	4413      	add	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80044f2:	2200      	movs	r2, #0
 80044f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80044f6:	7bfa      	ldrb	r2, [r7, #15]
 80044f8:	6879      	ldr	r1, [r7, #4]
 80044fa:	4613      	mov	r3, r2
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	440b      	add	r3, r1
 8004504:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800450c:	7bfa      	ldrb	r2, [r7, #15]
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	4613      	mov	r3, r2
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	4413      	add	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004522:	7bfa      	ldrb	r2, [r7, #15]
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	4613      	mov	r3, r2
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	4413      	add	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	440b      	add	r3, r1
 8004530:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004538:	7bfb      	ldrb	r3, [r7, #15]
 800453a:	3301      	adds	r3, #1
 800453c:	73fb      	strb	r3, [r7, #15]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	791b      	ldrb	r3, [r3, #4]
 8004542:	7bfa      	ldrb	r2, [r7, #15]
 8004544:	429a      	cmp	r2, r3
 8004546:	d3b5      	bcc.n	80044b4 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6818      	ldr	r0, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	7c1a      	ldrb	r2, [r3, #16]
 8004550:	f88d 2000 	strb.w	r2, [sp]
 8004554:	3304      	adds	r3, #4
 8004556:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004558:	f005 f9b2 	bl	80098c0 <USB_DevInit>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d005      	beq.n	800456e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2202      	movs	r2, #2
 8004566:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e013      	b.n	8004596 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	7b1b      	ldrb	r3, [r3, #12]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d102      	bne.n	800458a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f80b 	bl	80045a0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f005 fb6d 	bl	8009c6e <USB_DevDisconnect>

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
	...

080045a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80045ce:	4b05      	ldr	r3, [pc, #20]	@ (80045e4 <HAL_PCDEx_ActivateLPM+0x44>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	10000003 	.word	0x10000003

080045e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80045f0:	4b19      	ldr	r3, [pc, #100]	@ (8004658 <HAL_PWREx_ConfigSupply+0x70>)
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d00a      	beq.n	8004612 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80045fc:	4b16      	ldr	r3, [pc, #88]	@ (8004658 <HAL_PWREx_ConfigSupply+0x70>)
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	429a      	cmp	r2, r3
 8004608:	d001      	beq.n	800460e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e01f      	b.n	800464e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800460e:	2300      	movs	r3, #0
 8004610:	e01d      	b.n	800464e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004612:	4b11      	ldr	r3, [pc, #68]	@ (8004658 <HAL_PWREx_ConfigSupply+0x70>)
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f023 0207 	bic.w	r2, r3, #7
 800461a:	490f      	ldr	r1, [pc, #60]	@ (8004658 <HAL_PWREx_ConfigSupply+0x70>)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4313      	orrs	r3, r2
 8004620:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004622:	f7fd f84f 	bl	80016c4 <HAL_GetTick>
 8004626:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004628:	e009      	b.n	800463e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800462a:	f7fd f84b 	bl	80016c4 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004638:	d901      	bls.n	800463e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e007      	b.n	800464e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800463e:	4b06      	ldr	r3, [pc, #24]	@ (8004658 <HAL_PWREx_ConfigSupply+0x70>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004646:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800464a:	d1ee      	bne.n	800462a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	58024800 	.word	0x58024800

0800465c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004660:	4b05      	ldr	r3, [pc, #20]	@ (8004678 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	4a04      	ldr	r2, [pc, #16]	@ (8004678 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004666:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800466a:	60d3      	str	r3, [r2, #12]
}
 800466c:	bf00      	nop
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	58024800 	.word	0x58024800

0800467c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08c      	sub	sp, #48	@ 0x30
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d102      	bne.n	8004690 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	f000 bc48 	b.w	8004f20 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 8088 	beq.w	80047ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800469e:	4b99      	ldr	r3, [pc, #612]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046a8:	4b96      	ldr	r3, [pc, #600]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 80046aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80046ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b0:	2b10      	cmp	r3, #16
 80046b2:	d007      	beq.n	80046c4 <HAL_RCC_OscConfig+0x48>
 80046b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b6:	2b18      	cmp	r3, #24
 80046b8:	d111      	bne.n	80046de <HAL_RCC_OscConfig+0x62>
 80046ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046bc:	f003 0303 	and.w	r3, r3, #3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d10c      	bne.n	80046de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046c4:	4b8f      	ldr	r3, [pc, #572]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d06d      	beq.n	80047ac <HAL_RCC_OscConfig+0x130>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d169      	bne.n	80047ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	f000 bc21 	b.w	8004f20 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046e6:	d106      	bne.n	80046f6 <HAL_RCC_OscConfig+0x7a>
 80046e8:	4b86      	ldr	r3, [pc, #536]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a85      	ldr	r2, [pc, #532]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 80046ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	e02e      	b.n	8004754 <HAL_RCC_OscConfig+0xd8>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10c      	bne.n	8004718 <HAL_RCC_OscConfig+0x9c>
 80046fe:	4b81      	ldr	r3, [pc, #516]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a80      	ldr	r2, [pc, #512]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 8004704:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	4b7e      	ldr	r3, [pc, #504]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a7d      	ldr	r2, [pc, #500]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 8004710:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	e01d      	b.n	8004754 <HAL_RCC_OscConfig+0xd8>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004720:	d10c      	bne.n	800473c <HAL_RCC_OscConfig+0xc0>
 8004722:	4b78      	ldr	r3, [pc, #480]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a77      	ldr	r2, [pc, #476]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 8004728:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	4b75      	ldr	r3, [pc, #468]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a74      	ldr	r2, [pc, #464]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 8004734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	e00b      	b.n	8004754 <HAL_RCC_OscConfig+0xd8>
 800473c:	4b71      	ldr	r3, [pc, #452]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a70      	ldr	r2, [pc, #448]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 8004742:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	4b6e      	ldr	r3, [pc, #440]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a6d      	ldr	r2, [pc, #436]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 800474e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d013      	beq.n	8004784 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475c:	f7fc ffb2 	bl	80016c4 <HAL_GetTick>
 8004760:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004764:	f7fc ffae 	bl	80016c4 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b64      	cmp	r3, #100	@ 0x64
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e3d4      	b.n	8004f20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004776:	4b63      	ldr	r3, [pc, #396]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0xe8>
 8004782:	e014      	b.n	80047ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004784:	f7fc ff9e 	bl	80016c4 <HAL_GetTick>
 8004788:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800478c:	f7fc ff9a 	bl	80016c4 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b64      	cmp	r3, #100	@ 0x64
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e3c0      	b.n	8004f20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800479e:	4b59      	ldr	r3, [pc, #356]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0x110>
 80047aa:	e000      	b.n	80047ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80ca 	beq.w	8004950 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047bc:	4b51      	ldr	r3, [pc, #324]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047c6:	4b4f      	ldr	r3, [pc, #316]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 80047c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d007      	beq.n	80047e2 <HAL_RCC_OscConfig+0x166>
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	2b18      	cmp	r3, #24
 80047d6:	d156      	bne.n	8004886 <HAL_RCC_OscConfig+0x20a>
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d151      	bne.n	8004886 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047e2:	4b48      	ldr	r3, [pc, #288]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0304 	and.w	r3, r3, #4
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d005      	beq.n	80047fa <HAL_RCC_OscConfig+0x17e>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e392      	b.n	8004f20 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80047fa:	4b42      	ldr	r3, [pc, #264]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f023 0219 	bic.w	r2, r3, #25
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	493f      	ldr	r1, [pc, #252]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 8004808:	4313      	orrs	r3, r2
 800480a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480c:	f7fc ff5a 	bl	80016c4 <HAL_GetTick>
 8004810:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004814:	f7fc ff56 	bl	80016c4 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e37c      	b.n	8004f20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004826:	4b37      	ldr	r3, [pc, #220]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0304 	and.w	r3, r3, #4
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f0      	beq.n	8004814 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004832:	f7fc ff77 	bl	8001724 <HAL_GetREVID>
 8004836:	4603      	mov	r3, r0
 8004838:	f241 0203 	movw	r2, #4099	@ 0x1003
 800483c:	4293      	cmp	r3, r2
 800483e:	d817      	bhi.n	8004870 <HAL_RCC_OscConfig+0x1f4>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	2b40      	cmp	r3, #64	@ 0x40
 8004846:	d108      	bne.n	800485a <HAL_RCC_OscConfig+0x1de>
 8004848:	4b2e      	ldr	r3, [pc, #184]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004850:	4a2c      	ldr	r2, [pc, #176]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 8004852:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004856:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004858:	e07a      	b.n	8004950 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800485a:	4b2a      	ldr	r3, [pc, #168]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	031b      	lsls	r3, r3, #12
 8004868:	4926      	ldr	r1, [pc, #152]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 800486a:	4313      	orrs	r3, r2
 800486c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800486e:	e06f      	b.n	8004950 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004870:	4b24      	ldr	r3, [pc, #144]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	061b      	lsls	r3, r3, #24
 800487e:	4921      	ldr	r1, [pc, #132]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 8004880:	4313      	orrs	r3, r2
 8004882:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004884:	e064      	b.n	8004950 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d047      	beq.n	800491e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800488e:	4b1d      	ldr	r3, [pc, #116]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f023 0219 	bic.w	r2, r3, #25
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	491a      	ldr	r1, [pc, #104]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 800489c:	4313      	orrs	r3, r2
 800489e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a0:	f7fc ff10 	bl	80016c4 <HAL_GetTick>
 80048a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048a8:	f7fc ff0c 	bl	80016c4 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e332      	b.n	8004f20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048ba:	4b12      	ldr	r3, [pc, #72]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0304 	and.w	r3, r3, #4
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0f0      	beq.n	80048a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c6:	f7fc ff2d 	bl	8001724 <HAL_GetREVID>
 80048ca:	4603      	mov	r3, r0
 80048cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d819      	bhi.n	8004908 <HAL_RCC_OscConfig+0x28c>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	2b40      	cmp	r3, #64	@ 0x40
 80048da:	d108      	bne.n	80048ee <HAL_RCC_OscConfig+0x272>
 80048dc:	4b09      	ldr	r3, [pc, #36]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80048e4:	4a07      	ldr	r2, [pc, #28]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 80048e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048ea:	6053      	str	r3, [r2, #4]
 80048ec:	e030      	b.n	8004950 <HAL_RCC_OscConfig+0x2d4>
 80048ee:	4b05      	ldr	r3, [pc, #20]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	031b      	lsls	r3, r3, #12
 80048fc:	4901      	ldr	r1, [pc, #4]	@ (8004904 <HAL_RCC_OscConfig+0x288>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	604b      	str	r3, [r1, #4]
 8004902:	e025      	b.n	8004950 <HAL_RCC_OscConfig+0x2d4>
 8004904:	58024400 	.word	0x58024400
 8004908:	4b9a      	ldr	r3, [pc, #616]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	061b      	lsls	r3, r3, #24
 8004916:	4997      	ldr	r1, [pc, #604]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 8004918:	4313      	orrs	r3, r2
 800491a:	604b      	str	r3, [r1, #4]
 800491c:	e018      	b.n	8004950 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800491e:	4b95      	ldr	r3, [pc, #596]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a94      	ldr	r2, [pc, #592]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 8004924:	f023 0301 	bic.w	r3, r3, #1
 8004928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492a:	f7fc fecb 	bl	80016c4 <HAL_GetTick>
 800492e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004930:	e008      	b.n	8004944 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004932:	f7fc fec7 	bl	80016c4 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e2ed      	b.n	8004f20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004944:	4b8b      	ldr	r3, [pc, #556]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1f0      	bne.n	8004932 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 80a9 	beq.w	8004ab0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800495e:	4b85      	ldr	r3, [pc, #532]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004966:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004968:	4b82      	ldr	r3, [pc, #520]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 800496a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	2b08      	cmp	r3, #8
 8004972:	d007      	beq.n	8004984 <HAL_RCC_OscConfig+0x308>
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	2b18      	cmp	r3, #24
 8004978:	d13a      	bne.n	80049f0 <HAL_RCC_OscConfig+0x374>
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f003 0303 	and.w	r3, r3, #3
 8004980:	2b01      	cmp	r3, #1
 8004982:	d135      	bne.n	80049f0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004984:	4b7b      	ldr	r3, [pc, #492]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800498c:	2b00      	cmp	r3, #0
 800498e:	d005      	beq.n	800499c <HAL_RCC_OscConfig+0x320>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	2b80      	cmp	r3, #128	@ 0x80
 8004996:	d001      	beq.n	800499c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e2c1      	b.n	8004f20 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800499c:	f7fc fec2 	bl	8001724 <HAL_GetREVID>
 80049a0:	4603      	mov	r3, r0
 80049a2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d817      	bhi.n	80049da <HAL_RCC_OscConfig+0x35e>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	2b20      	cmp	r3, #32
 80049b0:	d108      	bne.n	80049c4 <HAL_RCC_OscConfig+0x348>
 80049b2:	4b70      	ldr	r3, [pc, #448]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80049ba:	4a6e      	ldr	r2, [pc, #440]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 80049bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80049c0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049c2:	e075      	b.n	8004ab0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049c4:	4b6b      	ldr	r3, [pc, #428]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	069b      	lsls	r3, r3, #26
 80049d2:	4968      	ldr	r1, [pc, #416]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049d8:	e06a      	b.n	8004ab0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049da:	4b66      	ldr	r3, [pc, #408]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	061b      	lsls	r3, r3, #24
 80049e8:	4962      	ldr	r1, [pc, #392]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049ee:	e05f      	b.n	8004ab0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d042      	beq.n	8004a7e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80049f8:	4b5e      	ldr	r3, [pc, #376]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a5d      	ldr	r2, [pc, #372]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 80049fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a04:	f7fc fe5e 	bl	80016c4 <HAL_GetTick>
 8004a08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004a0c:	f7fc fe5a 	bl	80016c4 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e280      	b.n	8004f20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a1e:	4b55      	ldr	r3, [pc, #340]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0f0      	beq.n	8004a0c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a2a:	f7fc fe7b 	bl	8001724 <HAL_GetREVID>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d817      	bhi.n	8004a68 <HAL_RCC_OscConfig+0x3ec>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	2b20      	cmp	r3, #32
 8004a3e:	d108      	bne.n	8004a52 <HAL_RCC_OscConfig+0x3d6>
 8004a40:	4b4c      	ldr	r3, [pc, #304]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004a48:	4a4a      	ldr	r2, [pc, #296]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 8004a4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a4e:	6053      	str	r3, [r2, #4]
 8004a50:	e02e      	b.n	8004ab0 <HAL_RCC_OscConfig+0x434>
 8004a52:	4b48      	ldr	r3, [pc, #288]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	069b      	lsls	r3, r3, #26
 8004a60:	4944      	ldr	r1, [pc, #272]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	604b      	str	r3, [r1, #4]
 8004a66:	e023      	b.n	8004ab0 <HAL_RCC_OscConfig+0x434>
 8004a68:	4b42      	ldr	r3, [pc, #264]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	061b      	lsls	r3, r3, #24
 8004a76:	493f      	ldr	r1, [pc, #252]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	60cb      	str	r3, [r1, #12]
 8004a7c:	e018      	b.n	8004ab0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a3c      	ldr	r2, [pc, #240]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 8004a84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8a:	f7fc fe1b 	bl	80016c4 <HAL_GetTick>
 8004a8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004a92:	f7fc fe17 	bl	80016c4 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e23d      	b.n	8004f20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004aa4:	4b33      	ldr	r3, [pc, #204]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1f0      	bne.n	8004a92 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d036      	beq.n	8004b2a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d019      	beq.n	8004af8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 8004ac6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ac8:	4a2a      	ldr	r2, [pc, #168]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 8004aca:	f043 0301 	orr.w	r3, r3, #1
 8004ace:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad0:	f7fc fdf8 	bl	80016c4 <HAL_GetTick>
 8004ad4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ad8:	f7fc fdf4 	bl	80016c4 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e21a      	b.n	8004f20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004aea:	4b22      	ldr	r3, [pc, #136]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 8004aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0f0      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x45c>
 8004af6:	e018      	b.n	8004b2a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004af8:	4b1e      	ldr	r3, [pc, #120]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 8004afa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004afc:	4a1d      	ldr	r2, [pc, #116]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 8004afe:	f023 0301 	bic.w	r3, r3, #1
 8004b02:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b04:	f7fc fdde 	bl	80016c4 <HAL_GetTick>
 8004b08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b0c:	f7fc fdda 	bl	80016c4 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e200      	b.n	8004f20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b1e:	4b15      	ldr	r3, [pc, #84]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 8004b20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f0      	bne.n	8004b0c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d039      	beq.n	8004baa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d01c      	beq.n	8004b78 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a0c      	ldr	r2, [pc, #48]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 8004b44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004b48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b4a:	f7fc fdbb 	bl	80016c4 <HAL_GetTick>
 8004b4e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b50:	e008      	b.n	8004b64 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b52:	f7fc fdb7 	bl	80016c4 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e1dd      	b.n	8004f20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b64:	4b03      	ldr	r3, [pc, #12]	@ (8004b74 <HAL_RCC_OscConfig+0x4f8>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0f0      	beq.n	8004b52 <HAL_RCC_OscConfig+0x4d6>
 8004b70:	e01b      	b.n	8004baa <HAL_RCC_OscConfig+0x52e>
 8004b72:	bf00      	nop
 8004b74:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b78:	4b9b      	ldr	r3, [pc, #620]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a9a      	ldr	r2, [pc, #616]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004b7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b84:	f7fc fd9e 	bl	80016c4 <HAL_GetTick>
 8004b88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b8c:	f7fc fd9a 	bl	80016c4 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e1c0      	b.n	8004f20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b9e:	4b92      	ldr	r3, [pc, #584]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1f0      	bne.n	8004b8c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0304 	and.w	r3, r3, #4
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 8081 	beq.w	8004cba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004bb8:	4b8c      	ldr	r3, [pc, #560]	@ (8004dec <HAL_RCC_OscConfig+0x770>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a8b      	ldr	r2, [pc, #556]	@ (8004dec <HAL_RCC_OscConfig+0x770>)
 8004bbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bc4:	f7fc fd7e 	bl	80016c4 <HAL_GetTick>
 8004bc8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bcc:	f7fc fd7a 	bl	80016c4 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b64      	cmp	r3, #100	@ 0x64
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e1a0      	b.n	8004f20 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bde:	4b83      	ldr	r3, [pc, #524]	@ (8004dec <HAL_RCC_OscConfig+0x770>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0f0      	beq.n	8004bcc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d106      	bne.n	8004c00 <HAL_RCC_OscConfig+0x584>
 8004bf2:	4b7d      	ldr	r3, [pc, #500]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf6:	4a7c      	ldr	r2, [pc, #496]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004bf8:	f043 0301 	orr.w	r3, r3, #1
 8004bfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bfe:	e02d      	b.n	8004c5c <HAL_RCC_OscConfig+0x5e0>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10c      	bne.n	8004c22 <HAL_RCC_OscConfig+0x5a6>
 8004c08:	4b77      	ldr	r3, [pc, #476]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004c0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c0c:	4a76      	ldr	r2, [pc, #472]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004c0e:	f023 0301 	bic.w	r3, r3, #1
 8004c12:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c14:	4b74      	ldr	r3, [pc, #464]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c18:	4a73      	ldr	r2, [pc, #460]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004c1a:	f023 0304 	bic.w	r3, r3, #4
 8004c1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c20:	e01c      	b.n	8004c5c <HAL_RCC_OscConfig+0x5e0>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	2b05      	cmp	r3, #5
 8004c28:	d10c      	bne.n	8004c44 <HAL_RCC_OscConfig+0x5c8>
 8004c2a:	4b6f      	ldr	r3, [pc, #444]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c2e:	4a6e      	ldr	r2, [pc, #440]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004c30:	f043 0304 	orr.w	r3, r3, #4
 8004c34:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c36:	4b6c      	ldr	r3, [pc, #432]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c3a:	4a6b      	ldr	r2, [pc, #428]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004c3c:	f043 0301 	orr.w	r3, r3, #1
 8004c40:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c42:	e00b      	b.n	8004c5c <HAL_RCC_OscConfig+0x5e0>
 8004c44:	4b68      	ldr	r3, [pc, #416]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c48:	4a67      	ldr	r2, [pc, #412]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004c4a:	f023 0301 	bic.w	r3, r3, #1
 8004c4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c50:	4b65      	ldr	r3, [pc, #404]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c54:	4a64      	ldr	r2, [pc, #400]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004c56:	f023 0304 	bic.w	r3, r3, #4
 8004c5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d015      	beq.n	8004c90 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c64:	f7fc fd2e 	bl	80016c4 <HAL_GetTick>
 8004c68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c6a:	e00a      	b.n	8004c82 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c6c:	f7fc fd2a 	bl	80016c4 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e14e      	b.n	8004f20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c82:	4b59      	ldr	r3, [pc, #356]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0ee      	beq.n	8004c6c <HAL_RCC_OscConfig+0x5f0>
 8004c8e:	e014      	b.n	8004cba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c90:	f7fc fd18 	bl	80016c4 <HAL_GetTick>
 8004c94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c96:	e00a      	b.n	8004cae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c98:	f7fc fd14 	bl	80016c4 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e138      	b.n	8004f20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004cae:	4b4e      	ldr	r3, [pc, #312]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1ee      	bne.n	8004c98 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 812d 	beq.w	8004f1e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004cc4:	4b48      	ldr	r3, [pc, #288]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ccc:	2b18      	cmp	r3, #24
 8004cce:	f000 80bd 	beq.w	8004e4c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	f040 809e 	bne.w	8004e18 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cdc:	4b42      	ldr	r3, [pc, #264]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a41      	ldr	r2, [pc, #260]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004ce2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce8:	f7fc fcec 	bl	80016c4 <HAL_GetTick>
 8004cec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf0:	f7fc fce8 	bl	80016c4 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e10e      	b.n	8004f20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d02:	4b39      	ldr	r3, [pc, #228]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1f0      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d0e:	4b36      	ldr	r3, [pc, #216]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004d10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d12:	4b37      	ldr	r3, [pc, #220]	@ (8004df0 <HAL_RCC_OscConfig+0x774>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004d1e:	0112      	lsls	r2, r2, #4
 8004d20:	430a      	orrs	r2, r1
 8004d22:	4931      	ldr	r1, [pc, #196]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d36:	3b01      	subs	r3, #1
 8004d38:	025b      	lsls	r3, r3, #9
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d42:	3b01      	subs	r3, #1
 8004d44:	041b      	lsls	r3, r3, #16
 8004d46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d50:	3b01      	subs	r3, #1
 8004d52:	061b      	lsls	r3, r3, #24
 8004d54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d58:	4923      	ldr	r1, [pc, #140]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004d5e:	4b22      	ldr	r3, [pc, #136]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d62:	4a21      	ldr	r2, [pc, #132]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004d64:	f023 0301 	bic.w	r3, r3, #1
 8004d68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d6a:	4b1f      	ldr	r3, [pc, #124]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004d6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d6e:	4b21      	ldr	r3, [pc, #132]	@ (8004df4 <HAL_RCC_OscConfig+0x778>)
 8004d70:	4013      	ands	r3, r2
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d76:	00d2      	lsls	r2, r2, #3
 8004d78:	491b      	ldr	r1, [pc, #108]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d82:	f023 020c 	bic.w	r2, r3, #12
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8a:	4917      	ldr	r1, [pc, #92]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004d90:	4b15      	ldr	r3, [pc, #84]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d94:	f023 0202 	bic.w	r2, r3, #2
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9c:	4912      	ldr	r1, [pc, #72]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004da2:	4b11      	ldr	r3, [pc, #68]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da6:	4a10      	ldr	r2, [pc, #64]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dae:	4b0e      	ldr	r3, [pc, #56]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db2:	4a0d      	ldr	r2, [pc, #52]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004db4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004db8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004dba:	4b0b      	ldr	r3, [pc, #44]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004dc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004dc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004dc6:	4b08      	ldr	r3, [pc, #32]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dca:	4a07      	ldr	r2, [pc, #28]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004dcc:	f043 0301 	orr.w	r3, r3, #1
 8004dd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dd2:	4b05      	ldr	r3, [pc, #20]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a04      	ldr	r2, [pc, #16]	@ (8004de8 <HAL_RCC_OscConfig+0x76c>)
 8004dd8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dde:	f7fc fc71 	bl	80016c4 <HAL_GetTick>
 8004de2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004de4:	e011      	b.n	8004e0a <HAL_RCC_OscConfig+0x78e>
 8004de6:	bf00      	nop
 8004de8:	58024400 	.word	0x58024400
 8004dec:	58024800 	.word	0x58024800
 8004df0:	fffffc0c 	.word	0xfffffc0c
 8004df4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df8:	f7fc fc64 	bl	80016c4 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e08a      	b.n	8004f20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e0a:	4b47      	ldr	r3, [pc, #284]	@ (8004f28 <HAL_RCC_OscConfig+0x8ac>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0f0      	beq.n	8004df8 <HAL_RCC_OscConfig+0x77c>
 8004e16:	e082      	b.n	8004f1e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e18:	4b43      	ldr	r3, [pc, #268]	@ (8004f28 <HAL_RCC_OscConfig+0x8ac>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a42      	ldr	r2, [pc, #264]	@ (8004f28 <HAL_RCC_OscConfig+0x8ac>)
 8004e1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e24:	f7fc fc4e 	bl	80016c4 <HAL_GetTick>
 8004e28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e2c:	f7fc fc4a 	bl	80016c4 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e070      	b.n	8004f20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e3e:	4b3a      	ldr	r3, [pc, #232]	@ (8004f28 <HAL_RCC_OscConfig+0x8ac>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1f0      	bne.n	8004e2c <HAL_RCC_OscConfig+0x7b0>
 8004e4a:	e068      	b.n	8004f1e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004e4c:	4b36      	ldr	r3, [pc, #216]	@ (8004f28 <HAL_RCC_OscConfig+0x8ac>)
 8004e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e50:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004e52:	4b35      	ldr	r3, [pc, #212]	@ (8004f28 <HAL_RCC_OscConfig+0x8ac>)
 8004e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e56:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d031      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	f003 0203 	and.w	r2, r3, #3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d12a      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	091b      	lsrs	r3, r3, #4
 8004e72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d122      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e88:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d11a      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	0a5b      	lsrs	r3, r3, #9
 8004e92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e9a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d111      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	0c1b      	lsrs	r3, r3, #16
 8004ea4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d108      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	0e1b      	lsrs	r3, r3, #24
 8004eb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ebe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d001      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e02b      	b.n	8004f20 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004ec8:	4b17      	ldr	r3, [pc, #92]	@ (8004f28 <HAL_RCC_OscConfig+0x8ac>)
 8004eca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ecc:	08db      	lsrs	r3, r3, #3
 8004ece:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ed2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d01f      	beq.n	8004f1e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004ede:	4b12      	ldr	r3, [pc, #72]	@ (8004f28 <HAL_RCC_OscConfig+0x8ac>)
 8004ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee2:	4a11      	ldr	r2, [pc, #68]	@ (8004f28 <HAL_RCC_OscConfig+0x8ac>)
 8004ee4:	f023 0301 	bic.w	r3, r3, #1
 8004ee8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004eea:	f7fc fbeb 	bl	80016c4 <HAL_GetTick>
 8004eee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004ef0:	bf00      	nop
 8004ef2:	f7fc fbe7 	bl	80016c4 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d0f9      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004efe:	4b0a      	ldr	r3, [pc, #40]	@ (8004f28 <HAL_RCC_OscConfig+0x8ac>)
 8004f00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f02:	4b0a      	ldr	r3, [pc, #40]	@ (8004f2c <HAL_RCC_OscConfig+0x8b0>)
 8004f04:	4013      	ands	r3, r2
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004f0a:	00d2      	lsls	r2, r2, #3
 8004f0c:	4906      	ldr	r1, [pc, #24]	@ (8004f28 <HAL_RCC_OscConfig+0x8ac>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004f12:	4b05      	ldr	r3, [pc, #20]	@ (8004f28 <HAL_RCC_OscConfig+0x8ac>)
 8004f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f16:	4a04      	ldr	r2, [pc, #16]	@ (8004f28 <HAL_RCC_OscConfig+0x8ac>)
 8004f18:	f043 0301 	orr.w	r3, r3, #1
 8004f1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3730      	adds	r7, #48	@ 0x30
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	58024400 	.word	0x58024400
 8004f2c:	ffff0007 	.word	0xffff0007

08004f30 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e19c      	b.n	800527e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f44:	4b8a      	ldr	r3, [pc, #552]	@ (8005170 <HAL_RCC_ClockConfig+0x240>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 030f 	and.w	r3, r3, #15
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d910      	bls.n	8004f74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f52:	4b87      	ldr	r3, [pc, #540]	@ (8005170 <HAL_RCC_ClockConfig+0x240>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f023 020f 	bic.w	r2, r3, #15
 8004f5a:	4985      	ldr	r1, [pc, #532]	@ (8005170 <HAL_RCC_ClockConfig+0x240>)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f62:	4b83      	ldr	r3, [pc, #524]	@ (8005170 <HAL_RCC_ClockConfig+0x240>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 030f 	and.w	r3, r3, #15
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d001      	beq.n	8004f74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e184      	b.n	800527e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d010      	beq.n	8004fa2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691a      	ldr	r2, [r3, #16]
 8004f84:	4b7b      	ldr	r3, [pc, #492]	@ (8005174 <HAL_RCC_ClockConfig+0x244>)
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d908      	bls.n	8004fa2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f90:	4b78      	ldr	r3, [pc, #480]	@ (8005174 <HAL_RCC_ClockConfig+0x244>)
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	4975      	ldr	r1, [pc, #468]	@ (8005174 <HAL_RCC_ClockConfig+0x244>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0308 	and.w	r3, r3, #8
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d010      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695a      	ldr	r2, [r3, #20]
 8004fb2:	4b70      	ldr	r3, [pc, #448]	@ (8005174 <HAL_RCC_ClockConfig+0x244>)
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d908      	bls.n	8004fd0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004fbe:	4b6d      	ldr	r3, [pc, #436]	@ (8005174 <HAL_RCC_ClockConfig+0x244>)
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	496a      	ldr	r1, [pc, #424]	@ (8005174 <HAL_RCC_ClockConfig+0x244>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0310 	and.w	r3, r3, #16
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d010      	beq.n	8004ffe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	699a      	ldr	r2, [r3, #24]
 8004fe0:	4b64      	ldr	r3, [pc, #400]	@ (8005174 <HAL_RCC_ClockConfig+0x244>)
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d908      	bls.n	8004ffe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004fec:	4b61      	ldr	r3, [pc, #388]	@ (8005174 <HAL_RCC_ClockConfig+0x244>)
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	495e      	ldr	r1, [pc, #376]	@ (8005174 <HAL_RCC_ClockConfig+0x244>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0320 	and.w	r3, r3, #32
 8005006:	2b00      	cmp	r3, #0
 8005008:	d010      	beq.n	800502c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	69da      	ldr	r2, [r3, #28]
 800500e:	4b59      	ldr	r3, [pc, #356]	@ (8005174 <HAL_RCC_ClockConfig+0x244>)
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005016:	429a      	cmp	r2, r3
 8005018:	d908      	bls.n	800502c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800501a:	4b56      	ldr	r3, [pc, #344]	@ (8005174 <HAL_RCC_ClockConfig+0x244>)
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	4953      	ldr	r1, [pc, #332]	@ (8005174 <HAL_RCC_ClockConfig+0x244>)
 8005028:	4313      	orrs	r3, r2
 800502a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d010      	beq.n	800505a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	4b4d      	ldr	r3, [pc, #308]	@ (8005174 <HAL_RCC_ClockConfig+0x244>)
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	f003 030f 	and.w	r3, r3, #15
 8005044:	429a      	cmp	r2, r3
 8005046:	d908      	bls.n	800505a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005048:	4b4a      	ldr	r3, [pc, #296]	@ (8005174 <HAL_RCC_ClockConfig+0x244>)
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	f023 020f 	bic.w	r2, r3, #15
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	4947      	ldr	r1, [pc, #284]	@ (8005174 <HAL_RCC_ClockConfig+0x244>)
 8005056:	4313      	orrs	r3, r2
 8005058:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b00      	cmp	r3, #0
 8005064:	d055      	beq.n	8005112 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005066:	4b43      	ldr	r3, [pc, #268]	@ (8005174 <HAL_RCC_ClockConfig+0x244>)
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	4940      	ldr	r1, [pc, #256]	@ (8005174 <HAL_RCC_ClockConfig+0x244>)
 8005074:	4313      	orrs	r3, r2
 8005076:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	2b02      	cmp	r3, #2
 800507e:	d107      	bne.n	8005090 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005080:	4b3c      	ldr	r3, [pc, #240]	@ (8005174 <HAL_RCC_ClockConfig+0x244>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d121      	bne.n	80050d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e0f6      	b.n	800527e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	2b03      	cmp	r3, #3
 8005096:	d107      	bne.n	80050a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005098:	4b36      	ldr	r3, [pc, #216]	@ (8005174 <HAL_RCC_ClockConfig+0x244>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d115      	bne.n	80050d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e0ea      	b.n	800527e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d107      	bne.n	80050c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80050b0:	4b30      	ldr	r3, [pc, #192]	@ (8005174 <HAL_RCC_ClockConfig+0x244>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d109      	bne.n	80050d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e0de      	b.n	800527e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050c0:	4b2c      	ldr	r3, [pc, #176]	@ (8005174 <HAL_RCC_ClockConfig+0x244>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e0d6      	b.n	800527e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050d0:	4b28      	ldr	r3, [pc, #160]	@ (8005174 <HAL_RCC_ClockConfig+0x244>)
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	f023 0207 	bic.w	r2, r3, #7
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	4925      	ldr	r1, [pc, #148]	@ (8005174 <HAL_RCC_ClockConfig+0x244>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e2:	f7fc faef 	bl	80016c4 <HAL_GetTick>
 80050e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e8:	e00a      	b.n	8005100 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ea:	f7fc faeb 	bl	80016c4 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d901      	bls.n	8005100 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e0be      	b.n	800527e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005100:	4b1c      	ldr	r3, [pc, #112]	@ (8005174 <HAL_RCC_ClockConfig+0x244>)
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	429a      	cmp	r2, r3
 8005110:	d1eb      	bne.n	80050ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d010      	beq.n	8005140 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68da      	ldr	r2, [r3, #12]
 8005122:	4b14      	ldr	r3, [pc, #80]	@ (8005174 <HAL_RCC_ClockConfig+0x244>)
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	f003 030f 	and.w	r3, r3, #15
 800512a:	429a      	cmp	r2, r3
 800512c:	d208      	bcs.n	8005140 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800512e:	4b11      	ldr	r3, [pc, #68]	@ (8005174 <HAL_RCC_ClockConfig+0x244>)
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	f023 020f 	bic.w	r2, r3, #15
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	490e      	ldr	r1, [pc, #56]	@ (8005174 <HAL_RCC_ClockConfig+0x244>)
 800513c:	4313      	orrs	r3, r2
 800513e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005140:	4b0b      	ldr	r3, [pc, #44]	@ (8005170 <HAL_RCC_ClockConfig+0x240>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 030f 	and.w	r3, r3, #15
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d214      	bcs.n	8005178 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800514e:	4b08      	ldr	r3, [pc, #32]	@ (8005170 <HAL_RCC_ClockConfig+0x240>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f023 020f 	bic.w	r2, r3, #15
 8005156:	4906      	ldr	r1, [pc, #24]	@ (8005170 <HAL_RCC_ClockConfig+0x240>)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	4313      	orrs	r3, r2
 800515c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800515e:	4b04      	ldr	r3, [pc, #16]	@ (8005170 <HAL_RCC_ClockConfig+0x240>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	429a      	cmp	r2, r3
 800516a:	d005      	beq.n	8005178 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e086      	b.n	800527e <HAL_RCC_ClockConfig+0x34e>
 8005170:	52002000 	.word	0x52002000
 8005174:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0304 	and.w	r3, r3, #4
 8005180:	2b00      	cmp	r3, #0
 8005182:	d010      	beq.n	80051a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	691a      	ldr	r2, [r3, #16]
 8005188:	4b3f      	ldr	r3, [pc, #252]	@ (8005288 <HAL_RCC_ClockConfig+0x358>)
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005190:	429a      	cmp	r2, r3
 8005192:	d208      	bcs.n	80051a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005194:	4b3c      	ldr	r3, [pc, #240]	@ (8005288 <HAL_RCC_ClockConfig+0x358>)
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	4939      	ldr	r1, [pc, #228]	@ (8005288 <HAL_RCC_ClockConfig+0x358>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0308 	and.w	r3, r3, #8
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d010      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	695a      	ldr	r2, [r3, #20]
 80051b6:	4b34      	ldr	r3, [pc, #208]	@ (8005288 <HAL_RCC_ClockConfig+0x358>)
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051be:	429a      	cmp	r2, r3
 80051c0:	d208      	bcs.n	80051d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80051c2:	4b31      	ldr	r3, [pc, #196]	@ (8005288 <HAL_RCC_ClockConfig+0x358>)
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	492e      	ldr	r1, [pc, #184]	@ (8005288 <HAL_RCC_ClockConfig+0x358>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0310 	and.w	r3, r3, #16
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d010      	beq.n	8005202 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	699a      	ldr	r2, [r3, #24]
 80051e4:	4b28      	ldr	r3, [pc, #160]	@ (8005288 <HAL_RCC_ClockConfig+0x358>)
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d208      	bcs.n	8005202 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80051f0:	4b25      	ldr	r3, [pc, #148]	@ (8005288 <HAL_RCC_ClockConfig+0x358>)
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	4922      	ldr	r1, [pc, #136]	@ (8005288 <HAL_RCC_ClockConfig+0x358>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0320 	and.w	r3, r3, #32
 800520a:	2b00      	cmp	r3, #0
 800520c:	d010      	beq.n	8005230 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69da      	ldr	r2, [r3, #28]
 8005212:	4b1d      	ldr	r3, [pc, #116]	@ (8005288 <HAL_RCC_ClockConfig+0x358>)
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800521a:	429a      	cmp	r2, r3
 800521c:	d208      	bcs.n	8005230 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800521e:	4b1a      	ldr	r3, [pc, #104]	@ (8005288 <HAL_RCC_ClockConfig+0x358>)
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	4917      	ldr	r1, [pc, #92]	@ (8005288 <HAL_RCC_ClockConfig+0x358>)
 800522c:	4313      	orrs	r3, r2
 800522e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005230:	f000 f834 	bl	800529c <HAL_RCC_GetSysClockFreq>
 8005234:	4602      	mov	r2, r0
 8005236:	4b14      	ldr	r3, [pc, #80]	@ (8005288 <HAL_RCC_ClockConfig+0x358>)
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	0a1b      	lsrs	r3, r3, #8
 800523c:	f003 030f 	and.w	r3, r3, #15
 8005240:	4912      	ldr	r1, [pc, #72]	@ (800528c <HAL_RCC_ClockConfig+0x35c>)
 8005242:	5ccb      	ldrb	r3, [r1, r3]
 8005244:	f003 031f 	and.w	r3, r3, #31
 8005248:	fa22 f303 	lsr.w	r3, r2, r3
 800524c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800524e:	4b0e      	ldr	r3, [pc, #56]	@ (8005288 <HAL_RCC_ClockConfig+0x358>)
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	4a0d      	ldr	r2, [pc, #52]	@ (800528c <HAL_RCC_ClockConfig+0x35c>)
 8005258:	5cd3      	ldrb	r3, [r2, r3]
 800525a:	f003 031f 	and.w	r3, r3, #31
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	fa22 f303 	lsr.w	r3, r2, r3
 8005264:	4a0a      	ldr	r2, [pc, #40]	@ (8005290 <HAL_RCC_ClockConfig+0x360>)
 8005266:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005268:	4a0a      	ldr	r2, [pc, #40]	@ (8005294 <HAL_RCC_ClockConfig+0x364>)
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800526e:	4b0a      	ldr	r3, [pc, #40]	@ (8005298 <HAL_RCC_ClockConfig+0x368>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f7fc f9dc 	bl	8001630 <HAL_InitTick>
 8005278:	4603      	mov	r3, r0
 800527a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800527c:	7bfb      	ldrb	r3, [r7, #15]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	58024400 	.word	0x58024400
 800528c:	0800a73c 	.word	0x0800a73c
 8005290:	24000008 	.word	0x24000008
 8005294:	24000004 	.word	0x24000004
 8005298:	2400000c 	.word	0x2400000c

0800529c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800529c:	b480      	push	{r7}
 800529e:	b089      	sub	sp, #36	@ 0x24
 80052a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052a2:	4bb3      	ldr	r3, [pc, #716]	@ (8005570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052aa:	2b18      	cmp	r3, #24
 80052ac:	f200 8155 	bhi.w	800555a <HAL_RCC_GetSysClockFreq+0x2be>
 80052b0:	a201      	add	r2, pc, #4	@ (adr r2, 80052b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80052b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b6:	bf00      	nop
 80052b8:	0800531d 	.word	0x0800531d
 80052bc:	0800555b 	.word	0x0800555b
 80052c0:	0800555b 	.word	0x0800555b
 80052c4:	0800555b 	.word	0x0800555b
 80052c8:	0800555b 	.word	0x0800555b
 80052cc:	0800555b 	.word	0x0800555b
 80052d0:	0800555b 	.word	0x0800555b
 80052d4:	0800555b 	.word	0x0800555b
 80052d8:	08005343 	.word	0x08005343
 80052dc:	0800555b 	.word	0x0800555b
 80052e0:	0800555b 	.word	0x0800555b
 80052e4:	0800555b 	.word	0x0800555b
 80052e8:	0800555b 	.word	0x0800555b
 80052ec:	0800555b 	.word	0x0800555b
 80052f0:	0800555b 	.word	0x0800555b
 80052f4:	0800555b 	.word	0x0800555b
 80052f8:	08005349 	.word	0x08005349
 80052fc:	0800555b 	.word	0x0800555b
 8005300:	0800555b 	.word	0x0800555b
 8005304:	0800555b 	.word	0x0800555b
 8005308:	0800555b 	.word	0x0800555b
 800530c:	0800555b 	.word	0x0800555b
 8005310:	0800555b 	.word	0x0800555b
 8005314:	0800555b 	.word	0x0800555b
 8005318:	0800534f 	.word	0x0800534f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800531c:	4b94      	ldr	r3, [pc, #592]	@ (8005570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0320 	and.w	r3, r3, #32
 8005324:	2b00      	cmp	r3, #0
 8005326:	d009      	beq.n	800533c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005328:	4b91      	ldr	r3, [pc, #580]	@ (8005570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	08db      	lsrs	r3, r3, #3
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	4a90      	ldr	r2, [pc, #576]	@ (8005574 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005334:	fa22 f303 	lsr.w	r3, r2, r3
 8005338:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800533a:	e111      	b.n	8005560 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800533c:	4b8d      	ldr	r3, [pc, #564]	@ (8005574 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800533e:	61bb      	str	r3, [r7, #24]
      break;
 8005340:	e10e      	b.n	8005560 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005342:	4b8d      	ldr	r3, [pc, #564]	@ (8005578 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005344:	61bb      	str	r3, [r7, #24]
      break;
 8005346:	e10b      	b.n	8005560 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005348:	4b8c      	ldr	r3, [pc, #560]	@ (800557c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800534a:	61bb      	str	r3, [r7, #24]
      break;
 800534c:	e108      	b.n	8005560 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800534e:	4b88      	ldr	r3, [pc, #544]	@ (8005570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005358:	4b85      	ldr	r3, [pc, #532]	@ (8005570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800535a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800535c:	091b      	lsrs	r3, r3, #4
 800535e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005362:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005364:	4b82      	ldr	r3, [pc, #520]	@ (8005570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800536e:	4b80      	ldr	r3, [pc, #512]	@ (8005570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005372:	08db      	lsrs	r3, r3, #3
 8005374:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	fb02 f303 	mul.w	r3, r2, r3
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005386:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 80e1 	beq.w	8005554 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2b02      	cmp	r3, #2
 8005396:	f000 8083 	beq.w	80054a0 <HAL_RCC_GetSysClockFreq+0x204>
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2b02      	cmp	r3, #2
 800539e:	f200 80a1 	bhi.w	80054e4 <HAL_RCC_GetSysClockFreq+0x248>
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <HAL_RCC_GetSysClockFreq+0x114>
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d056      	beq.n	800545c <HAL_RCC_GetSysClockFreq+0x1c0>
 80053ae:	e099      	b.n	80054e4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053b0:	4b6f      	ldr	r3, [pc, #444]	@ (8005570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0320 	and.w	r3, r3, #32
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d02d      	beq.n	8005418 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053bc:	4b6c      	ldr	r3, [pc, #432]	@ (8005570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	08db      	lsrs	r3, r3, #3
 80053c2:	f003 0303 	and.w	r3, r3, #3
 80053c6:	4a6b      	ldr	r2, [pc, #428]	@ (8005574 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053c8:	fa22 f303 	lsr.w	r3, r2, r3
 80053cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	ee07 3a90 	vmov	s15, r3
 80053d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	ee07 3a90 	vmov	s15, r3
 80053de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053e6:	4b62      	ldr	r3, [pc, #392]	@ (8005570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ee:	ee07 3a90 	vmov	s15, r3
 80053f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80053fa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005580 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005406:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800540a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800540e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005412:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005416:	e087      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	ee07 3a90 	vmov	s15, r3
 800541e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005422:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005584 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800542a:	4b51      	ldr	r3, [pc, #324]	@ (8005570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800542c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800542e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005432:	ee07 3a90 	vmov	s15, r3
 8005436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800543a:	ed97 6a02 	vldr	s12, [r7, #8]
 800543e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005580 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800544a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800544e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005456:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800545a:	e065      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	ee07 3a90 	vmov	s15, r3
 8005462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005466:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005588 <HAL_RCC_GetSysClockFreq+0x2ec>
 800546a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800546e:	4b40      	ldr	r3, [pc, #256]	@ (8005570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005476:	ee07 3a90 	vmov	s15, r3
 800547a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800547e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005482:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005580 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800548a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800548e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800549a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800549e:	e043      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	ee07 3a90 	vmov	s15, r3
 80054a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054aa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800558c <HAL_RCC_GetSysClockFreq+0x2f0>
 80054ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054b2:	4b2f      	ldr	r3, [pc, #188]	@ (8005570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ba:	ee07 3a90 	vmov	s15, r3
 80054be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80054c6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005580 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054e2:	e021      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005588 <HAL_RCC_GetSysClockFreq+0x2ec>
 80054f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054f6:	4b1e      	ldr	r3, [pc, #120]	@ (8005570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054fe:	ee07 3a90 	vmov	s15, r3
 8005502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005506:	ed97 6a02 	vldr	s12, [r7, #8]
 800550a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005580 <HAL_RCC_GetSysClockFreq+0x2e4>
 800550e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005516:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800551a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800551e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005522:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005526:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005528:	4b11      	ldr	r3, [pc, #68]	@ (8005570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800552a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800552c:	0a5b      	lsrs	r3, r3, #9
 800552e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005532:	3301      	adds	r3, #1
 8005534:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	ee07 3a90 	vmov	s15, r3
 800553c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005540:	edd7 6a07 	vldr	s13, [r7, #28]
 8005544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800554c:	ee17 3a90 	vmov	r3, s15
 8005550:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005552:	e005      	b.n	8005560 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	61bb      	str	r3, [r7, #24]
      break;
 8005558:	e002      	b.n	8005560 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800555a:	4b07      	ldr	r3, [pc, #28]	@ (8005578 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800555c:	61bb      	str	r3, [r7, #24]
      break;
 800555e:	bf00      	nop
  }

  return sysclockfreq;
 8005560:	69bb      	ldr	r3, [r7, #24]
}
 8005562:	4618      	mov	r0, r3
 8005564:	3724      	adds	r7, #36	@ 0x24
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	58024400 	.word	0x58024400
 8005574:	03d09000 	.word	0x03d09000
 8005578:	003d0900 	.word	0x003d0900
 800557c:	007a1200 	.word	0x007a1200
 8005580:	46000000 	.word	0x46000000
 8005584:	4c742400 	.word	0x4c742400
 8005588:	4a742400 	.word	0x4a742400
 800558c:	4af42400 	.word	0x4af42400

08005590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005596:	f7ff fe81 	bl	800529c <HAL_RCC_GetSysClockFreq>
 800559a:	4602      	mov	r2, r0
 800559c:	4b10      	ldr	r3, [pc, #64]	@ (80055e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	0a1b      	lsrs	r3, r3, #8
 80055a2:	f003 030f 	and.w	r3, r3, #15
 80055a6:	490f      	ldr	r1, [pc, #60]	@ (80055e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80055a8:	5ccb      	ldrb	r3, [r1, r3]
 80055aa:	f003 031f 	and.w	r3, r3, #31
 80055ae:	fa22 f303 	lsr.w	r3, r2, r3
 80055b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055b4:	4b0a      	ldr	r3, [pc, #40]	@ (80055e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	f003 030f 	and.w	r3, r3, #15
 80055bc:	4a09      	ldr	r2, [pc, #36]	@ (80055e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80055be:	5cd3      	ldrb	r3, [r2, r3]
 80055c0:	f003 031f 	and.w	r3, r3, #31
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	fa22 f303 	lsr.w	r3, r2, r3
 80055ca:	4a07      	ldr	r2, [pc, #28]	@ (80055e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80055cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055ce:	4a07      	ldr	r2, [pc, #28]	@ (80055ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80055d4:	4b04      	ldr	r3, [pc, #16]	@ (80055e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80055d6:	681b      	ldr	r3, [r3, #0]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	58024400 	.word	0x58024400
 80055e4:	0800a73c 	.word	0x0800a73c
 80055e8:	24000008 	.word	0x24000008
 80055ec:	24000004 	.word	0x24000004

080055f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80055f4:	f7ff ffcc 	bl	8005590 <HAL_RCC_GetHCLKFreq>
 80055f8:	4602      	mov	r2, r0
 80055fa:	4b06      	ldr	r3, [pc, #24]	@ (8005614 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	091b      	lsrs	r3, r3, #4
 8005600:	f003 0307 	and.w	r3, r3, #7
 8005604:	4904      	ldr	r1, [pc, #16]	@ (8005618 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005606:	5ccb      	ldrb	r3, [r1, r3]
 8005608:	f003 031f 	and.w	r3, r3, #31
 800560c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005610:	4618      	mov	r0, r3
 8005612:	bd80      	pop	{r7, pc}
 8005614:	58024400 	.word	0x58024400
 8005618:	0800a73c 	.word	0x0800a73c

0800561c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005620:	f7ff ffb6 	bl	8005590 <HAL_RCC_GetHCLKFreq>
 8005624:	4602      	mov	r2, r0
 8005626:	4b06      	ldr	r3, [pc, #24]	@ (8005640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	0a1b      	lsrs	r3, r3, #8
 800562c:	f003 0307 	and.w	r3, r3, #7
 8005630:	4904      	ldr	r1, [pc, #16]	@ (8005644 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005632:	5ccb      	ldrb	r3, [r1, r3]
 8005634:	f003 031f 	and.w	r3, r3, #31
 8005638:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800563c:	4618      	mov	r0, r3
 800563e:	bd80      	pop	{r7, pc}
 8005640:	58024400 	.word	0x58024400
 8005644:	0800a73c 	.word	0x0800a73c

08005648 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800564c:	b0ca      	sub	sp, #296	@ 0x128
 800564e:	af00      	add	r7, sp, #0
 8005650:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005654:	2300      	movs	r3, #0
 8005656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800565a:	2300      	movs	r3, #0
 800565c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005668:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800566c:	2500      	movs	r5, #0
 800566e:	ea54 0305 	orrs.w	r3, r4, r5
 8005672:	d049      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005678:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800567a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800567e:	d02f      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005680:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005684:	d828      	bhi.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005686:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800568a:	d01a      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800568c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005690:	d822      	bhi.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005696:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800569a:	d007      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800569c:	e01c      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800569e:	4bb8      	ldr	r3, [pc, #736]	@ (8005980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a2:	4ab7      	ldr	r2, [pc, #732]	@ (8005980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80056aa:	e01a      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b0:	3308      	adds	r3, #8
 80056b2:	2102      	movs	r1, #2
 80056b4:	4618      	mov	r0, r3
 80056b6:	f001 fc8f 	bl	8006fd8 <RCCEx_PLL2_Config>
 80056ba:	4603      	mov	r3, r0
 80056bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80056c0:	e00f      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c6:	3328      	adds	r3, #40	@ 0x28
 80056c8:	2102      	movs	r1, #2
 80056ca:	4618      	mov	r0, r3
 80056cc:	f001 fd36 	bl	800713c <RCCEx_PLL3_Config>
 80056d0:	4603      	mov	r3, r0
 80056d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80056d6:	e004      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056de:	e000      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80056e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10a      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80056ea:	4ba5      	ldr	r3, [pc, #660]	@ (8005980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80056f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056f8:	4aa1      	ldr	r2, [pc, #644]	@ (8005980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056fa:	430b      	orrs	r3, r1
 80056fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80056fe:	e003      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005700:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005704:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005710:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005714:	f04f 0900 	mov.w	r9, #0
 8005718:	ea58 0309 	orrs.w	r3, r8, r9
 800571c:	d047      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800571e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005724:	2b04      	cmp	r3, #4
 8005726:	d82a      	bhi.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005728:	a201      	add	r2, pc, #4	@ (adr r2, 8005730 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800572a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572e:	bf00      	nop
 8005730:	08005745 	.word	0x08005745
 8005734:	08005753 	.word	0x08005753
 8005738:	08005769 	.word	0x08005769
 800573c:	08005787 	.word	0x08005787
 8005740:	08005787 	.word	0x08005787
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005744:	4b8e      	ldr	r3, [pc, #568]	@ (8005980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005748:	4a8d      	ldr	r2, [pc, #564]	@ (8005980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800574a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800574e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005750:	e01a      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005756:	3308      	adds	r3, #8
 8005758:	2100      	movs	r1, #0
 800575a:	4618      	mov	r0, r3
 800575c:	f001 fc3c 	bl	8006fd8 <RCCEx_PLL2_Config>
 8005760:	4603      	mov	r3, r0
 8005762:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005766:	e00f      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800576c:	3328      	adds	r3, #40	@ 0x28
 800576e:	2100      	movs	r1, #0
 8005770:	4618      	mov	r0, r3
 8005772:	f001 fce3 	bl	800713c <RCCEx_PLL3_Config>
 8005776:	4603      	mov	r3, r0
 8005778:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800577c:	e004      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005784:	e000      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005786:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005788:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10a      	bne.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005790:	4b7b      	ldr	r3, [pc, #492]	@ (8005980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005794:	f023 0107 	bic.w	r1, r3, #7
 8005798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800579c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800579e:	4a78      	ldr	r2, [pc, #480]	@ (8005980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057a0:	430b      	orrs	r3, r1
 80057a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80057a4:	e003      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80057ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80057ba:	f04f 0b00 	mov.w	fp, #0
 80057be:	ea5a 030b 	orrs.w	r3, sl, fp
 80057c2:	d04c      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80057c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057ce:	d030      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80057d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057d4:	d829      	bhi.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80057d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80057d8:	d02d      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80057da:	2bc0      	cmp	r3, #192	@ 0xc0
 80057dc:	d825      	bhi.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80057de:	2b80      	cmp	r3, #128	@ 0x80
 80057e0:	d018      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80057e2:	2b80      	cmp	r3, #128	@ 0x80
 80057e4:	d821      	bhi.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d002      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80057ea:	2b40      	cmp	r3, #64	@ 0x40
 80057ec:	d007      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80057ee:	e01c      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057f0:	4b63      	ldr	r3, [pc, #396]	@ (8005980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f4:	4a62      	ldr	r2, [pc, #392]	@ (8005980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80057fc:	e01c      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005802:	3308      	adds	r3, #8
 8005804:	2100      	movs	r1, #0
 8005806:	4618      	mov	r0, r3
 8005808:	f001 fbe6 	bl	8006fd8 <RCCEx_PLL2_Config>
 800580c:	4603      	mov	r3, r0
 800580e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005812:	e011      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005818:	3328      	adds	r3, #40	@ 0x28
 800581a:	2100      	movs	r1, #0
 800581c:	4618      	mov	r0, r3
 800581e:	f001 fc8d 	bl	800713c <RCCEx_PLL3_Config>
 8005822:	4603      	mov	r3, r0
 8005824:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005828:	e006      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005830:	e002      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005832:	bf00      	nop
 8005834:	e000      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005836:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005838:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10a      	bne.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005840:	4b4f      	ldr	r3, [pc, #316]	@ (8005980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005842:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005844:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800584c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800584e:	4a4c      	ldr	r2, [pc, #304]	@ (8005980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005850:	430b      	orrs	r3, r1
 8005852:	6513      	str	r3, [r2, #80]	@ 0x50
 8005854:	e003      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005856:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800585a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800585e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005866:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800586a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800586e:	2300      	movs	r3, #0
 8005870:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005874:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005878:	460b      	mov	r3, r1
 800587a:	4313      	orrs	r3, r2
 800587c:	d053      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800587e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005882:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005886:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800588a:	d035      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800588c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005890:	d82e      	bhi.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005892:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005896:	d031      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005898:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800589c:	d828      	bhi.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800589e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058a2:	d01a      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x292>
 80058a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058a8:	d822      	bhi.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80058ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058b2:	d007      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80058b4:	e01c      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058b6:	4b32      	ldr	r3, [pc, #200]	@ (8005980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ba:	4a31      	ldr	r2, [pc, #196]	@ (8005980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058c2:	e01c      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c8:	3308      	adds	r3, #8
 80058ca:	2100      	movs	r1, #0
 80058cc:	4618      	mov	r0, r3
 80058ce:	f001 fb83 	bl	8006fd8 <RCCEx_PLL2_Config>
 80058d2:	4603      	mov	r3, r0
 80058d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80058d8:	e011      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058de:	3328      	adds	r3, #40	@ 0x28
 80058e0:	2100      	movs	r1, #0
 80058e2:	4618      	mov	r0, r3
 80058e4:	f001 fc2a 	bl	800713c <RCCEx_PLL3_Config>
 80058e8:	4603      	mov	r3, r0
 80058ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058ee:	e006      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058f6:	e002      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80058f8:	bf00      	nop
 80058fa:	e000      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80058fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10b      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005906:	4b1e      	ldr	r3, [pc, #120]	@ (8005980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800590a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800590e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005912:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005916:	4a1a      	ldr	r2, [pc, #104]	@ (8005980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005918:	430b      	orrs	r3, r1
 800591a:	6593      	str	r3, [r2, #88]	@ 0x58
 800591c:	e003      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005922:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800592a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005932:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005936:	2300      	movs	r3, #0
 8005938:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800593c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005940:	460b      	mov	r3, r1
 8005942:	4313      	orrs	r3, r2
 8005944:	d056      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800594e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005952:	d038      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005954:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005958:	d831      	bhi.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800595a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800595e:	d034      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005960:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005964:	d82b      	bhi.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005966:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800596a:	d01d      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800596c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005970:	d825      	bhi.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005972:	2b00      	cmp	r3, #0
 8005974:	d006      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005976:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800597a:	d00a      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800597c:	e01f      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800597e:	bf00      	nop
 8005980:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005984:	4ba2      	ldr	r3, [pc, #648]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005988:	4aa1      	ldr	r2, [pc, #644]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800598a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800598e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005990:	e01c      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005996:	3308      	adds	r3, #8
 8005998:	2100      	movs	r1, #0
 800599a:	4618      	mov	r0, r3
 800599c:	f001 fb1c 	bl	8006fd8 <RCCEx_PLL2_Config>
 80059a0:	4603      	mov	r3, r0
 80059a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80059a6:	e011      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ac:	3328      	adds	r3, #40	@ 0x28
 80059ae:	2100      	movs	r1, #0
 80059b0:	4618      	mov	r0, r3
 80059b2:	f001 fbc3 	bl	800713c <RCCEx_PLL3_Config>
 80059b6:	4603      	mov	r3, r0
 80059b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059bc:	e006      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059c4:	e002      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80059c6:	bf00      	nop
 80059c8:	e000      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80059ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10b      	bne.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80059d4:	4b8e      	ldr	r3, [pc, #568]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059d8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80059dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80059e4:	4a8a      	ldr	r2, [pc, #552]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059e6:	430b      	orrs	r3, r1
 80059e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80059ea:	e003      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80059f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005a00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005a04:	2300      	movs	r3, #0
 8005a06:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005a0a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005a0e:	460b      	mov	r3, r1
 8005a10:	4313      	orrs	r3, r2
 8005a12:	d03a      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a1a:	2b30      	cmp	r3, #48	@ 0x30
 8005a1c:	d01f      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005a1e:	2b30      	cmp	r3, #48	@ 0x30
 8005a20:	d819      	bhi.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005a22:	2b20      	cmp	r3, #32
 8005a24:	d00c      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005a26:	2b20      	cmp	r3, #32
 8005a28:	d815      	bhi.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d019      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005a2e:	2b10      	cmp	r3, #16
 8005a30:	d111      	bne.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a32:	4b77      	ldr	r3, [pc, #476]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a36:	4a76      	ldr	r2, [pc, #472]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005a3e:	e011      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a44:	3308      	adds	r3, #8
 8005a46:	2102      	movs	r1, #2
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f001 fac5 	bl	8006fd8 <RCCEx_PLL2_Config>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005a54:	e006      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a5c:	e002      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005a5e:	bf00      	nop
 8005a60:	e000      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005a62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10a      	bne.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005a6c:	4b68      	ldr	r3, [pc, #416]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a70:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a7a:	4a65      	ldr	r2, [pc, #404]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a7c:	430b      	orrs	r3, r1
 8005a7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a80:	e003      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a92:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005a96:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005aa0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	d051      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ab0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ab4:	d035      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005ab6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005aba:	d82e      	bhi.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005abc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ac0:	d031      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005ac2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ac6:	d828      	bhi.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005ac8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005acc:	d01a      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ad2:	d822      	bhi.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005ad8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005adc:	d007      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005ade:	e01c      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ae0:	4b4b      	ldr	r3, [pc, #300]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae4:	4a4a      	ldr	r2, [pc, #296]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ae6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005aea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005aec:	e01c      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af2:	3308      	adds	r3, #8
 8005af4:	2100      	movs	r1, #0
 8005af6:	4618      	mov	r0, r3
 8005af8:	f001 fa6e 	bl	8006fd8 <RCCEx_PLL2_Config>
 8005afc:	4603      	mov	r3, r0
 8005afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005b02:	e011      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b08:	3328      	adds	r3, #40	@ 0x28
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f001 fb15 	bl	800713c <RCCEx_PLL3_Config>
 8005b12:	4603      	mov	r3, r0
 8005b14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005b18:	e006      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b20:	e002      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005b22:	bf00      	nop
 8005b24:	e000      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005b26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005b30:	4b37      	ldr	r3, [pc, #220]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b34:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b3e:	4a34      	ldr	r2, [pc, #208]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b40:	430b      	orrs	r3, r1
 8005b42:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b44:	e003      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005b5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b5e:	2300      	movs	r3, #0
 8005b60:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005b64:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	d056      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b78:	d033      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005b7a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b7e:	d82c      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b84:	d02f      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005b86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b8a:	d826      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b90:	d02b      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005b92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b96:	d820      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b9c:	d012      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005b9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ba2:	d81a      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d022      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bac:	d115      	bne.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb2:	3308      	adds	r3, #8
 8005bb4:	2101      	movs	r1, #1
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f001 fa0e 	bl	8006fd8 <RCCEx_PLL2_Config>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005bc2:	e015      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc8:	3328      	adds	r3, #40	@ 0x28
 8005bca:	2101      	movs	r1, #1
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f001 fab5 	bl	800713c <RCCEx_PLL3_Config>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005bd8:	e00a      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005be0:	e006      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005be2:	bf00      	nop
 8005be4:	e004      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005be6:	bf00      	nop
 8005be8:	e002      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005bea:	bf00      	nop
 8005bec:	e000      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005bee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10d      	bne.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005bf8:	4b05      	ldr	r3, [pc, #20]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bfc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c06:	4a02      	ldr	r2, [pc, #8]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c08:	430b      	orrs	r3, r1
 8005c0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c0c:	e006      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005c0e:	bf00      	nop
 8005c10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c24:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005c28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c32:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005c36:	460b      	mov	r3, r1
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	d055      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c48:	d033      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c4e:	d82c      	bhi.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c54:	d02f      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c5a:	d826      	bhi.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c60:	d02b      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005c62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c66:	d820      	bhi.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c6c:	d012      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005c6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c72:	d81a      	bhi.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d022      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005c78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c7c:	d115      	bne.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c82:	3308      	adds	r3, #8
 8005c84:	2101      	movs	r1, #1
 8005c86:	4618      	mov	r0, r3
 8005c88:	f001 f9a6 	bl	8006fd8 <RCCEx_PLL2_Config>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c92:	e015      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c98:	3328      	adds	r3, #40	@ 0x28
 8005c9a:	2101      	movs	r1, #1
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f001 fa4d 	bl	800713c <RCCEx_PLL3_Config>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005ca8:	e00a      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cb0:	e006      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005cb2:	bf00      	nop
 8005cb4:	e004      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005cb6:	bf00      	nop
 8005cb8:	e002      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005cba:	bf00      	nop
 8005cbc:	e000      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005cbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10b      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005cc8:	4ba3      	ldr	r3, [pc, #652]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ccc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005cd8:	4a9f      	ldr	r2, [pc, #636]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cda:	430b      	orrs	r3, r1
 8005cdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cde:	e003      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ce4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005cf4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005cfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005d02:	460b      	mov	r3, r1
 8005d04:	4313      	orrs	r3, r2
 8005d06:	d037      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d12:	d00e      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005d14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d18:	d816      	bhi.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d018      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005d1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d22:	d111      	bne.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d24:	4b8c      	ldr	r3, [pc, #560]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d28:	4a8b      	ldr	r2, [pc, #556]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005d30:	e00f      	b.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d36:	3308      	adds	r3, #8
 8005d38:	2101      	movs	r1, #1
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f001 f94c 	bl	8006fd8 <RCCEx_PLL2_Config>
 8005d40:	4603      	mov	r3, r0
 8005d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005d46:	e004      	b.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d4e:	e000      	b.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005d50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10a      	bne.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d5a:	4b7f      	ldr	r3, [pc, #508]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d5e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d68:	4a7b      	ldr	r2, [pc, #492]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d6a:	430b      	orrs	r3, r1
 8005d6c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d6e:	e003      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d80:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005d84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d88:	2300      	movs	r3, #0
 8005d8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005d8e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005d92:	460b      	mov	r3, r1
 8005d94:	4313      	orrs	r3, r2
 8005d96:	d039      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d9e:	2b03      	cmp	r3, #3
 8005da0:	d81c      	bhi.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005da2:	a201      	add	r2, pc, #4	@ (adr r2, 8005da8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da8:	08005de5 	.word	0x08005de5
 8005dac:	08005db9 	.word	0x08005db9
 8005db0:	08005dc7 	.word	0x08005dc7
 8005db4:	08005de5 	.word	0x08005de5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005db8:	4b67      	ldr	r3, [pc, #412]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbc:	4a66      	ldr	r2, [pc, #408]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005dc4:	e00f      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dca:	3308      	adds	r3, #8
 8005dcc:	2102      	movs	r1, #2
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f001 f902 	bl	8006fd8 <RCCEx_PLL2_Config>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005dda:	e004      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005de2:	e000      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005de4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005de6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10a      	bne.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005dee:	4b5a      	ldr	r3, [pc, #360]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005df2:	f023 0103 	bic.w	r1, r3, #3
 8005df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dfc:	4a56      	ldr	r2, [pc, #344]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dfe:	430b      	orrs	r3, r1
 8005e00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e02:	e003      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e14:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005e18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005e22:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005e26:	460b      	mov	r3, r1
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	f000 809f 	beq.w	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e2e:	4b4b      	ldr	r3, [pc, #300]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a4a      	ldr	r2, [pc, #296]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e3a:	f7fb fc43 	bl	80016c4 <HAL_GetTick>
 8005e3e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e42:	e00b      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e44:	f7fb fc3e 	bl	80016c4 <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	2b64      	cmp	r3, #100	@ 0x64
 8005e52:	d903      	bls.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e5a:	e005      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e5c:	4b3f      	ldr	r3, [pc, #252]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d0ed      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005e68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d179      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005e70:	4b39      	ldr	r3, [pc, #228]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e72:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e7c:	4053      	eors	r3, r2
 8005e7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d015      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e86:	4b34      	ldr	r3, [pc, #208]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e8e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e92:	4b31      	ldr	r3, [pc, #196]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e96:	4a30      	ldr	r2, [pc, #192]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e9c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e9e:	4b2e      	ldr	r3, [pc, #184]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ea2:	4a2d      	ldr	r2, [pc, #180]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ea4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ea8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005eaa:	4a2b      	ldr	r2, [pc, #172]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005eb0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005eba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ebe:	d118      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec0:	f7fb fc00 	bl	80016c4 <HAL_GetTick>
 8005ec4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ec8:	e00d      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eca:	f7fb fbfb 	bl	80016c4 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005ed4:	1ad2      	subs	r2, r2, r3
 8005ed6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d903      	bls.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005ee4:	e005      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d0eb      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d129      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005efe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f0a:	d10e      	bne.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005f0c:	4b12      	ldr	r3, [pc, #72]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f1c:	091a      	lsrs	r2, r3, #4
 8005f1e:	4b10      	ldr	r3, [pc, #64]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005f20:	4013      	ands	r3, r2
 8005f22:	4a0d      	ldr	r2, [pc, #52]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f24:	430b      	orrs	r3, r1
 8005f26:	6113      	str	r3, [r2, #16]
 8005f28:	e005      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005f34:	6113      	str	r3, [r2, #16]
 8005f36:	4b08      	ldr	r3, [pc, #32]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f38:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f46:	4a04      	ldr	r2, [pc, #16]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f48:	430b      	orrs	r3, r1
 8005f4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f4c:	e00e      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005f56:	e009      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005f58:	58024400 	.word	0x58024400
 8005f5c:	58024800 	.word	0x58024800
 8005f60:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f74:	f002 0301 	and.w	r3, r2, #1
 8005f78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f82:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f86:	460b      	mov	r3, r1
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	f000 8089 	beq.w	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f94:	2b28      	cmp	r3, #40	@ 0x28
 8005f96:	d86b      	bhi.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005f98:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9e:	bf00      	nop
 8005fa0:	08006079 	.word	0x08006079
 8005fa4:	08006071 	.word	0x08006071
 8005fa8:	08006071 	.word	0x08006071
 8005fac:	08006071 	.word	0x08006071
 8005fb0:	08006071 	.word	0x08006071
 8005fb4:	08006071 	.word	0x08006071
 8005fb8:	08006071 	.word	0x08006071
 8005fbc:	08006071 	.word	0x08006071
 8005fc0:	08006045 	.word	0x08006045
 8005fc4:	08006071 	.word	0x08006071
 8005fc8:	08006071 	.word	0x08006071
 8005fcc:	08006071 	.word	0x08006071
 8005fd0:	08006071 	.word	0x08006071
 8005fd4:	08006071 	.word	0x08006071
 8005fd8:	08006071 	.word	0x08006071
 8005fdc:	08006071 	.word	0x08006071
 8005fe0:	0800605b 	.word	0x0800605b
 8005fe4:	08006071 	.word	0x08006071
 8005fe8:	08006071 	.word	0x08006071
 8005fec:	08006071 	.word	0x08006071
 8005ff0:	08006071 	.word	0x08006071
 8005ff4:	08006071 	.word	0x08006071
 8005ff8:	08006071 	.word	0x08006071
 8005ffc:	08006071 	.word	0x08006071
 8006000:	08006079 	.word	0x08006079
 8006004:	08006071 	.word	0x08006071
 8006008:	08006071 	.word	0x08006071
 800600c:	08006071 	.word	0x08006071
 8006010:	08006071 	.word	0x08006071
 8006014:	08006071 	.word	0x08006071
 8006018:	08006071 	.word	0x08006071
 800601c:	08006071 	.word	0x08006071
 8006020:	08006079 	.word	0x08006079
 8006024:	08006071 	.word	0x08006071
 8006028:	08006071 	.word	0x08006071
 800602c:	08006071 	.word	0x08006071
 8006030:	08006071 	.word	0x08006071
 8006034:	08006071 	.word	0x08006071
 8006038:	08006071 	.word	0x08006071
 800603c:	08006071 	.word	0x08006071
 8006040:	08006079 	.word	0x08006079
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006048:	3308      	adds	r3, #8
 800604a:	2101      	movs	r1, #1
 800604c:	4618      	mov	r0, r3
 800604e:	f000 ffc3 	bl	8006fd8 <RCCEx_PLL2_Config>
 8006052:	4603      	mov	r3, r0
 8006054:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006058:	e00f      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800605a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800605e:	3328      	adds	r3, #40	@ 0x28
 8006060:	2101      	movs	r1, #1
 8006062:	4618      	mov	r0, r3
 8006064:	f001 f86a 	bl	800713c <RCCEx_PLL3_Config>
 8006068:	4603      	mov	r3, r0
 800606a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800606e:	e004      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006076:	e000      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800607a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10a      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006082:	4bbf      	ldr	r3, [pc, #764]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006086:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800608a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800608e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006090:	4abb      	ldr	r2, [pc, #748]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006092:	430b      	orrs	r3, r1
 8006094:	6553      	str	r3, [r2, #84]	@ 0x54
 8006096:	e003      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006098:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800609c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80060a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a8:	f002 0302 	and.w	r3, r2, #2
 80060ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060b0:	2300      	movs	r3, #0
 80060b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80060b6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80060ba:	460b      	mov	r3, r1
 80060bc:	4313      	orrs	r3, r2
 80060be:	d041      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80060c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060c6:	2b05      	cmp	r3, #5
 80060c8:	d824      	bhi.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80060ca:	a201      	add	r2, pc, #4	@ (adr r2, 80060d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80060cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d0:	0800611d 	.word	0x0800611d
 80060d4:	080060e9 	.word	0x080060e9
 80060d8:	080060ff 	.word	0x080060ff
 80060dc:	0800611d 	.word	0x0800611d
 80060e0:	0800611d 	.word	0x0800611d
 80060e4:	0800611d 	.word	0x0800611d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ec:	3308      	adds	r3, #8
 80060ee:	2101      	movs	r1, #1
 80060f0:	4618      	mov	r0, r3
 80060f2:	f000 ff71 	bl	8006fd8 <RCCEx_PLL2_Config>
 80060f6:	4603      	mov	r3, r0
 80060f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80060fc:	e00f      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006102:	3328      	adds	r3, #40	@ 0x28
 8006104:	2101      	movs	r1, #1
 8006106:	4618      	mov	r0, r3
 8006108:	f001 f818 	bl	800713c <RCCEx_PLL3_Config>
 800610c:	4603      	mov	r3, r0
 800610e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006112:	e004      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800611a:	e000      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800611c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800611e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10a      	bne.n	800613c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006126:	4b96      	ldr	r3, [pc, #600]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800612a:	f023 0107 	bic.w	r1, r3, #7
 800612e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006132:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006134:	4a92      	ldr	r2, [pc, #584]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006136:	430b      	orrs	r3, r1
 8006138:	6553      	str	r3, [r2, #84]	@ 0x54
 800613a:	e003      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800613c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006140:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614c:	f002 0304 	and.w	r3, r2, #4
 8006150:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006154:	2300      	movs	r3, #0
 8006156:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800615a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800615e:	460b      	mov	r3, r1
 8006160:	4313      	orrs	r3, r2
 8006162:	d044      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006168:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800616c:	2b05      	cmp	r3, #5
 800616e:	d825      	bhi.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006170:	a201      	add	r2, pc, #4	@ (adr r2, 8006178 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006176:	bf00      	nop
 8006178:	080061c5 	.word	0x080061c5
 800617c:	08006191 	.word	0x08006191
 8006180:	080061a7 	.word	0x080061a7
 8006184:	080061c5 	.word	0x080061c5
 8006188:	080061c5 	.word	0x080061c5
 800618c:	080061c5 	.word	0x080061c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006194:	3308      	adds	r3, #8
 8006196:	2101      	movs	r1, #1
 8006198:	4618      	mov	r0, r3
 800619a:	f000 ff1d 	bl	8006fd8 <RCCEx_PLL2_Config>
 800619e:	4603      	mov	r3, r0
 80061a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80061a4:	e00f      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061aa:	3328      	adds	r3, #40	@ 0x28
 80061ac:	2101      	movs	r1, #1
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 ffc4 	bl	800713c <RCCEx_PLL3_Config>
 80061b4:	4603      	mov	r3, r0
 80061b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80061ba:	e004      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061c2:	e000      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80061c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10b      	bne.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061ce:	4b6c      	ldr	r3, [pc, #432]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061d2:	f023 0107 	bic.w	r1, r3, #7
 80061d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061de:	4a68      	ldr	r2, [pc, #416]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061e0:	430b      	orrs	r3, r1
 80061e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80061e4:	e003      	b.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f6:	f002 0320 	and.w	r3, r2, #32
 80061fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80061fe:	2300      	movs	r3, #0
 8006200:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006204:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006208:	460b      	mov	r3, r1
 800620a:	4313      	orrs	r3, r2
 800620c:	d055      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800620e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006216:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800621a:	d033      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800621c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006220:	d82c      	bhi.n	800627c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006226:	d02f      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800622c:	d826      	bhi.n	800627c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800622e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006232:	d02b      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006234:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006238:	d820      	bhi.n	800627c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800623a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800623e:	d012      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006240:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006244:	d81a      	bhi.n	800627c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006246:	2b00      	cmp	r3, #0
 8006248:	d022      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800624a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800624e:	d115      	bne.n	800627c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006254:	3308      	adds	r3, #8
 8006256:	2100      	movs	r1, #0
 8006258:	4618      	mov	r0, r3
 800625a:	f000 febd 	bl	8006fd8 <RCCEx_PLL2_Config>
 800625e:	4603      	mov	r3, r0
 8006260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006264:	e015      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800626a:	3328      	adds	r3, #40	@ 0x28
 800626c:	2102      	movs	r1, #2
 800626e:	4618      	mov	r0, r3
 8006270:	f000 ff64 	bl	800713c <RCCEx_PLL3_Config>
 8006274:	4603      	mov	r3, r0
 8006276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800627a:	e00a      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006282:	e006      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006284:	bf00      	nop
 8006286:	e004      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006288:	bf00      	nop
 800628a:	e002      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800628c:	bf00      	nop
 800628e:	e000      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006290:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10b      	bne.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800629a:	4b39      	ldr	r3, [pc, #228]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800629c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800629e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80062a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062aa:	4a35      	ldr	r2, [pc, #212]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062ac:	430b      	orrs	r3, r1
 80062ae:	6553      	str	r3, [r2, #84]	@ 0x54
 80062b0:	e003      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80062ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80062c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80062ca:	2300      	movs	r3, #0
 80062cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80062d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80062d4:	460b      	mov	r3, r1
 80062d6:	4313      	orrs	r3, r2
 80062d8:	d058      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80062da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062e2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80062e6:	d033      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80062e8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80062ec:	d82c      	bhi.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062f2:	d02f      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80062f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062f8:	d826      	bhi.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062fe:	d02b      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006300:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006304:	d820      	bhi.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006306:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800630a:	d012      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800630c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006310:	d81a      	bhi.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006312:	2b00      	cmp	r3, #0
 8006314:	d022      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800631a:	d115      	bne.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800631c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006320:	3308      	adds	r3, #8
 8006322:	2100      	movs	r1, #0
 8006324:	4618      	mov	r0, r3
 8006326:	f000 fe57 	bl	8006fd8 <RCCEx_PLL2_Config>
 800632a:	4603      	mov	r3, r0
 800632c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006330:	e015      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006336:	3328      	adds	r3, #40	@ 0x28
 8006338:	2102      	movs	r1, #2
 800633a:	4618      	mov	r0, r3
 800633c:	f000 fefe 	bl	800713c <RCCEx_PLL3_Config>
 8006340:	4603      	mov	r3, r0
 8006342:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006346:	e00a      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800634e:	e006      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006350:	bf00      	nop
 8006352:	e004      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006354:	bf00      	nop
 8006356:	e002      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006358:	bf00      	nop
 800635a:	e000      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800635c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800635e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10e      	bne.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006366:	4b06      	ldr	r3, [pc, #24]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800636a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800636e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006372:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006376:	4a02      	ldr	r2, [pc, #8]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006378:	430b      	orrs	r3, r1
 800637a:	6593      	str	r3, [r2, #88]	@ 0x58
 800637c:	e006      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800637e:	bf00      	nop
 8006380:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006384:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006388:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800638c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006394:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006398:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800639c:	2300      	movs	r3, #0
 800639e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063a2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80063a6:	460b      	mov	r3, r1
 80063a8:	4313      	orrs	r3, r2
 80063aa:	d055      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80063ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80063b4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80063b8:	d033      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80063ba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80063be:	d82c      	bhi.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80063c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063c4:	d02f      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80063c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063ca:	d826      	bhi.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80063cc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80063d0:	d02b      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80063d2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80063d6:	d820      	bhi.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80063d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063dc:	d012      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80063de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063e2:	d81a      	bhi.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d022      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80063e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063ec:	d115      	bne.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f2:	3308      	adds	r3, #8
 80063f4:	2100      	movs	r1, #0
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 fdee 	bl	8006fd8 <RCCEx_PLL2_Config>
 80063fc:	4603      	mov	r3, r0
 80063fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006402:	e015      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006408:	3328      	adds	r3, #40	@ 0x28
 800640a:	2102      	movs	r1, #2
 800640c:	4618      	mov	r0, r3
 800640e:	f000 fe95 	bl	800713c <RCCEx_PLL3_Config>
 8006412:	4603      	mov	r3, r0
 8006414:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006418:	e00a      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006420:	e006      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006422:	bf00      	nop
 8006424:	e004      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006426:	bf00      	nop
 8006428:	e002      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800642a:	bf00      	nop
 800642c:	e000      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800642e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006430:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10b      	bne.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006438:	4ba1      	ldr	r3, [pc, #644]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800643a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800643c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006444:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006448:	4a9d      	ldr	r2, [pc, #628]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800644a:	430b      	orrs	r3, r1
 800644c:	6593      	str	r3, [r2, #88]	@ 0x58
 800644e:	e003      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006450:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006454:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800645c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006460:	f002 0308 	and.w	r3, r2, #8
 8006464:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006468:	2300      	movs	r3, #0
 800646a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800646e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006472:	460b      	mov	r3, r1
 8006474:	4313      	orrs	r3, r2
 8006476:	d01e      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800647c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006480:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006484:	d10c      	bne.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648a:	3328      	adds	r3, #40	@ 0x28
 800648c:	2102      	movs	r1, #2
 800648e:	4618      	mov	r0, r3
 8006490:	f000 fe54 	bl	800713c <RCCEx_PLL3_Config>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80064a0:	4b87      	ldr	r3, [pc, #540]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064a4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80064a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064b0:	4a83      	ldr	r2, [pc, #524]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064b2:	430b      	orrs	r3, r1
 80064b4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064be:	f002 0310 	and.w	r3, r2, #16
 80064c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80064c6:	2300      	movs	r3, #0
 80064c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80064cc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80064d0:	460b      	mov	r3, r1
 80064d2:	4313      	orrs	r3, r2
 80064d4:	d01e      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80064d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064e2:	d10c      	bne.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80064e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e8:	3328      	adds	r3, #40	@ 0x28
 80064ea:	2102      	movs	r1, #2
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 fe25 	bl	800713c <RCCEx_PLL3_Config>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064fe:	4b70      	ldr	r3, [pc, #448]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006502:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800650a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800650e:	4a6c      	ldr	r2, [pc, #432]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006510:	430b      	orrs	r3, r1
 8006512:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006520:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006524:	2300      	movs	r3, #0
 8006526:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800652a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800652e:	460b      	mov	r3, r1
 8006530:	4313      	orrs	r3, r2
 8006532:	d03e      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006538:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800653c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006540:	d022      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006542:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006546:	d81b      	bhi.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800654c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006550:	d00b      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006552:	e015      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006558:	3308      	adds	r3, #8
 800655a:	2100      	movs	r1, #0
 800655c:	4618      	mov	r0, r3
 800655e:	f000 fd3b 	bl	8006fd8 <RCCEx_PLL2_Config>
 8006562:	4603      	mov	r3, r0
 8006564:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006568:	e00f      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800656a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800656e:	3328      	adds	r3, #40	@ 0x28
 8006570:	2102      	movs	r1, #2
 8006572:	4618      	mov	r0, r3
 8006574:	f000 fde2 	bl	800713c <RCCEx_PLL3_Config>
 8006578:	4603      	mov	r3, r0
 800657a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800657e:	e004      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006586:	e000      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800658a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10b      	bne.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006592:	4b4b      	ldr	r3, [pc, #300]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006596:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800659a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800659e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80065a2:	4a47      	ldr	r2, [pc, #284]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065a4:	430b      	orrs	r3, r1
 80065a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80065a8:	e003      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80065b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80065be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80065c0:	2300      	movs	r3, #0
 80065c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80065c4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80065c8:	460b      	mov	r3, r1
 80065ca:	4313      	orrs	r3, r2
 80065cc:	d03b      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80065ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80065da:	d01f      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80065dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80065e0:	d818      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80065e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065e6:	d003      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80065e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80065ec:	d007      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80065ee:	e011      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065f0:	4b33      	ldr	r3, [pc, #204]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f4:	4a32      	ldr	r2, [pc, #200]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80065fc:	e00f      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006602:	3328      	adds	r3, #40	@ 0x28
 8006604:	2101      	movs	r1, #1
 8006606:	4618      	mov	r0, r3
 8006608:	f000 fd98 	bl	800713c <RCCEx_PLL3_Config>
 800660c:	4603      	mov	r3, r0
 800660e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006612:	e004      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800661a:	e000      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800661c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800661e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10b      	bne.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006626:	4b26      	ldr	r3, [pc, #152]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800662a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800662e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006636:	4a22      	ldr	r2, [pc, #136]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006638:	430b      	orrs	r3, r1
 800663a:	6553      	str	r3, [r2, #84]	@ 0x54
 800663c:	e003      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006642:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800664a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006652:	673b      	str	r3, [r7, #112]	@ 0x70
 8006654:	2300      	movs	r3, #0
 8006656:	677b      	str	r3, [r7, #116]	@ 0x74
 8006658:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800665c:	460b      	mov	r3, r1
 800665e:	4313      	orrs	r3, r2
 8006660:	d034      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800666c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006670:	d007      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006672:	e011      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006674:	4b12      	ldr	r3, [pc, #72]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006678:	4a11      	ldr	r2, [pc, #68]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800667a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800667e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006680:	e00e      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006686:	3308      	adds	r3, #8
 8006688:	2102      	movs	r1, #2
 800668a:	4618      	mov	r0, r3
 800668c:	f000 fca4 	bl	8006fd8 <RCCEx_PLL2_Config>
 8006690:	4603      	mov	r3, r0
 8006692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006696:	e003      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800669e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10d      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80066a8:	4b05      	ldr	r3, [pc, #20]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066ac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80066b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066b6:	4a02      	ldr	r2, [pc, #8]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066b8:	430b      	orrs	r3, r1
 80066ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80066bc:	e006      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80066be:	bf00      	nop
 80066c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80066cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80066d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066da:	2300      	movs	r3, #0
 80066dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80066de:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80066e2:	460b      	mov	r3, r1
 80066e4:	4313      	orrs	r3, r2
 80066e6:	d00c      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80066e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ec:	3328      	adds	r3, #40	@ 0x28
 80066ee:	2102      	movs	r1, #2
 80066f0:	4618      	mov	r0, r3
 80066f2:	f000 fd23 	bl	800713c <RCCEx_PLL3_Config>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d002      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800670e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006710:	2300      	movs	r3, #0
 8006712:	667b      	str	r3, [r7, #100]	@ 0x64
 8006714:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006718:	460b      	mov	r3, r1
 800671a:	4313      	orrs	r3, r2
 800671c:	d038      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800671e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006722:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006726:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800672a:	d018      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800672c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006730:	d811      	bhi.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006732:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006736:	d014      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006738:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800673c:	d80b      	bhi.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800673e:	2b00      	cmp	r3, #0
 8006740:	d011      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006742:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006746:	d106      	bne.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006748:	4bc3      	ldr	r3, [pc, #780]	@ (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800674a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674c:	4ac2      	ldr	r2, [pc, #776]	@ (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800674e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006752:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006754:	e008      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800675c:	e004      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800675e:	bf00      	nop
 8006760:	e002      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006762:	bf00      	nop
 8006764:	e000      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006766:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006768:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10b      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006770:	4bb9      	ldr	r3, [pc, #740]	@ (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006774:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800677c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006780:	4ab5      	ldr	r2, [pc, #724]	@ (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006782:	430b      	orrs	r3, r1
 8006784:	6553      	str	r3, [r2, #84]	@ 0x54
 8006786:	e003      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006788:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800678c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006798:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800679c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800679e:	2300      	movs	r3, #0
 80067a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067a2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80067a6:	460b      	mov	r3, r1
 80067a8:	4313      	orrs	r3, r2
 80067aa:	d009      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80067ac:	4baa      	ldr	r3, [pc, #680]	@ (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80067b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067ba:	4aa7      	ldr	r2, [pc, #668]	@ (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067bc:	430b      	orrs	r3, r1
 80067be:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80067c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80067cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80067ce:	2300      	movs	r3, #0
 80067d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80067d2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80067d6:	460b      	mov	r3, r1
 80067d8:	4313      	orrs	r3, r2
 80067da:	d00a      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80067dc:	4b9e      	ldr	r3, [pc, #632]	@ (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80067e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80067ec:	4a9a      	ldr	r2, [pc, #616]	@ (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067ee:	430b      	orrs	r3, r1
 80067f0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80067f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80067fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006800:	2300      	movs	r3, #0
 8006802:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006804:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006808:	460b      	mov	r3, r1
 800680a:	4313      	orrs	r3, r2
 800680c:	d009      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800680e:	4b92      	ldr	r3, [pc, #584]	@ (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006812:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800681a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800681c:	4a8e      	ldr	r2, [pc, #568]	@ (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800681e:	430b      	orrs	r3, r1
 8006820:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800682e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006830:	2300      	movs	r3, #0
 8006832:	647b      	str	r3, [r7, #68]	@ 0x44
 8006834:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006838:	460b      	mov	r3, r1
 800683a:	4313      	orrs	r3, r2
 800683c:	d00e      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800683e:	4b86      	ldr	r3, [pc, #536]	@ (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	4a85      	ldr	r2, [pc, #532]	@ (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006844:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006848:	6113      	str	r3, [r2, #16]
 800684a:	4b83      	ldr	r3, [pc, #524]	@ (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800684c:	6919      	ldr	r1, [r3, #16]
 800684e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006852:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006856:	4a80      	ldr	r2, [pc, #512]	@ (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006858:	430b      	orrs	r3, r1
 800685a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800685c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006864:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006868:	63bb      	str	r3, [r7, #56]	@ 0x38
 800686a:	2300      	movs	r3, #0
 800686c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800686e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006872:	460b      	mov	r3, r1
 8006874:	4313      	orrs	r3, r2
 8006876:	d009      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006878:	4b77      	ldr	r3, [pc, #476]	@ (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800687a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800687c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006886:	4a74      	ldr	r2, [pc, #464]	@ (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006888:	430b      	orrs	r3, r1
 800688a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800688c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006894:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006898:	633b      	str	r3, [r7, #48]	@ 0x30
 800689a:	2300      	movs	r3, #0
 800689c:	637b      	str	r3, [r7, #52]	@ 0x34
 800689e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80068a2:	460b      	mov	r3, r1
 80068a4:	4313      	orrs	r3, r2
 80068a6:	d00a      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80068a8:	4b6b      	ldr	r3, [pc, #428]	@ (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ac:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80068b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068b8:	4a67      	ldr	r2, [pc, #412]	@ (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068ba:	430b      	orrs	r3, r1
 80068bc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80068be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c6:	2100      	movs	r1, #0
 80068c8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068d0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80068d4:	460b      	mov	r3, r1
 80068d6:	4313      	orrs	r3, r2
 80068d8:	d011      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068de:	3308      	adds	r3, #8
 80068e0:	2100      	movs	r1, #0
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 fb78 	bl	8006fd8 <RCCEx_PLL2_Config>
 80068e8:	4603      	mov	r3, r0
 80068ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80068ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80068fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006906:	2100      	movs	r1, #0
 8006908:	6239      	str	r1, [r7, #32]
 800690a:	f003 0302 	and.w	r3, r3, #2
 800690e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006910:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006914:	460b      	mov	r3, r1
 8006916:	4313      	orrs	r3, r2
 8006918:	d011      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800691a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800691e:	3308      	adds	r3, #8
 8006920:	2101      	movs	r1, #1
 8006922:	4618      	mov	r0, r3
 8006924:	f000 fb58 	bl	8006fd8 <RCCEx_PLL2_Config>
 8006928:	4603      	mov	r3, r0
 800692a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800692e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800693a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800693e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006946:	2100      	movs	r1, #0
 8006948:	61b9      	str	r1, [r7, #24]
 800694a:	f003 0304 	and.w	r3, r3, #4
 800694e:	61fb      	str	r3, [r7, #28]
 8006950:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006954:	460b      	mov	r3, r1
 8006956:	4313      	orrs	r3, r2
 8006958:	d011      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800695a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800695e:	3308      	adds	r3, #8
 8006960:	2102      	movs	r1, #2
 8006962:	4618      	mov	r0, r3
 8006964:	f000 fb38 	bl	8006fd8 <RCCEx_PLL2_Config>
 8006968:	4603      	mov	r3, r0
 800696a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800696e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800697a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800697e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006986:	2100      	movs	r1, #0
 8006988:	6139      	str	r1, [r7, #16]
 800698a:	f003 0308 	and.w	r3, r3, #8
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006994:	460b      	mov	r3, r1
 8006996:	4313      	orrs	r3, r2
 8006998:	d011      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800699a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800699e:	3328      	adds	r3, #40	@ 0x28
 80069a0:	2100      	movs	r1, #0
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 fbca 	bl	800713c <RCCEx_PLL3_Config>
 80069a8:	4603      	mov	r3, r0
 80069aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80069ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80069be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c6:	2100      	movs	r1, #0
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	f003 0310 	and.w	r3, r3, #16
 80069ce:	60fb      	str	r3, [r7, #12]
 80069d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80069d4:	460b      	mov	r3, r1
 80069d6:	4313      	orrs	r3, r2
 80069d8:	d011      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069de:	3328      	adds	r3, #40	@ 0x28
 80069e0:	2101      	movs	r1, #1
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 fbaa 	bl	800713c <RCCEx_PLL3_Config>
 80069e8:	4603      	mov	r3, r0
 80069ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80069ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80069fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a06:	2100      	movs	r1, #0
 8006a08:	6039      	str	r1, [r7, #0]
 8006a0a:	f003 0320 	and.w	r3, r3, #32
 8006a0e:	607b      	str	r3, [r7, #4]
 8006a10:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006a14:	460b      	mov	r3, r1
 8006a16:	4313      	orrs	r3, r2
 8006a18:	d011      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a1e:	3328      	adds	r3, #40	@ 0x28
 8006a20:	2102      	movs	r1, #2
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 fb8a 	bl	800713c <RCCEx_PLL3_Config>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d003      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006a3e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	e000      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006a52:	46bd      	mov	sp, r7
 8006a54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a58:	58024400 	.word	0x58024400

08006a5c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006a60:	f7fe fd96 	bl	8005590 <HAL_RCC_GetHCLKFreq>
 8006a64:	4602      	mov	r2, r0
 8006a66:	4b06      	ldr	r3, [pc, #24]	@ (8006a80 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	091b      	lsrs	r3, r3, #4
 8006a6c:	f003 0307 	and.w	r3, r3, #7
 8006a70:	4904      	ldr	r1, [pc, #16]	@ (8006a84 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006a72:	5ccb      	ldrb	r3, [r1, r3]
 8006a74:	f003 031f 	and.w	r3, r3, #31
 8006a78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	58024400 	.word	0x58024400
 8006a84:	0800a73c 	.word	0x0800a73c

08006a88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b089      	sub	sp, #36	@ 0x24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a90:	4ba1      	ldr	r3, [pc, #644]	@ (8006d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a94:	f003 0303 	and.w	r3, r3, #3
 8006a98:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006a9a:	4b9f      	ldr	r3, [pc, #636]	@ (8006d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a9e:	0b1b      	lsrs	r3, r3, #12
 8006aa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006aa4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006aa6:	4b9c      	ldr	r3, [pc, #624]	@ (8006d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aaa:	091b      	lsrs	r3, r3, #4
 8006aac:	f003 0301 	and.w	r3, r3, #1
 8006ab0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006ab2:	4b99      	ldr	r3, [pc, #612]	@ (8006d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ab6:	08db      	lsrs	r3, r3, #3
 8006ab8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	fb02 f303 	mul.w	r3, r2, r3
 8006ac2:	ee07 3a90 	vmov	s15, r3
 8006ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 8111 	beq.w	8006cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	f000 8083 	beq.w	8006be4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	f200 80a1 	bhi.w	8006c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d003      	beq.n	8006af4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d056      	beq.n	8006ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006af2:	e099      	b.n	8006c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006af4:	4b88      	ldr	r3, [pc, #544]	@ (8006d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0320 	and.w	r3, r3, #32
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d02d      	beq.n	8006b5c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b00:	4b85      	ldr	r3, [pc, #532]	@ (8006d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	08db      	lsrs	r3, r3, #3
 8006b06:	f003 0303 	and.w	r3, r3, #3
 8006b0a:	4a84      	ldr	r2, [pc, #528]	@ (8006d1c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b10:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	ee07 3a90 	vmov	s15, r3
 8006b18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	ee07 3a90 	vmov	s15, r3
 8006b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b2a:	4b7b      	ldr	r3, [pc, #492]	@ (8006d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b32:	ee07 3a90 	vmov	s15, r3
 8006b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006d20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006b5a:	e087      	b.n	8006c6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	ee07 3a90 	vmov	s15, r3
 8006b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b66:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b6e:	4b6a      	ldr	r3, [pc, #424]	@ (8006d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b76:	ee07 3a90 	vmov	s15, r3
 8006b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b82:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006d20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b9e:	e065      	b.n	8006c6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	ee07 3a90 	vmov	s15, r3
 8006ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006baa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006d28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bb2:	4b59      	ldr	r3, [pc, #356]	@ (8006d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bba:	ee07 3a90 	vmov	s15, r3
 8006bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bc6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006d20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006be2:	e043      	b.n	8006c6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	ee07 3a90 	vmov	s15, r3
 8006bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bf6:	4b48      	ldr	r3, [pc, #288]	@ (8006d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bfe:	ee07 3a90 	vmov	s15, r3
 8006c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c0a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006d20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c26:	e021      	b.n	8006c6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	ee07 3a90 	vmov	s15, r3
 8006c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c32:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006d28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c3a:	4b37      	ldr	r3, [pc, #220]	@ (8006d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c42:	ee07 3a90 	vmov	s15, r3
 8006c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c4e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006d20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c6a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8006d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c70:	0a5b      	lsrs	r3, r3, #9
 8006c72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c76:	ee07 3a90 	vmov	s15, r3
 8006c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c86:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c92:	ee17 2a90 	vmov	r2, s15
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8006d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c9e:	0c1b      	lsrs	r3, r3, #16
 8006ca0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ca4:	ee07 3a90 	vmov	s15, r3
 8006ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cc0:	ee17 2a90 	vmov	r2, s15
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006cc8:	4b13      	ldr	r3, [pc, #76]	@ (8006d18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ccc:	0e1b      	lsrs	r3, r3, #24
 8006cce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cd2:	ee07 3a90 	vmov	s15, r3
 8006cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ce2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cee:	ee17 2a90 	vmov	r2, s15
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006cf6:	e008      	b.n	8006d0a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	609a      	str	r2, [r3, #8]
}
 8006d0a:	bf00      	nop
 8006d0c:	3724      	adds	r7, #36	@ 0x24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	58024400 	.word	0x58024400
 8006d1c:	03d09000 	.word	0x03d09000
 8006d20:	46000000 	.word	0x46000000
 8006d24:	4c742400 	.word	0x4c742400
 8006d28:	4a742400 	.word	0x4a742400
 8006d2c:	4af42400 	.word	0x4af42400

08006d30 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b089      	sub	sp, #36	@ 0x24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d38:	4ba1      	ldr	r3, [pc, #644]	@ (8006fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d3c:	f003 0303 	and.w	r3, r3, #3
 8006d40:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006d42:	4b9f      	ldr	r3, [pc, #636]	@ (8006fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d46:	0d1b      	lsrs	r3, r3, #20
 8006d48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d4c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006d4e:	4b9c      	ldr	r3, [pc, #624]	@ (8006fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d52:	0a1b      	lsrs	r3, r3, #8
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006d5a:	4b99      	ldr	r3, [pc, #612]	@ (8006fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d5e:	08db      	lsrs	r3, r3, #3
 8006d60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	fb02 f303 	mul.w	r3, r2, r3
 8006d6a:	ee07 3a90 	vmov	s15, r3
 8006d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 8111 	beq.w	8006fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	f000 8083 	beq.w	8006e8c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	f200 80a1 	bhi.w	8006ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d003      	beq.n	8006d9c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d056      	beq.n	8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006d9a:	e099      	b.n	8006ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d9c:	4b88      	ldr	r3, [pc, #544]	@ (8006fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0320 	and.w	r3, r3, #32
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d02d      	beq.n	8006e04 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006da8:	4b85      	ldr	r3, [pc, #532]	@ (8006fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	08db      	lsrs	r3, r3, #3
 8006dae:	f003 0303 	and.w	r3, r3, #3
 8006db2:	4a84      	ldr	r2, [pc, #528]	@ (8006fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006db4:	fa22 f303 	lsr.w	r3, r2, r3
 8006db8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	ee07 3a90 	vmov	s15, r3
 8006dc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	ee07 3a90 	vmov	s15, r3
 8006dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dd2:	4b7b      	ldr	r3, [pc, #492]	@ (8006fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dda:	ee07 3a90 	vmov	s15, r3
 8006dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006de2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006de6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006df2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dfe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006e02:	e087      	b.n	8006f14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	ee07 3a90 	vmov	s15, r3
 8006e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e0e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e16:	4b6a      	ldr	r3, [pc, #424]	@ (8006fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e1e:	ee07 3a90 	vmov	s15, r3
 8006e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e26:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e2a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e46:	e065      	b.n	8006f14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	ee07 3a90 	vmov	s15, r3
 8006e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e52:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e5a:	4b59      	ldr	r3, [pc, #356]	@ (8006fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e62:	ee07 3a90 	vmov	s15, r3
 8006e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e6e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e8a:	e043      	b.n	8006f14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	ee07 3a90 	vmov	s15, r3
 8006e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e96:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e9e:	4b48      	ldr	r3, [pc, #288]	@ (8006fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ea6:	ee07 3a90 	vmov	s15, r3
 8006eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eae:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eb2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ebe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ece:	e021      	b.n	8006f14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	ee07 3a90 	vmov	s15, r3
 8006ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eda:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ee2:	4b37      	ldr	r3, [pc, #220]	@ (8006fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eea:	ee07 3a90 	vmov	s15, r3
 8006eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ef2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ef6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f12:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006f14:	4b2a      	ldr	r3, [pc, #168]	@ (8006fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f18:	0a5b      	lsrs	r3, r3, #9
 8006f1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f1e:	ee07 3a90 	vmov	s15, r3
 8006f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f3a:	ee17 2a90 	vmov	r2, s15
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006f42:	4b1f      	ldr	r3, [pc, #124]	@ (8006fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f46:	0c1b      	lsrs	r3, r3, #16
 8006f48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f4c:	ee07 3a90 	vmov	s15, r3
 8006f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f68:	ee17 2a90 	vmov	r2, s15
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006f70:	4b13      	ldr	r3, [pc, #76]	@ (8006fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f74:	0e1b      	lsrs	r3, r3, #24
 8006f76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f7a:	ee07 3a90 	vmov	s15, r3
 8006f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f96:	ee17 2a90 	vmov	r2, s15
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006f9e:	e008      	b.n	8006fb2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	609a      	str	r2, [r3, #8]
}
 8006fb2:	bf00      	nop
 8006fb4:	3724      	adds	r7, #36	@ 0x24
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	58024400 	.word	0x58024400
 8006fc4:	03d09000 	.word	0x03d09000
 8006fc8:	46000000 	.word	0x46000000
 8006fcc:	4c742400 	.word	0x4c742400
 8006fd0:	4a742400 	.word	0x4a742400
 8006fd4:	4af42400 	.word	0x4af42400

08006fd8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006fe6:	4b53      	ldr	r3, [pc, #332]	@ (8007134 <RCCEx_PLL2_Config+0x15c>)
 8006fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fea:	f003 0303 	and.w	r3, r3, #3
 8006fee:	2b03      	cmp	r3, #3
 8006ff0:	d101      	bne.n	8006ff6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e099      	b.n	800712a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006ff6:	4b4f      	ldr	r3, [pc, #316]	@ (8007134 <RCCEx_PLL2_Config+0x15c>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a4e      	ldr	r2, [pc, #312]	@ (8007134 <RCCEx_PLL2_Config+0x15c>)
 8006ffc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007000:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007002:	f7fa fb5f 	bl	80016c4 <HAL_GetTick>
 8007006:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007008:	e008      	b.n	800701c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800700a:	f7fa fb5b 	bl	80016c4 <HAL_GetTick>
 800700e:	4602      	mov	r2, r0
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	2b02      	cmp	r3, #2
 8007016:	d901      	bls.n	800701c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007018:	2303      	movs	r3, #3
 800701a:	e086      	b.n	800712a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800701c:	4b45      	ldr	r3, [pc, #276]	@ (8007134 <RCCEx_PLL2_Config+0x15c>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1f0      	bne.n	800700a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007028:	4b42      	ldr	r3, [pc, #264]	@ (8007134 <RCCEx_PLL2_Config+0x15c>)
 800702a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800702c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	031b      	lsls	r3, r3, #12
 8007036:	493f      	ldr	r1, [pc, #252]	@ (8007134 <RCCEx_PLL2_Config+0x15c>)
 8007038:	4313      	orrs	r3, r2
 800703a:	628b      	str	r3, [r1, #40]	@ 0x28
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	3b01      	subs	r3, #1
 8007042:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	3b01      	subs	r3, #1
 800704c:	025b      	lsls	r3, r3, #9
 800704e:	b29b      	uxth	r3, r3
 8007050:	431a      	orrs	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	3b01      	subs	r3, #1
 8007058:	041b      	lsls	r3, r3, #16
 800705a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800705e:	431a      	orrs	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	3b01      	subs	r3, #1
 8007066:	061b      	lsls	r3, r3, #24
 8007068:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800706c:	4931      	ldr	r1, [pc, #196]	@ (8007134 <RCCEx_PLL2_Config+0x15c>)
 800706e:	4313      	orrs	r3, r2
 8007070:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007072:	4b30      	ldr	r3, [pc, #192]	@ (8007134 <RCCEx_PLL2_Config+0x15c>)
 8007074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007076:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	492d      	ldr	r1, [pc, #180]	@ (8007134 <RCCEx_PLL2_Config+0x15c>)
 8007080:	4313      	orrs	r3, r2
 8007082:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007084:	4b2b      	ldr	r3, [pc, #172]	@ (8007134 <RCCEx_PLL2_Config+0x15c>)
 8007086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007088:	f023 0220 	bic.w	r2, r3, #32
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	4928      	ldr	r1, [pc, #160]	@ (8007134 <RCCEx_PLL2_Config+0x15c>)
 8007092:	4313      	orrs	r3, r2
 8007094:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007096:	4b27      	ldr	r3, [pc, #156]	@ (8007134 <RCCEx_PLL2_Config+0x15c>)
 8007098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709a:	4a26      	ldr	r2, [pc, #152]	@ (8007134 <RCCEx_PLL2_Config+0x15c>)
 800709c:	f023 0310 	bic.w	r3, r3, #16
 80070a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80070a2:	4b24      	ldr	r3, [pc, #144]	@ (8007134 <RCCEx_PLL2_Config+0x15c>)
 80070a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070a6:	4b24      	ldr	r3, [pc, #144]	@ (8007138 <RCCEx_PLL2_Config+0x160>)
 80070a8:	4013      	ands	r3, r2
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	69d2      	ldr	r2, [r2, #28]
 80070ae:	00d2      	lsls	r2, r2, #3
 80070b0:	4920      	ldr	r1, [pc, #128]	@ (8007134 <RCCEx_PLL2_Config+0x15c>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80070b6:	4b1f      	ldr	r3, [pc, #124]	@ (8007134 <RCCEx_PLL2_Config+0x15c>)
 80070b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ba:	4a1e      	ldr	r2, [pc, #120]	@ (8007134 <RCCEx_PLL2_Config+0x15c>)
 80070bc:	f043 0310 	orr.w	r3, r3, #16
 80070c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d106      	bne.n	80070d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80070c8:	4b1a      	ldr	r3, [pc, #104]	@ (8007134 <RCCEx_PLL2_Config+0x15c>)
 80070ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070cc:	4a19      	ldr	r2, [pc, #100]	@ (8007134 <RCCEx_PLL2_Config+0x15c>)
 80070ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80070d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80070d4:	e00f      	b.n	80070f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d106      	bne.n	80070ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80070dc:	4b15      	ldr	r3, [pc, #84]	@ (8007134 <RCCEx_PLL2_Config+0x15c>)
 80070de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e0:	4a14      	ldr	r2, [pc, #80]	@ (8007134 <RCCEx_PLL2_Config+0x15c>)
 80070e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80070e8:	e005      	b.n	80070f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80070ea:	4b12      	ldr	r3, [pc, #72]	@ (8007134 <RCCEx_PLL2_Config+0x15c>)
 80070ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ee:	4a11      	ldr	r2, [pc, #68]	@ (8007134 <RCCEx_PLL2_Config+0x15c>)
 80070f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80070f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80070f6:	4b0f      	ldr	r3, [pc, #60]	@ (8007134 <RCCEx_PLL2_Config+0x15c>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a0e      	ldr	r2, [pc, #56]	@ (8007134 <RCCEx_PLL2_Config+0x15c>)
 80070fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007100:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007102:	f7fa fadf 	bl	80016c4 <HAL_GetTick>
 8007106:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007108:	e008      	b.n	800711c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800710a:	f7fa fadb 	bl	80016c4 <HAL_GetTick>
 800710e:	4602      	mov	r2, r0
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	2b02      	cmp	r3, #2
 8007116:	d901      	bls.n	800711c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e006      	b.n	800712a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800711c:	4b05      	ldr	r3, [pc, #20]	@ (8007134 <RCCEx_PLL2_Config+0x15c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d0f0      	beq.n	800710a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007128:	7bfb      	ldrb	r3, [r7, #15]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	58024400 	.word	0x58024400
 8007138:	ffff0007 	.word	0xffff0007

0800713c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800714a:	4b53      	ldr	r3, [pc, #332]	@ (8007298 <RCCEx_PLL3_Config+0x15c>)
 800714c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800714e:	f003 0303 	and.w	r3, r3, #3
 8007152:	2b03      	cmp	r3, #3
 8007154:	d101      	bne.n	800715a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e099      	b.n	800728e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800715a:	4b4f      	ldr	r3, [pc, #316]	@ (8007298 <RCCEx_PLL3_Config+0x15c>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a4e      	ldr	r2, [pc, #312]	@ (8007298 <RCCEx_PLL3_Config+0x15c>)
 8007160:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007164:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007166:	f7fa faad 	bl	80016c4 <HAL_GetTick>
 800716a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800716c:	e008      	b.n	8007180 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800716e:	f7fa faa9 	bl	80016c4 <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	2b02      	cmp	r3, #2
 800717a:	d901      	bls.n	8007180 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e086      	b.n	800728e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007180:	4b45      	ldr	r3, [pc, #276]	@ (8007298 <RCCEx_PLL3_Config+0x15c>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1f0      	bne.n	800716e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800718c:	4b42      	ldr	r3, [pc, #264]	@ (8007298 <RCCEx_PLL3_Config+0x15c>)
 800718e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007190:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	051b      	lsls	r3, r3, #20
 800719a:	493f      	ldr	r1, [pc, #252]	@ (8007298 <RCCEx_PLL3_Config+0x15c>)
 800719c:	4313      	orrs	r3, r2
 800719e:	628b      	str	r3, [r1, #40]	@ 0x28
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	3b01      	subs	r3, #1
 80071a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	3b01      	subs	r3, #1
 80071b0:	025b      	lsls	r3, r3, #9
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	431a      	orrs	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	3b01      	subs	r3, #1
 80071bc:	041b      	lsls	r3, r3, #16
 80071be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80071c2:	431a      	orrs	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	3b01      	subs	r3, #1
 80071ca:	061b      	lsls	r3, r3, #24
 80071cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80071d0:	4931      	ldr	r1, [pc, #196]	@ (8007298 <RCCEx_PLL3_Config+0x15c>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80071d6:	4b30      	ldr	r3, [pc, #192]	@ (8007298 <RCCEx_PLL3_Config+0x15c>)
 80071d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	492d      	ldr	r1, [pc, #180]	@ (8007298 <RCCEx_PLL3_Config+0x15c>)
 80071e4:	4313      	orrs	r3, r2
 80071e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80071e8:	4b2b      	ldr	r3, [pc, #172]	@ (8007298 <RCCEx_PLL3_Config+0x15c>)
 80071ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	4928      	ldr	r1, [pc, #160]	@ (8007298 <RCCEx_PLL3_Config+0x15c>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80071fa:	4b27      	ldr	r3, [pc, #156]	@ (8007298 <RCCEx_PLL3_Config+0x15c>)
 80071fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071fe:	4a26      	ldr	r2, [pc, #152]	@ (8007298 <RCCEx_PLL3_Config+0x15c>)
 8007200:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007204:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007206:	4b24      	ldr	r3, [pc, #144]	@ (8007298 <RCCEx_PLL3_Config+0x15c>)
 8007208:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800720a:	4b24      	ldr	r3, [pc, #144]	@ (800729c <RCCEx_PLL3_Config+0x160>)
 800720c:	4013      	ands	r3, r2
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	69d2      	ldr	r2, [r2, #28]
 8007212:	00d2      	lsls	r2, r2, #3
 8007214:	4920      	ldr	r1, [pc, #128]	@ (8007298 <RCCEx_PLL3_Config+0x15c>)
 8007216:	4313      	orrs	r3, r2
 8007218:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800721a:	4b1f      	ldr	r3, [pc, #124]	@ (8007298 <RCCEx_PLL3_Config+0x15c>)
 800721c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721e:	4a1e      	ldr	r2, [pc, #120]	@ (8007298 <RCCEx_PLL3_Config+0x15c>)
 8007220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007224:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d106      	bne.n	800723a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800722c:	4b1a      	ldr	r3, [pc, #104]	@ (8007298 <RCCEx_PLL3_Config+0x15c>)
 800722e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007230:	4a19      	ldr	r2, [pc, #100]	@ (8007298 <RCCEx_PLL3_Config+0x15c>)
 8007232:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007236:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007238:	e00f      	b.n	800725a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d106      	bne.n	800724e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007240:	4b15      	ldr	r3, [pc, #84]	@ (8007298 <RCCEx_PLL3_Config+0x15c>)
 8007242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007244:	4a14      	ldr	r2, [pc, #80]	@ (8007298 <RCCEx_PLL3_Config+0x15c>)
 8007246:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800724a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800724c:	e005      	b.n	800725a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800724e:	4b12      	ldr	r3, [pc, #72]	@ (8007298 <RCCEx_PLL3_Config+0x15c>)
 8007250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007252:	4a11      	ldr	r2, [pc, #68]	@ (8007298 <RCCEx_PLL3_Config+0x15c>)
 8007254:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007258:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800725a:	4b0f      	ldr	r3, [pc, #60]	@ (8007298 <RCCEx_PLL3_Config+0x15c>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a0e      	ldr	r2, [pc, #56]	@ (8007298 <RCCEx_PLL3_Config+0x15c>)
 8007260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007264:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007266:	f7fa fa2d 	bl	80016c4 <HAL_GetTick>
 800726a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800726c:	e008      	b.n	8007280 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800726e:	f7fa fa29 	bl	80016c4 <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	2b02      	cmp	r3, #2
 800727a:	d901      	bls.n	8007280 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e006      	b.n	800728e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007280:	4b05      	ldr	r3, [pc, #20]	@ (8007298 <RCCEx_PLL3_Config+0x15c>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d0f0      	beq.n	800726e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800728c:	7bfb      	ldrb	r3, [r7, #15]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	58024400 	.word	0x58024400
 800729c:	ffff0007 	.word	0xffff0007

080072a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d101      	bne.n	80072b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e042      	b.n	8007338 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d106      	bne.n	80072ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f7f9 ff65 	bl	8001194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2224      	movs	r2, #36	@ 0x24
 80072ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f022 0201 	bic.w	r2, r2, #1
 80072e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d002      	beq.n	80072f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 ff14 	bl	8008118 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f9a9 	bl	8007648 <UART_SetConfig>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d101      	bne.n	8007300 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e01b      	b.n	8007338 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800730e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689a      	ldr	r2, [r3, #8]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800731e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f042 0201 	orr.w	r2, r2, #1
 800732e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 ff93 	bl	800825c <UART_CheckIdleState>
 8007336:	4603      	mov	r3, r0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b08a      	sub	sp, #40	@ 0x28
 8007344:	af02      	add	r7, sp, #8
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	603b      	str	r3, [r7, #0]
 800734c:	4613      	mov	r3, r2
 800734e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007356:	2b20      	cmp	r3, #32
 8007358:	d17b      	bne.n	8007452 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <HAL_UART_Transmit+0x26>
 8007360:	88fb      	ldrh	r3, [r7, #6]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e074      	b.n	8007454 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2221      	movs	r2, #33	@ 0x21
 8007376:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800737a:	f7fa f9a3 	bl	80016c4 <HAL_GetTick>
 800737e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	88fa      	ldrh	r2, [r7, #6]
 8007384:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	88fa      	ldrh	r2, [r7, #6]
 800738c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007398:	d108      	bne.n	80073ac <HAL_UART_Transmit+0x6c>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d104      	bne.n	80073ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80073a2:	2300      	movs	r3, #0
 80073a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	61bb      	str	r3, [r7, #24]
 80073aa:	e003      	b.n	80073b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073b0:	2300      	movs	r3, #0
 80073b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80073b4:	e030      	b.n	8007418 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	9300      	str	r3, [sp, #0]
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	2200      	movs	r2, #0
 80073be:	2180      	movs	r1, #128	@ 0x80
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f000 fff5 	bl	80083b0 <UART_WaitOnFlagUntilTimeout>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d005      	beq.n	80073d8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2220      	movs	r2, #32
 80073d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e03d      	b.n	8007454 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10b      	bne.n	80073f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	881b      	ldrh	r3, [r3, #0]
 80073e2:	461a      	mov	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	3302      	adds	r3, #2
 80073f2:	61bb      	str	r3, [r7, #24]
 80073f4:	e007      	b.n	8007406 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	781a      	ldrb	r2, [r3, #0]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	3301      	adds	r3, #1
 8007404:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800740c:	b29b      	uxth	r3, r3
 800740e:	3b01      	subs	r3, #1
 8007410:	b29a      	uxth	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800741e:	b29b      	uxth	r3, r3
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1c8      	bne.n	80073b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	2200      	movs	r2, #0
 800742c:	2140      	movs	r1, #64	@ 0x40
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f000 ffbe 	bl	80083b0 <UART_WaitOnFlagUntilTimeout>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d005      	beq.n	8007446 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2220      	movs	r2, #32
 800743e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e006      	b.n	8007454 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2220      	movs	r2, #32
 800744a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	e000      	b.n	8007454 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007452:	2302      	movs	r3, #2
  }
}
 8007454:	4618      	mov	r0, r3
 8007456:	3720      	adds	r7, #32
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800745c:	b480      	push	{r7}
 800745e:	b091      	sub	sp, #68	@ 0x44
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	4613      	mov	r3, r2
 8007468:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007470:	2b20      	cmp	r3, #32
 8007472:	d178      	bne.n	8007566 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d002      	beq.n	8007480 <HAL_UART_Transmit_IT+0x24>
 800747a:	88fb      	ldrh	r3, [r7, #6]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d101      	bne.n	8007484 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e071      	b.n	8007568 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	88fa      	ldrh	r2, [r7, #6]
 800748e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	88fa      	ldrh	r2, [r7, #6]
 8007496:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2221      	movs	r2, #33	@ 0x21
 80074ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074b8:	d12a      	bne.n	8007510 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074c2:	d107      	bne.n	80074d4 <HAL_UART_Transmit_IT+0x78>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d103      	bne.n	80074d4 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	4a29      	ldr	r2, [pc, #164]	@ (8007574 <HAL_UART_Transmit_IT+0x118>)
 80074d0:	679a      	str	r2, [r3, #120]	@ 0x78
 80074d2:	e002      	b.n	80074da <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	4a28      	ldr	r2, [pc, #160]	@ (8007578 <HAL_UART_Transmit_IT+0x11c>)
 80074d8:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	3308      	adds	r3, #8
 80074e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e4:	e853 3f00 	ldrex	r3, [r3]
 80074e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80074f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	3308      	adds	r3, #8
 80074f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80074fa:	637a      	str	r2, [r7, #52]	@ 0x34
 80074fc:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007500:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007502:	e841 2300 	strex	r3, r2, [r1]
 8007506:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1e5      	bne.n	80074da <HAL_UART_Transmit_IT+0x7e>
 800750e:	e028      	b.n	8007562 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007518:	d107      	bne.n	800752a <HAL_UART_Transmit_IT+0xce>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d103      	bne.n	800752a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	4a15      	ldr	r2, [pc, #84]	@ (800757c <HAL_UART_Transmit_IT+0x120>)
 8007526:	679a      	str	r2, [r3, #120]	@ 0x78
 8007528:	e002      	b.n	8007530 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	4a14      	ldr	r2, [pc, #80]	@ (8007580 <HAL_UART_Transmit_IT+0x124>)
 800752e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	e853 3f00 	ldrex	r3, [r3]
 800753c:	613b      	str	r3, [r7, #16]
   return(result);
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007544:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	461a      	mov	r2, r3
 800754c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800754e:	623b      	str	r3, [r7, #32]
 8007550:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007552:	69f9      	ldr	r1, [r7, #28]
 8007554:	6a3a      	ldr	r2, [r7, #32]
 8007556:	e841 2300 	strex	r3, r2, [r1]
 800755a:	61bb      	str	r3, [r7, #24]
   return(result);
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1e6      	bne.n	8007530 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8007562:	2300      	movs	r3, #0
 8007564:	e000      	b.n	8007568 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007566:	2302      	movs	r3, #2
  }
}
 8007568:	4618      	mov	r0, r3
 800756a:	3744      	adds	r7, #68	@ 0x44
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr
 8007574:	080089f7 	.word	0x080089f7
 8007578:	08008917 	.word	0x08008917
 800757c:	08008855 	.word	0x08008855
 8007580:	0800879d 	.word	0x0800879d

08007584 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b08a      	sub	sp, #40	@ 0x28
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	4613      	mov	r3, r2
 8007590:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007598:	2b20      	cmp	r3, #32
 800759a:	d137      	bne.n	800760c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d002      	beq.n	80075a8 <HAL_UART_Receive_IT+0x24>
 80075a2:	88fb      	ldrh	r3, [r7, #6]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d101      	bne.n	80075ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e030      	b.n	800760e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a18      	ldr	r2, [pc, #96]	@ (8007618 <HAL_UART_Receive_IT+0x94>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d01f      	beq.n	80075fc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d018      	beq.n	80075fc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	e853 3f00 	ldrex	r3, [r3]
 80075d6:	613b      	str	r3, [r7, #16]
   return(result);
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80075de:	627b      	str	r3, [r7, #36]	@ 0x24
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	461a      	mov	r2, r3
 80075e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e8:	623b      	str	r3, [r7, #32]
 80075ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ec:	69f9      	ldr	r1, [r7, #28]
 80075ee:	6a3a      	ldr	r2, [r7, #32]
 80075f0:	e841 2300 	strex	r3, r2, [r1]
 80075f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1e6      	bne.n	80075ca <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80075fc:	88fb      	ldrh	r3, [r7, #6]
 80075fe:	461a      	mov	r2, r3
 8007600:	68b9      	ldr	r1, [r7, #8]
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f000 ff42 	bl	800848c <UART_Start_Receive_IT>
 8007608:	4603      	mov	r3, r0
 800760a:	e000      	b.n	800760e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800760c:	2302      	movs	r3, #2
  }
}
 800760e:	4618      	mov	r0, r3
 8007610:	3728      	adds	r7, #40	@ 0x28
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	58000c00 	.word	0x58000c00

0800761c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	460b      	mov	r3, r1
 800763a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800764c:	b092      	sub	sp, #72	@ 0x48
 800764e:	af00      	add	r7, sp, #0
 8007650:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	689a      	ldr	r2, [r3, #8]
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	431a      	orrs	r2, r3
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	431a      	orrs	r2, r3
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	69db      	ldr	r3, [r3, #28]
 800766c:	4313      	orrs	r3, r2
 800766e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	4bbe      	ldr	r3, [pc, #760]	@ (8007970 <UART_SetConfig+0x328>)
 8007678:	4013      	ands	r3, r2
 800767a:	697a      	ldr	r2, [r7, #20]
 800767c:	6812      	ldr	r2, [r2, #0]
 800767e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007680:	430b      	orrs	r3, r1
 8007682:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	68da      	ldr	r2, [r3, #12]
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	430a      	orrs	r2, r1
 8007698:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4ab3      	ldr	r2, [pc, #716]	@ (8007974 <UART_SetConfig+0x32c>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d004      	beq.n	80076b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076b0:	4313      	orrs	r3, r2
 80076b2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689a      	ldr	r2, [r3, #8]
 80076ba:	4baf      	ldr	r3, [pc, #700]	@ (8007978 <UART_SetConfig+0x330>)
 80076bc:	4013      	ands	r3, r2
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	6812      	ldr	r2, [r2, #0]
 80076c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80076c4:	430b      	orrs	r3, r1
 80076c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ce:	f023 010f 	bic.w	r1, r3, #15
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	430a      	orrs	r2, r1
 80076dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4aa6      	ldr	r2, [pc, #664]	@ (800797c <UART_SetConfig+0x334>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d177      	bne.n	80077d8 <UART_SetConfig+0x190>
 80076e8:	4ba5      	ldr	r3, [pc, #660]	@ (8007980 <UART_SetConfig+0x338>)
 80076ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80076f0:	2b28      	cmp	r3, #40	@ 0x28
 80076f2:	d86d      	bhi.n	80077d0 <UART_SetConfig+0x188>
 80076f4:	a201      	add	r2, pc, #4	@ (adr r2, 80076fc <UART_SetConfig+0xb4>)
 80076f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fa:	bf00      	nop
 80076fc:	080077a1 	.word	0x080077a1
 8007700:	080077d1 	.word	0x080077d1
 8007704:	080077d1 	.word	0x080077d1
 8007708:	080077d1 	.word	0x080077d1
 800770c:	080077d1 	.word	0x080077d1
 8007710:	080077d1 	.word	0x080077d1
 8007714:	080077d1 	.word	0x080077d1
 8007718:	080077d1 	.word	0x080077d1
 800771c:	080077a9 	.word	0x080077a9
 8007720:	080077d1 	.word	0x080077d1
 8007724:	080077d1 	.word	0x080077d1
 8007728:	080077d1 	.word	0x080077d1
 800772c:	080077d1 	.word	0x080077d1
 8007730:	080077d1 	.word	0x080077d1
 8007734:	080077d1 	.word	0x080077d1
 8007738:	080077d1 	.word	0x080077d1
 800773c:	080077b1 	.word	0x080077b1
 8007740:	080077d1 	.word	0x080077d1
 8007744:	080077d1 	.word	0x080077d1
 8007748:	080077d1 	.word	0x080077d1
 800774c:	080077d1 	.word	0x080077d1
 8007750:	080077d1 	.word	0x080077d1
 8007754:	080077d1 	.word	0x080077d1
 8007758:	080077d1 	.word	0x080077d1
 800775c:	080077b9 	.word	0x080077b9
 8007760:	080077d1 	.word	0x080077d1
 8007764:	080077d1 	.word	0x080077d1
 8007768:	080077d1 	.word	0x080077d1
 800776c:	080077d1 	.word	0x080077d1
 8007770:	080077d1 	.word	0x080077d1
 8007774:	080077d1 	.word	0x080077d1
 8007778:	080077d1 	.word	0x080077d1
 800777c:	080077c1 	.word	0x080077c1
 8007780:	080077d1 	.word	0x080077d1
 8007784:	080077d1 	.word	0x080077d1
 8007788:	080077d1 	.word	0x080077d1
 800778c:	080077d1 	.word	0x080077d1
 8007790:	080077d1 	.word	0x080077d1
 8007794:	080077d1 	.word	0x080077d1
 8007798:	080077d1 	.word	0x080077d1
 800779c:	080077c9 	.word	0x080077c9
 80077a0:	2301      	movs	r3, #1
 80077a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077a6:	e222      	b.n	8007bee <UART_SetConfig+0x5a6>
 80077a8:	2304      	movs	r3, #4
 80077aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ae:	e21e      	b.n	8007bee <UART_SetConfig+0x5a6>
 80077b0:	2308      	movs	r3, #8
 80077b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077b6:	e21a      	b.n	8007bee <UART_SetConfig+0x5a6>
 80077b8:	2310      	movs	r3, #16
 80077ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077be:	e216      	b.n	8007bee <UART_SetConfig+0x5a6>
 80077c0:	2320      	movs	r3, #32
 80077c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077c6:	e212      	b.n	8007bee <UART_SetConfig+0x5a6>
 80077c8:	2340      	movs	r3, #64	@ 0x40
 80077ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ce:	e20e      	b.n	8007bee <UART_SetConfig+0x5a6>
 80077d0:	2380      	movs	r3, #128	@ 0x80
 80077d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077d6:	e20a      	b.n	8007bee <UART_SetConfig+0x5a6>
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a69      	ldr	r2, [pc, #420]	@ (8007984 <UART_SetConfig+0x33c>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d130      	bne.n	8007844 <UART_SetConfig+0x1fc>
 80077e2:	4b67      	ldr	r3, [pc, #412]	@ (8007980 <UART_SetConfig+0x338>)
 80077e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077e6:	f003 0307 	and.w	r3, r3, #7
 80077ea:	2b05      	cmp	r3, #5
 80077ec:	d826      	bhi.n	800783c <UART_SetConfig+0x1f4>
 80077ee:	a201      	add	r2, pc, #4	@ (adr r2, 80077f4 <UART_SetConfig+0x1ac>)
 80077f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f4:	0800780d 	.word	0x0800780d
 80077f8:	08007815 	.word	0x08007815
 80077fc:	0800781d 	.word	0x0800781d
 8007800:	08007825 	.word	0x08007825
 8007804:	0800782d 	.word	0x0800782d
 8007808:	08007835 	.word	0x08007835
 800780c:	2300      	movs	r3, #0
 800780e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007812:	e1ec      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007814:	2304      	movs	r3, #4
 8007816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800781a:	e1e8      	b.n	8007bee <UART_SetConfig+0x5a6>
 800781c:	2308      	movs	r3, #8
 800781e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007822:	e1e4      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007824:	2310      	movs	r3, #16
 8007826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800782a:	e1e0      	b.n	8007bee <UART_SetConfig+0x5a6>
 800782c:	2320      	movs	r3, #32
 800782e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007832:	e1dc      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007834:	2340      	movs	r3, #64	@ 0x40
 8007836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800783a:	e1d8      	b.n	8007bee <UART_SetConfig+0x5a6>
 800783c:	2380      	movs	r3, #128	@ 0x80
 800783e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007842:	e1d4      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a4f      	ldr	r2, [pc, #316]	@ (8007988 <UART_SetConfig+0x340>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d130      	bne.n	80078b0 <UART_SetConfig+0x268>
 800784e:	4b4c      	ldr	r3, [pc, #304]	@ (8007980 <UART_SetConfig+0x338>)
 8007850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007852:	f003 0307 	and.w	r3, r3, #7
 8007856:	2b05      	cmp	r3, #5
 8007858:	d826      	bhi.n	80078a8 <UART_SetConfig+0x260>
 800785a:	a201      	add	r2, pc, #4	@ (adr r2, 8007860 <UART_SetConfig+0x218>)
 800785c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007860:	08007879 	.word	0x08007879
 8007864:	08007881 	.word	0x08007881
 8007868:	08007889 	.word	0x08007889
 800786c:	08007891 	.word	0x08007891
 8007870:	08007899 	.word	0x08007899
 8007874:	080078a1 	.word	0x080078a1
 8007878:	2300      	movs	r3, #0
 800787a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800787e:	e1b6      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007880:	2304      	movs	r3, #4
 8007882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007886:	e1b2      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007888:	2308      	movs	r3, #8
 800788a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800788e:	e1ae      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007890:	2310      	movs	r3, #16
 8007892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007896:	e1aa      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007898:	2320      	movs	r3, #32
 800789a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800789e:	e1a6      	b.n	8007bee <UART_SetConfig+0x5a6>
 80078a0:	2340      	movs	r3, #64	@ 0x40
 80078a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078a6:	e1a2      	b.n	8007bee <UART_SetConfig+0x5a6>
 80078a8:	2380      	movs	r3, #128	@ 0x80
 80078aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ae:	e19e      	b.n	8007bee <UART_SetConfig+0x5a6>
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a35      	ldr	r2, [pc, #212]	@ (800798c <UART_SetConfig+0x344>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d130      	bne.n	800791c <UART_SetConfig+0x2d4>
 80078ba:	4b31      	ldr	r3, [pc, #196]	@ (8007980 <UART_SetConfig+0x338>)
 80078bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078be:	f003 0307 	and.w	r3, r3, #7
 80078c2:	2b05      	cmp	r3, #5
 80078c4:	d826      	bhi.n	8007914 <UART_SetConfig+0x2cc>
 80078c6:	a201      	add	r2, pc, #4	@ (adr r2, 80078cc <UART_SetConfig+0x284>)
 80078c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078cc:	080078e5 	.word	0x080078e5
 80078d0:	080078ed 	.word	0x080078ed
 80078d4:	080078f5 	.word	0x080078f5
 80078d8:	080078fd 	.word	0x080078fd
 80078dc:	08007905 	.word	0x08007905
 80078e0:	0800790d 	.word	0x0800790d
 80078e4:	2300      	movs	r3, #0
 80078e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ea:	e180      	b.n	8007bee <UART_SetConfig+0x5a6>
 80078ec:	2304      	movs	r3, #4
 80078ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078f2:	e17c      	b.n	8007bee <UART_SetConfig+0x5a6>
 80078f4:	2308      	movs	r3, #8
 80078f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078fa:	e178      	b.n	8007bee <UART_SetConfig+0x5a6>
 80078fc:	2310      	movs	r3, #16
 80078fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007902:	e174      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007904:	2320      	movs	r3, #32
 8007906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800790a:	e170      	b.n	8007bee <UART_SetConfig+0x5a6>
 800790c:	2340      	movs	r3, #64	@ 0x40
 800790e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007912:	e16c      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007914:	2380      	movs	r3, #128	@ 0x80
 8007916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791a:	e168      	b.n	8007bee <UART_SetConfig+0x5a6>
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a1b      	ldr	r2, [pc, #108]	@ (8007990 <UART_SetConfig+0x348>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d142      	bne.n	80079ac <UART_SetConfig+0x364>
 8007926:	4b16      	ldr	r3, [pc, #88]	@ (8007980 <UART_SetConfig+0x338>)
 8007928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800792a:	f003 0307 	and.w	r3, r3, #7
 800792e:	2b05      	cmp	r3, #5
 8007930:	d838      	bhi.n	80079a4 <UART_SetConfig+0x35c>
 8007932:	a201      	add	r2, pc, #4	@ (adr r2, 8007938 <UART_SetConfig+0x2f0>)
 8007934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007938:	08007951 	.word	0x08007951
 800793c:	08007959 	.word	0x08007959
 8007940:	08007961 	.word	0x08007961
 8007944:	08007969 	.word	0x08007969
 8007948:	08007995 	.word	0x08007995
 800794c:	0800799d 	.word	0x0800799d
 8007950:	2300      	movs	r3, #0
 8007952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007956:	e14a      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007958:	2304      	movs	r3, #4
 800795a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800795e:	e146      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007960:	2308      	movs	r3, #8
 8007962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007966:	e142      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007968:	2310      	movs	r3, #16
 800796a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800796e:	e13e      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007970:	cfff69f3 	.word	0xcfff69f3
 8007974:	58000c00 	.word	0x58000c00
 8007978:	11fff4ff 	.word	0x11fff4ff
 800797c:	40011000 	.word	0x40011000
 8007980:	58024400 	.word	0x58024400
 8007984:	40004400 	.word	0x40004400
 8007988:	40004800 	.word	0x40004800
 800798c:	40004c00 	.word	0x40004c00
 8007990:	40005000 	.word	0x40005000
 8007994:	2320      	movs	r3, #32
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800799a:	e128      	b.n	8007bee <UART_SetConfig+0x5a6>
 800799c:	2340      	movs	r3, #64	@ 0x40
 800799e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079a2:	e124      	b.n	8007bee <UART_SetConfig+0x5a6>
 80079a4:	2380      	movs	r3, #128	@ 0x80
 80079a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079aa:	e120      	b.n	8007bee <UART_SetConfig+0x5a6>
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4acb      	ldr	r2, [pc, #812]	@ (8007ce0 <UART_SetConfig+0x698>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d176      	bne.n	8007aa4 <UART_SetConfig+0x45c>
 80079b6:	4bcb      	ldr	r3, [pc, #812]	@ (8007ce4 <UART_SetConfig+0x69c>)
 80079b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80079be:	2b28      	cmp	r3, #40	@ 0x28
 80079c0:	d86c      	bhi.n	8007a9c <UART_SetConfig+0x454>
 80079c2:	a201      	add	r2, pc, #4	@ (adr r2, 80079c8 <UART_SetConfig+0x380>)
 80079c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c8:	08007a6d 	.word	0x08007a6d
 80079cc:	08007a9d 	.word	0x08007a9d
 80079d0:	08007a9d 	.word	0x08007a9d
 80079d4:	08007a9d 	.word	0x08007a9d
 80079d8:	08007a9d 	.word	0x08007a9d
 80079dc:	08007a9d 	.word	0x08007a9d
 80079e0:	08007a9d 	.word	0x08007a9d
 80079e4:	08007a9d 	.word	0x08007a9d
 80079e8:	08007a75 	.word	0x08007a75
 80079ec:	08007a9d 	.word	0x08007a9d
 80079f0:	08007a9d 	.word	0x08007a9d
 80079f4:	08007a9d 	.word	0x08007a9d
 80079f8:	08007a9d 	.word	0x08007a9d
 80079fc:	08007a9d 	.word	0x08007a9d
 8007a00:	08007a9d 	.word	0x08007a9d
 8007a04:	08007a9d 	.word	0x08007a9d
 8007a08:	08007a7d 	.word	0x08007a7d
 8007a0c:	08007a9d 	.word	0x08007a9d
 8007a10:	08007a9d 	.word	0x08007a9d
 8007a14:	08007a9d 	.word	0x08007a9d
 8007a18:	08007a9d 	.word	0x08007a9d
 8007a1c:	08007a9d 	.word	0x08007a9d
 8007a20:	08007a9d 	.word	0x08007a9d
 8007a24:	08007a9d 	.word	0x08007a9d
 8007a28:	08007a85 	.word	0x08007a85
 8007a2c:	08007a9d 	.word	0x08007a9d
 8007a30:	08007a9d 	.word	0x08007a9d
 8007a34:	08007a9d 	.word	0x08007a9d
 8007a38:	08007a9d 	.word	0x08007a9d
 8007a3c:	08007a9d 	.word	0x08007a9d
 8007a40:	08007a9d 	.word	0x08007a9d
 8007a44:	08007a9d 	.word	0x08007a9d
 8007a48:	08007a8d 	.word	0x08007a8d
 8007a4c:	08007a9d 	.word	0x08007a9d
 8007a50:	08007a9d 	.word	0x08007a9d
 8007a54:	08007a9d 	.word	0x08007a9d
 8007a58:	08007a9d 	.word	0x08007a9d
 8007a5c:	08007a9d 	.word	0x08007a9d
 8007a60:	08007a9d 	.word	0x08007a9d
 8007a64:	08007a9d 	.word	0x08007a9d
 8007a68:	08007a95 	.word	0x08007a95
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a72:	e0bc      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007a74:	2304      	movs	r3, #4
 8007a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a7a:	e0b8      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007a7c:	2308      	movs	r3, #8
 8007a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a82:	e0b4      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007a84:	2310      	movs	r3, #16
 8007a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a8a:	e0b0      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007a8c:	2320      	movs	r3, #32
 8007a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a92:	e0ac      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007a94:	2340      	movs	r3, #64	@ 0x40
 8007a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a9a:	e0a8      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007a9c:	2380      	movs	r3, #128	@ 0x80
 8007a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aa2:	e0a4      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a8f      	ldr	r2, [pc, #572]	@ (8007ce8 <UART_SetConfig+0x6a0>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d130      	bne.n	8007b10 <UART_SetConfig+0x4c8>
 8007aae:	4b8d      	ldr	r3, [pc, #564]	@ (8007ce4 <UART_SetConfig+0x69c>)
 8007ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ab2:	f003 0307 	and.w	r3, r3, #7
 8007ab6:	2b05      	cmp	r3, #5
 8007ab8:	d826      	bhi.n	8007b08 <UART_SetConfig+0x4c0>
 8007aba:	a201      	add	r2, pc, #4	@ (adr r2, 8007ac0 <UART_SetConfig+0x478>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007ad9 	.word	0x08007ad9
 8007ac4:	08007ae1 	.word	0x08007ae1
 8007ac8:	08007ae9 	.word	0x08007ae9
 8007acc:	08007af1 	.word	0x08007af1
 8007ad0:	08007af9 	.word	0x08007af9
 8007ad4:	08007b01 	.word	0x08007b01
 8007ad8:	2300      	movs	r3, #0
 8007ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ade:	e086      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007ae0:	2304      	movs	r3, #4
 8007ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ae6:	e082      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007ae8:	2308      	movs	r3, #8
 8007aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aee:	e07e      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007af0:	2310      	movs	r3, #16
 8007af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007af6:	e07a      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007af8:	2320      	movs	r3, #32
 8007afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007afe:	e076      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b00:	2340      	movs	r3, #64	@ 0x40
 8007b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b06:	e072      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b08:	2380      	movs	r3, #128	@ 0x80
 8007b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b0e:	e06e      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a75      	ldr	r2, [pc, #468]	@ (8007cec <UART_SetConfig+0x6a4>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d130      	bne.n	8007b7c <UART_SetConfig+0x534>
 8007b1a:	4b72      	ldr	r3, [pc, #456]	@ (8007ce4 <UART_SetConfig+0x69c>)
 8007b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b1e:	f003 0307 	and.w	r3, r3, #7
 8007b22:	2b05      	cmp	r3, #5
 8007b24:	d826      	bhi.n	8007b74 <UART_SetConfig+0x52c>
 8007b26:	a201      	add	r2, pc, #4	@ (adr r2, 8007b2c <UART_SetConfig+0x4e4>)
 8007b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2c:	08007b45 	.word	0x08007b45
 8007b30:	08007b4d 	.word	0x08007b4d
 8007b34:	08007b55 	.word	0x08007b55
 8007b38:	08007b5d 	.word	0x08007b5d
 8007b3c:	08007b65 	.word	0x08007b65
 8007b40:	08007b6d 	.word	0x08007b6d
 8007b44:	2300      	movs	r3, #0
 8007b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b4a:	e050      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b4c:	2304      	movs	r3, #4
 8007b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b52:	e04c      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b54:	2308      	movs	r3, #8
 8007b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b5a:	e048      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b5c:	2310      	movs	r3, #16
 8007b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b62:	e044      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b64:	2320      	movs	r3, #32
 8007b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b6a:	e040      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b6c:	2340      	movs	r3, #64	@ 0x40
 8007b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b72:	e03c      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b74:	2380      	movs	r3, #128	@ 0x80
 8007b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b7a:	e038      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a5b      	ldr	r2, [pc, #364]	@ (8007cf0 <UART_SetConfig+0x6a8>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d130      	bne.n	8007be8 <UART_SetConfig+0x5a0>
 8007b86:	4b57      	ldr	r3, [pc, #348]	@ (8007ce4 <UART_SetConfig+0x69c>)
 8007b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b8a:	f003 0307 	and.w	r3, r3, #7
 8007b8e:	2b05      	cmp	r3, #5
 8007b90:	d826      	bhi.n	8007be0 <UART_SetConfig+0x598>
 8007b92:	a201      	add	r2, pc, #4	@ (adr r2, 8007b98 <UART_SetConfig+0x550>)
 8007b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b98:	08007bb1 	.word	0x08007bb1
 8007b9c:	08007bb9 	.word	0x08007bb9
 8007ba0:	08007bc1 	.word	0x08007bc1
 8007ba4:	08007bc9 	.word	0x08007bc9
 8007ba8:	08007bd1 	.word	0x08007bd1
 8007bac:	08007bd9 	.word	0x08007bd9
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bb6:	e01a      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007bb8:	2304      	movs	r3, #4
 8007bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bbe:	e016      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007bc0:	2308      	movs	r3, #8
 8007bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bc6:	e012      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007bc8:	2310      	movs	r3, #16
 8007bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bce:	e00e      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007bd0:	2320      	movs	r3, #32
 8007bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bd6:	e00a      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007bd8:	2340      	movs	r3, #64	@ 0x40
 8007bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bde:	e006      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007be0:	2380      	movs	r3, #128	@ 0x80
 8007be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007be6:	e002      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007be8:	2380      	movs	r3, #128	@ 0x80
 8007bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a3f      	ldr	r2, [pc, #252]	@ (8007cf0 <UART_SetConfig+0x6a8>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	f040 80f8 	bne.w	8007dea <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bfa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007bfe:	2b20      	cmp	r3, #32
 8007c00:	dc46      	bgt.n	8007c90 <UART_SetConfig+0x648>
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	f2c0 8082 	blt.w	8007d0c <UART_SetConfig+0x6c4>
 8007c08:	3b02      	subs	r3, #2
 8007c0a:	2b1e      	cmp	r3, #30
 8007c0c:	d87e      	bhi.n	8007d0c <UART_SetConfig+0x6c4>
 8007c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c14 <UART_SetConfig+0x5cc>)
 8007c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c14:	08007c97 	.word	0x08007c97
 8007c18:	08007d0d 	.word	0x08007d0d
 8007c1c:	08007c9f 	.word	0x08007c9f
 8007c20:	08007d0d 	.word	0x08007d0d
 8007c24:	08007d0d 	.word	0x08007d0d
 8007c28:	08007d0d 	.word	0x08007d0d
 8007c2c:	08007caf 	.word	0x08007caf
 8007c30:	08007d0d 	.word	0x08007d0d
 8007c34:	08007d0d 	.word	0x08007d0d
 8007c38:	08007d0d 	.word	0x08007d0d
 8007c3c:	08007d0d 	.word	0x08007d0d
 8007c40:	08007d0d 	.word	0x08007d0d
 8007c44:	08007d0d 	.word	0x08007d0d
 8007c48:	08007d0d 	.word	0x08007d0d
 8007c4c:	08007cbf 	.word	0x08007cbf
 8007c50:	08007d0d 	.word	0x08007d0d
 8007c54:	08007d0d 	.word	0x08007d0d
 8007c58:	08007d0d 	.word	0x08007d0d
 8007c5c:	08007d0d 	.word	0x08007d0d
 8007c60:	08007d0d 	.word	0x08007d0d
 8007c64:	08007d0d 	.word	0x08007d0d
 8007c68:	08007d0d 	.word	0x08007d0d
 8007c6c:	08007d0d 	.word	0x08007d0d
 8007c70:	08007d0d 	.word	0x08007d0d
 8007c74:	08007d0d 	.word	0x08007d0d
 8007c78:	08007d0d 	.word	0x08007d0d
 8007c7c:	08007d0d 	.word	0x08007d0d
 8007c80:	08007d0d 	.word	0x08007d0d
 8007c84:	08007d0d 	.word	0x08007d0d
 8007c88:	08007d0d 	.word	0x08007d0d
 8007c8c:	08007cff 	.word	0x08007cff
 8007c90:	2b40      	cmp	r3, #64	@ 0x40
 8007c92:	d037      	beq.n	8007d04 <UART_SetConfig+0x6bc>
 8007c94:	e03a      	b.n	8007d0c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007c96:	f7fe fee1 	bl	8006a5c <HAL_RCCEx_GetD3PCLK1Freq>
 8007c9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c9c:	e03c      	b.n	8007d18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fe fef0 	bl	8006a88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cac:	e034      	b.n	8007d18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cae:	f107 0318 	add.w	r3, r7, #24
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7ff f83c 	bl	8006d30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cbc:	e02c      	b.n	8007d18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cbe:	4b09      	ldr	r3, [pc, #36]	@ (8007ce4 <UART_SetConfig+0x69c>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0320 	and.w	r3, r3, #32
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d016      	beq.n	8007cf8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007cca:	4b06      	ldr	r3, [pc, #24]	@ (8007ce4 <UART_SetConfig+0x69c>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	08db      	lsrs	r3, r3, #3
 8007cd0:	f003 0303 	and.w	r3, r3, #3
 8007cd4:	4a07      	ldr	r2, [pc, #28]	@ (8007cf4 <UART_SetConfig+0x6ac>)
 8007cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8007cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007cdc:	e01c      	b.n	8007d18 <UART_SetConfig+0x6d0>
 8007cde:	bf00      	nop
 8007ce0:	40011400 	.word	0x40011400
 8007ce4:	58024400 	.word	0x58024400
 8007ce8:	40007800 	.word	0x40007800
 8007cec:	40007c00 	.word	0x40007c00
 8007cf0:	58000c00 	.word	0x58000c00
 8007cf4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007cf8:	4b9d      	ldr	r3, [pc, #628]	@ (8007f70 <UART_SetConfig+0x928>)
 8007cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cfc:	e00c      	b.n	8007d18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007cfe:	4b9d      	ldr	r3, [pc, #628]	@ (8007f74 <UART_SetConfig+0x92c>)
 8007d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d02:	e009      	b.n	8007d18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d0a:	e005      	b.n	8007d18 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007d16:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 81de 	beq.w	80080dc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d24:	4a94      	ldr	r2, [pc, #592]	@ (8007f78 <UART_SetConfig+0x930>)
 8007d26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d32:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	685a      	ldr	r2, [r3, #4]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	005b      	lsls	r3, r3, #1
 8007d3c:	4413      	add	r3, r2
 8007d3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d305      	bcc.n	8007d50 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d903      	bls.n	8007d58 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007d56:	e1c1      	b.n	80080dc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	60bb      	str	r3, [r7, #8]
 8007d5e:	60fa      	str	r2, [r7, #12]
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d64:	4a84      	ldr	r2, [pc, #528]	@ (8007f78 <UART_SetConfig+0x930>)
 8007d66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	603b      	str	r3, [r7, #0]
 8007d70:	607a      	str	r2, [r7, #4]
 8007d72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d7a:	f7f8 fb09 	bl	8000390 <__aeabi_uldivmod>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	4610      	mov	r0, r2
 8007d84:	4619      	mov	r1, r3
 8007d86:	f04f 0200 	mov.w	r2, #0
 8007d8a:	f04f 0300 	mov.w	r3, #0
 8007d8e:	020b      	lsls	r3, r1, #8
 8007d90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d94:	0202      	lsls	r2, r0, #8
 8007d96:	6979      	ldr	r1, [r7, #20]
 8007d98:	6849      	ldr	r1, [r1, #4]
 8007d9a:	0849      	lsrs	r1, r1, #1
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	460c      	mov	r4, r1
 8007da0:	4605      	mov	r5, r0
 8007da2:	eb12 0804 	adds.w	r8, r2, r4
 8007da6:	eb43 0905 	adc.w	r9, r3, r5
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	469a      	mov	sl, r3
 8007db2:	4693      	mov	fp, r2
 8007db4:	4652      	mov	r2, sl
 8007db6:	465b      	mov	r3, fp
 8007db8:	4640      	mov	r0, r8
 8007dba:	4649      	mov	r1, r9
 8007dbc:	f7f8 fae8 	bl	8000390 <__aeabi_uldivmod>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007dce:	d308      	bcc.n	8007de2 <UART_SetConfig+0x79a>
 8007dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dd6:	d204      	bcs.n	8007de2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007dde:	60da      	str	r2, [r3, #12]
 8007de0:	e17c      	b.n	80080dc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007de8:	e178      	b.n	80080dc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	69db      	ldr	r3, [r3, #28]
 8007dee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007df2:	f040 80c5 	bne.w	8007f80 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007df6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007dfa:	2b20      	cmp	r3, #32
 8007dfc:	dc48      	bgt.n	8007e90 <UART_SetConfig+0x848>
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	db7b      	blt.n	8007efa <UART_SetConfig+0x8b2>
 8007e02:	2b20      	cmp	r3, #32
 8007e04:	d879      	bhi.n	8007efa <UART_SetConfig+0x8b2>
 8007e06:	a201      	add	r2, pc, #4	@ (adr r2, 8007e0c <UART_SetConfig+0x7c4>)
 8007e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0c:	08007e97 	.word	0x08007e97
 8007e10:	08007e9f 	.word	0x08007e9f
 8007e14:	08007efb 	.word	0x08007efb
 8007e18:	08007efb 	.word	0x08007efb
 8007e1c:	08007ea7 	.word	0x08007ea7
 8007e20:	08007efb 	.word	0x08007efb
 8007e24:	08007efb 	.word	0x08007efb
 8007e28:	08007efb 	.word	0x08007efb
 8007e2c:	08007eb7 	.word	0x08007eb7
 8007e30:	08007efb 	.word	0x08007efb
 8007e34:	08007efb 	.word	0x08007efb
 8007e38:	08007efb 	.word	0x08007efb
 8007e3c:	08007efb 	.word	0x08007efb
 8007e40:	08007efb 	.word	0x08007efb
 8007e44:	08007efb 	.word	0x08007efb
 8007e48:	08007efb 	.word	0x08007efb
 8007e4c:	08007ec7 	.word	0x08007ec7
 8007e50:	08007efb 	.word	0x08007efb
 8007e54:	08007efb 	.word	0x08007efb
 8007e58:	08007efb 	.word	0x08007efb
 8007e5c:	08007efb 	.word	0x08007efb
 8007e60:	08007efb 	.word	0x08007efb
 8007e64:	08007efb 	.word	0x08007efb
 8007e68:	08007efb 	.word	0x08007efb
 8007e6c:	08007efb 	.word	0x08007efb
 8007e70:	08007efb 	.word	0x08007efb
 8007e74:	08007efb 	.word	0x08007efb
 8007e78:	08007efb 	.word	0x08007efb
 8007e7c:	08007efb 	.word	0x08007efb
 8007e80:	08007efb 	.word	0x08007efb
 8007e84:	08007efb 	.word	0x08007efb
 8007e88:	08007efb 	.word	0x08007efb
 8007e8c:	08007eed 	.word	0x08007eed
 8007e90:	2b40      	cmp	r3, #64	@ 0x40
 8007e92:	d02e      	beq.n	8007ef2 <UART_SetConfig+0x8aa>
 8007e94:	e031      	b.n	8007efa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e96:	f7fd fbab 	bl	80055f0 <HAL_RCC_GetPCLK1Freq>
 8007e9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e9c:	e033      	b.n	8007f06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e9e:	f7fd fbbd 	bl	800561c <HAL_RCC_GetPCLK2Freq>
 8007ea2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ea4:	e02f      	b.n	8007f06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ea6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fe fdec 	bl	8006a88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eb4:	e027      	b.n	8007f06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eb6:	f107 0318 	add.w	r3, r7, #24
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fe ff38 	bl	8006d30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ec4:	e01f      	b.n	8007f06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ec6:	4b2d      	ldr	r3, [pc, #180]	@ (8007f7c <UART_SetConfig+0x934>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 0320 	and.w	r3, r3, #32
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d009      	beq.n	8007ee6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8007f7c <UART_SetConfig+0x934>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	08db      	lsrs	r3, r3, #3
 8007ed8:	f003 0303 	and.w	r3, r3, #3
 8007edc:	4a24      	ldr	r2, [pc, #144]	@ (8007f70 <UART_SetConfig+0x928>)
 8007ede:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ee4:	e00f      	b.n	8007f06 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007ee6:	4b22      	ldr	r3, [pc, #136]	@ (8007f70 <UART_SetConfig+0x928>)
 8007ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eea:	e00c      	b.n	8007f06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007eec:	4b21      	ldr	r3, [pc, #132]	@ (8007f74 <UART_SetConfig+0x92c>)
 8007eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ef0:	e009      	b.n	8007f06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ef2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ef8:	e005      	b.n	8007f06 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007efa:	2300      	movs	r3, #0
 8007efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007f04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 80e7 	beq.w	80080dc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f12:	4a19      	ldr	r2, [pc, #100]	@ (8007f78 <UART_SetConfig+0x930>)
 8007f14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f18:	461a      	mov	r2, r3
 8007f1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f20:	005a      	lsls	r2, r3, #1
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	085b      	lsrs	r3, r3, #1
 8007f28:	441a      	add	r2, r3
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f32:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f36:	2b0f      	cmp	r3, #15
 8007f38:	d916      	bls.n	8007f68 <UART_SetConfig+0x920>
 8007f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f40:	d212      	bcs.n	8007f68 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	f023 030f 	bic.w	r3, r3, #15
 8007f4a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f4e:	085b      	lsrs	r3, r3, #1
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	f003 0307 	and.w	r3, r3, #7
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007f64:	60da      	str	r2, [r3, #12]
 8007f66:	e0b9      	b.n	80080dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007f6e:	e0b5      	b.n	80080dc <UART_SetConfig+0xa94>
 8007f70:	03d09000 	.word	0x03d09000
 8007f74:	003d0900 	.word	0x003d0900
 8007f78:	0800a74c 	.word	0x0800a74c
 8007f7c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f80:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007f84:	2b20      	cmp	r3, #32
 8007f86:	dc49      	bgt.n	800801c <UART_SetConfig+0x9d4>
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	db7c      	blt.n	8008086 <UART_SetConfig+0xa3e>
 8007f8c:	2b20      	cmp	r3, #32
 8007f8e:	d87a      	bhi.n	8008086 <UART_SetConfig+0xa3e>
 8007f90:	a201      	add	r2, pc, #4	@ (adr r2, 8007f98 <UART_SetConfig+0x950>)
 8007f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f96:	bf00      	nop
 8007f98:	08008023 	.word	0x08008023
 8007f9c:	0800802b 	.word	0x0800802b
 8007fa0:	08008087 	.word	0x08008087
 8007fa4:	08008087 	.word	0x08008087
 8007fa8:	08008033 	.word	0x08008033
 8007fac:	08008087 	.word	0x08008087
 8007fb0:	08008087 	.word	0x08008087
 8007fb4:	08008087 	.word	0x08008087
 8007fb8:	08008043 	.word	0x08008043
 8007fbc:	08008087 	.word	0x08008087
 8007fc0:	08008087 	.word	0x08008087
 8007fc4:	08008087 	.word	0x08008087
 8007fc8:	08008087 	.word	0x08008087
 8007fcc:	08008087 	.word	0x08008087
 8007fd0:	08008087 	.word	0x08008087
 8007fd4:	08008087 	.word	0x08008087
 8007fd8:	08008053 	.word	0x08008053
 8007fdc:	08008087 	.word	0x08008087
 8007fe0:	08008087 	.word	0x08008087
 8007fe4:	08008087 	.word	0x08008087
 8007fe8:	08008087 	.word	0x08008087
 8007fec:	08008087 	.word	0x08008087
 8007ff0:	08008087 	.word	0x08008087
 8007ff4:	08008087 	.word	0x08008087
 8007ff8:	08008087 	.word	0x08008087
 8007ffc:	08008087 	.word	0x08008087
 8008000:	08008087 	.word	0x08008087
 8008004:	08008087 	.word	0x08008087
 8008008:	08008087 	.word	0x08008087
 800800c:	08008087 	.word	0x08008087
 8008010:	08008087 	.word	0x08008087
 8008014:	08008087 	.word	0x08008087
 8008018:	08008079 	.word	0x08008079
 800801c:	2b40      	cmp	r3, #64	@ 0x40
 800801e:	d02e      	beq.n	800807e <UART_SetConfig+0xa36>
 8008020:	e031      	b.n	8008086 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008022:	f7fd fae5 	bl	80055f0 <HAL_RCC_GetPCLK1Freq>
 8008026:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008028:	e033      	b.n	8008092 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800802a:	f7fd faf7 	bl	800561c <HAL_RCC_GetPCLK2Freq>
 800802e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008030:	e02f      	b.n	8008092 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008032:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008036:	4618      	mov	r0, r3
 8008038:	f7fe fd26 	bl	8006a88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800803c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800803e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008040:	e027      	b.n	8008092 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008042:	f107 0318 	add.w	r3, r7, #24
 8008046:	4618      	mov	r0, r3
 8008048:	f7fe fe72 	bl	8006d30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008050:	e01f      	b.n	8008092 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008052:	4b2d      	ldr	r3, [pc, #180]	@ (8008108 <UART_SetConfig+0xac0>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 0320 	and.w	r3, r3, #32
 800805a:	2b00      	cmp	r3, #0
 800805c:	d009      	beq.n	8008072 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800805e:	4b2a      	ldr	r3, [pc, #168]	@ (8008108 <UART_SetConfig+0xac0>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	08db      	lsrs	r3, r3, #3
 8008064:	f003 0303 	and.w	r3, r3, #3
 8008068:	4a28      	ldr	r2, [pc, #160]	@ (800810c <UART_SetConfig+0xac4>)
 800806a:	fa22 f303 	lsr.w	r3, r2, r3
 800806e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008070:	e00f      	b.n	8008092 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008072:	4b26      	ldr	r3, [pc, #152]	@ (800810c <UART_SetConfig+0xac4>)
 8008074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008076:	e00c      	b.n	8008092 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008078:	4b25      	ldr	r3, [pc, #148]	@ (8008110 <UART_SetConfig+0xac8>)
 800807a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800807c:	e009      	b.n	8008092 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800807e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008084:	e005      	b.n	8008092 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008086:	2300      	movs	r3, #0
 8008088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008090:	bf00      	nop
    }

    if (pclk != 0U)
 8008092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008094:	2b00      	cmp	r3, #0
 8008096:	d021      	beq.n	80080dc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800809c:	4a1d      	ldr	r2, [pc, #116]	@ (8008114 <UART_SetConfig+0xacc>)
 800809e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080a2:	461a      	mov	r2, r3
 80080a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	085b      	lsrs	r3, r3, #1
 80080b0:	441a      	add	r2, r3
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080be:	2b0f      	cmp	r3, #15
 80080c0:	d909      	bls.n	80080d6 <UART_SetConfig+0xa8e>
 80080c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080c8:	d205      	bcs.n	80080d6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	60da      	str	r2, [r3, #12]
 80080d4:	e002      	b.n	80080dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	2201      	movs	r2, #1
 80080e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	2200      	movs	r2, #0
 80080f0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	2200      	movs	r2, #0
 80080f6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80080f8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3748      	adds	r7, #72	@ 0x48
 8008100:	46bd      	mov	sp, r7
 8008102:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008106:	bf00      	nop
 8008108:	58024400 	.word	0x58024400
 800810c:	03d09000 	.word	0x03d09000
 8008110:	003d0900 	.word	0x003d0900
 8008114:	0800a74c 	.word	0x0800a74c

08008118 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008124:	f003 0308 	and.w	r3, r3, #8
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00a      	beq.n	8008142 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	430a      	orrs	r2, r1
 8008140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00a      	beq.n	8008164 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	430a      	orrs	r2, r1
 8008162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008168:	f003 0302 	and.w	r3, r3, #2
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00a      	beq.n	8008186 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	430a      	orrs	r2, r1
 8008184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800818a:	f003 0304 	and.w	r3, r3, #4
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00a      	beq.n	80081a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	430a      	orrs	r2, r1
 80081a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ac:	f003 0310 	and.w	r3, r3, #16
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00a      	beq.n	80081ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	430a      	orrs	r2, r1
 80081c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ce:	f003 0320 	and.w	r3, r3, #32
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00a      	beq.n	80081ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	430a      	orrs	r2, r1
 80081ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d01a      	beq.n	800822e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	430a      	orrs	r2, r1
 800820c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008212:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008216:	d10a      	bne.n	800822e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	430a      	orrs	r2, r1
 800822c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00a      	beq.n	8008250 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	430a      	orrs	r2, r1
 800824e:	605a      	str	r2, [r3, #4]
  }
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b098      	sub	sp, #96	@ 0x60
 8008260:	af02      	add	r7, sp, #8
 8008262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800826c:	f7f9 fa2a 	bl	80016c4 <HAL_GetTick>
 8008270:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 0308 	and.w	r3, r3, #8
 800827c:	2b08      	cmp	r3, #8
 800827e:	d12f      	bne.n	80082e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008280:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008288:	2200      	movs	r2, #0
 800828a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f88e 	bl	80083b0 <UART_WaitOnFlagUntilTimeout>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d022      	beq.n	80082e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a2:	e853 3f00 	ldrex	r3, [r3]
 80082a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80082a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	461a      	mov	r2, r3
 80082b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80082ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082c0:	e841 2300 	strex	r3, r2, [r1]
 80082c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d1e6      	bne.n	800829a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2220      	movs	r2, #32
 80082d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082dc:	2303      	movs	r3, #3
 80082de:	e063      	b.n	80083a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 0304 	and.w	r3, r3, #4
 80082ea:	2b04      	cmp	r3, #4
 80082ec:	d149      	bne.n	8008382 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082f6:	2200      	movs	r2, #0
 80082f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f857 	bl	80083b0 <UART_WaitOnFlagUntilTimeout>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d03c      	beq.n	8008382 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008310:	e853 3f00 	ldrex	r3, [r3]
 8008314:	623b      	str	r3, [r7, #32]
   return(result);
 8008316:	6a3b      	ldr	r3, [r7, #32]
 8008318:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800831c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	461a      	mov	r2, r3
 8008324:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008326:	633b      	str	r3, [r7, #48]	@ 0x30
 8008328:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800832c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800832e:	e841 2300 	strex	r3, r2, [r1]
 8008332:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008336:	2b00      	cmp	r3, #0
 8008338:	d1e6      	bne.n	8008308 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	3308      	adds	r3, #8
 8008340:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	e853 3f00 	ldrex	r3, [r3]
 8008348:	60fb      	str	r3, [r7, #12]
   return(result);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f023 0301 	bic.w	r3, r3, #1
 8008350:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	3308      	adds	r3, #8
 8008358:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800835a:	61fa      	str	r2, [r7, #28]
 800835c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835e:	69b9      	ldr	r1, [r7, #24]
 8008360:	69fa      	ldr	r2, [r7, #28]
 8008362:	e841 2300 	strex	r3, r2, [r1]
 8008366:	617b      	str	r3, [r7, #20]
   return(result);
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1e5      	bne.n	800833a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2220      	movs	r2, #32
 8008372:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800837e:	2303      	movs	r3, #3
 8008380:	e012      	b.n	80083a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2220      	movs	r2, #32
 8008386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2220      	movs	r2, #32
 800838e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3758      	adds	r7, #88	@ 0x58
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	603b      	str	r3, [r7, #0]
 80083bc:	4613      	mov	r3, r2
 80083be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083c0:	e04f      	b.n	8008462 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c8:	d04b      	beq.n	8008462 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083ca:	f7f9 f97b 	bl	80016c4 <HAL_GetTick>
 80083ce:	4602      	mov	r2, r0
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	69ba      	ldr	r2, [r7, #24]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d302      	bcc.n	80083e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d101      	bne.n	80083e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80083e0:	2303      	movs	r3, #3
 80083e2:	e04e      	b.n	8008482 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0304 	and.w	r3, r3, #4
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d037      	beq.n	8008462 <UART_WaitOnFlagUntilTimeout+0xb2>
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	2b80      	cmp	r3, #128	@ 0x80
 80083f6:	d034      	beq.n	8008462 <UART_WaitOnFlagUntilTimeout+0xb2>
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	2b40      	cmp	r3, #64	@ 0x40
 80083fc:	d031      	beq.n	8008462 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	69db      	ldr	r3, [r3, #28]
 8008404:	f003 0308 	and.w	r3, r3, #8
 8008408:	2b08      	cmp	r3, #8
 800840a:	d110      	bne.n	800842e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2208      	movs	r2, #8
 8008412:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 f95b 	bl	80086d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2208      	movs	r2, #8
 800841e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e029      	b.n	8008482 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	69db      	ldr	r3, [r3, #28]
 8008434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008438:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800843c:	d111      	bne.n	8008462 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008446:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f000 f941 	bl	80086d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2220      	movs	r2, #32
 8008452:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e00f      	b.n	8008482 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	69da      	ldr	r2, [r3, #28]
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	4013      	ands	r3, r2
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	429a      	cmp	r2, r3
 8008470:	bf0c      	ite	eq
 8008472:	2301      	moveq	r3, #1
 8008474:	2300      	movne	r3, #0
 8008476:	b2db      	uxtb	r3, r3
 8008478:	461a      	mov	r2, r3
 800847a:	79fb      	ldrb	r3, [r7, #7]
 800847c:	429a      	cmp	r2, r3
 800847e:	d0a0      	beq.n	80083c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
	...

0800848c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800848c:	b480      	push	{r7}
 800848e:	b0a3      	sub	sp, #140	@ 0x8c
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	4613      	mov	r3, r2
 8008498:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	88fa      	ldrh	r2, [r7, #6]
 80084a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	88fa      	ldrh	r2, [r7, #6]
 80084ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084be:	d10e      	bne.n	80084de <UART_Start_Receive_IT+0x52>
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d105      	bne.n	80084d4 <UART_Start_Receive_IT+0x48>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80084ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80084d2:	e02d      	b.n	8008530 <UART_Start_Receive_IT+0xa4>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	22ff      	movs	r2, #255	@ 0xff
 80084d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80084dc:	e028      	b.n	8008530 <UART_Start_Receive_IT+0xa4>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d10d      	bne.n	8008502 <UART_Start_Receive_IT+0x76>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d104      	bne.n	80084f8 <UART_Start_Receive_IT+0x6c>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	22ff      	movs	r2, #255	@ 0xff
 80084f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80084f6:	e01b      	b.n	8008530 <UART_Start_Receive_IT+0xa4>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	227f      	movs	r2, #127	@ 0x7f
 80084fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008500:	e016      	b.n	8008530 <UART_Start_Receive_IT+0xa4>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800850a:	d10d      	bne.n	8008528 <UART_Start_Receive_IT+0x9c>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d104      	bne.n	800851e <UART_Start_Receive_IT+0x92>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	227f      	movs	r2, #127	@ 0x7f
 8008518:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800851c:	e008      	b.n	8008530 <UART_Start_Receive_IT+0xa4>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	223f      	movs	r2, #63	@ 0x3f
 8008522:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008526:	e003      	b.n	8008530 <UART_Start_Receive_IT+0xa4>
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2200      	movs	r2, #0
 8008534:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2222      	movs	r2, #34	@ 0x22
 800853c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	3308      	adds	r3, #8
 8008546:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008548:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800854a:	e853 3f00 	ldrex	r3, [r3]
 800854e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008550:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008552:	f043 0301 	orr.w	r3, r3, #1
 8008556:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	3308      	adds	r3, #8
 8008560:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008564:	673a      	str	r2, [r7, #112]	@ 0x70
 8008566:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008568:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800856a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800856c:	e841 2300 	strex	r3, r2, [r1]
 8008570:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008572:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008574:	2b00      	cmp	r3, #0
 8008576:	d1e3      	bne.n	8008540 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800857c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008580:	d14f      	bne.n	8008622 <UART_Start_Receive_IT+0x196>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008588:	88fa      	ldrh	r2, [r7, #6]
 800858a:	429a      	cmp	r2, r3
 800858c:	d349      	bcc.n	8008622 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008596:	d107      	bne.n	80085a8 <UART_Start_Receive_IT+0x11c>
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d103      	bne.n	80085a8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	4a47      	ldr	r2, [pc, #284]	@ (80086c0 <UART_Start_Receive_IT+0x234>)
 80085a4:	675a      	str	r2, [r3, #116]	@ 0x74
 80085a6:	e002      	b.n	80085ae <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	4a46      	ldr	r2, [pc, #280]	@ (80086c4 <UART_Start_Receive_IT+0x238>)
 80085ac:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d01a      	beq.n	80085ec <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085be:	e853 3f00 	ldrex	r3, [r3]
 80085c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80085c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	461a      	mov	r2, r3
 80085d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80085d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80085da:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085dc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80085de:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80085e0:	e841 2300 	strex	r3, r2, [r1]
 80085e4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80085e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d1e4      	bne.n	80085b6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	3308      	adds	r3, #8
 80085f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085f6:	e853 3f00 	ldrex	r3, [r3]
 80085fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80085fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008602:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	3308      	adds	r3, #8
 800860a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800860c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800860e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008610:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008612:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008614:	e841 2300 	strex	r3, r2, [r1]
 8008618:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800861a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1e5      	bne.n	80085ec <UART_Start_Receive_IT+0x160>
 8008620:	e046      	b.n	80086b0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800862a:	d107      	bne.n	800863c <UART_Start_Receive_IT+0x1b0>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d103      	bne.n	800863c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	4a24      	ldr	r2, [pc, #144]	@ (80086c8 <UART_Start_Receive_IT+0x23c>)
 8008638:	675a      	str	r2, [r3, #116]	@ 0x74
 800863a:	e002      	b.n	8008642 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	4a23      	ldr	r2, [pc, #140]	@ (80086cc <UART_Start_Receive_IT+0x240>)
 8008640:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d019      	beq.n	800867e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008652:	e853 3f00 	ldrex	r3, [r3]
 8008656:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800865e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	461a      	mov	r2, r3
 8008666:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008668:	637b      	str	r3, [r7, #52]	@ 0x34
 800866a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800866e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008670:	e841 2300 	strex	r3, r2, [r1]
 8008674:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1e6      	bne.n	800864a <UART_Start_Receive_IT+0x1be>
 800867c:	e018      	b.n	80086b0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	e853 3f00 	ldrex	r3, [r3]
 800868a:	613b      	str	r3, [r7, #16]
   return(result);
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	f043 0320 	orr.w	r3, r3, #32
 8008692:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	461a      	mov	r2, r3
 800869a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800869c:	623b      	str	r3, [r7, #32]
 800869e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a0:	69f9      	ldr	r1, [r7, #28]
 80086a2:	6a3a      	ldr	r2, [r7, #32]
 80086a4:	e841 2300 	strex	r3, r2, [r1]
 80086a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d1e6      	bne.n	800867e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	378c      	adds	r7, #140	@ 0x8c
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	080091b1 	.word	0x080091b1
 80086c4:	08008e51 	.word	0x08008e51
 80086c8:	08008c99 	.word	0x08008c99
 80086cc:	08008ae1 	.word	0x08008ae1

080086d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b095      	sub	sp, #84	@ 0x54
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086e0:	e853 3f00 	ldrex	r3, [r3]
 80086e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80086e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	461a      	mov	r2, r3
 80086f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80086f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80086fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80086fe:	e841 2300 	strex	r3, r2, [r1]
 8008702:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1e6      	bne.n	80086d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	3308      	adds	r3, #8
 8008710:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008712:	6a3b      	ldr	r3, [r7, #32]
 8008714:	e853 3f00 	ldrex	r3, [r3]
 8008718:	61fb      	str	r3, [r7, #28]
   return(result);
 800871a:	69fa      	ldr	r2, [r7, #28]
 800871c:	4b1e      	ldr	r3, [pc, #120]	@ (8008798 <UART_EndRxTransfer+0xc8>)
 800871e:	4013      	ands	r3, r2
 8008720:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	3308      	adds	r3, #8
 8008728:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800872a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800872c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008730:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008732:	e841 2300 	strex	r3, r2, [r1]
 8008736:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1e5      	bne.n	800870a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008742:	2b01      	cmp	r3, #1
 8008744:	d118      	bne.n	8008778 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	e853 3f00 	ldrex	r3, [r3]
 8008752:	60bb      	str	r3, [r7, #8]
   return(result);
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	f023 0310 	bic.w	r3, r3, #16
 800875a:	647b      	str	r3, [r7, #68]	@ 0x44
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	461a      	mov	r2, r3
 8008762:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008764:	61bb      	str	r3, [r7, #24]
 8008766:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008768:	6979      	ldr	r1, [r7, #20]
 800876a:	69ba      	ldr	r2, [r7, #24]
 800876c:	e841 2300 	strex	r3, r2, [r1]
 8008770:	613b      	str	r3, [r7, #16]
   return(result);
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1e6      	bne.n	8008746 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2220      	movs	r2, #32
 800877c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800878c:	bf00      	nop
 800878e:	3754      	adds	r7, #84	@ 0x54
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	effffffe 	.word	0xeffffffe

0800879c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800879c:	b480      	push	{r7}
 800879e:	b08f      	sub	sp, #60	@ 0x3c
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087aa:	2b21      	cmp	r3, #33	@ 0x21
 80087ac:	d14c      	bne.n	8008848 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d132      	bne.n	8008820 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c0:	6a3b      	ldr	r3, [r7, #32]
 80087c2:	e853 3f00 	ldrex	r3, [r3]
 80087c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	461a      	mov	r2, r3
 80087d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087da:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087e0:	e841 2300 	strex	r3, r2, [r1]
 80087e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80087e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1e6      	bne.n	80087ba <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	e853 3f00 	ldrex	r3, [r3]
 80087f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008800:	633b      	str	r3, [r7, #48]	@ 0x30
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	461a      	mov	r2, r3
 8008808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880a:	61bb      	str	r3, [r7, #24]
 800880c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880e:	6979      	ldr	r1, [r7, #20]
 8008810:	69ba      	ldr	r2, [r7, #24]
 8008812:	e841 2300 	strex	r3, r2, [r1]
 8008816:	613b      	str	r3, [r7, #16]
   return(result);
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1e6      	bne.n	80087ec <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800881e:	e013      	b.n	8008848 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008824:	781a      	ldrb	r2, [r3, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008830:	1c5a      	adds	r2, r3, #1
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800883c:	b29b      	uxth	r3, r3
 800883e:	3b01      	subs	r3, #1
 8008840:	b29a      	uxth	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8008848:	bf00      	nop
 800884a:	373c      	adds	r7, #60	@ 0x3c
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008854:	b480      	push	{r7}
 8008856:	b091      	sub	sp, #68	@ 0x44
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008862:	2b21      	cmp	r3, #33	@ 0x21
 8008864:	d151      	bne.n	800890a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800886c:	b29b      	uxth	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d132      	bne.n	80088d8 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800887a:	e853 3f00 	ldrex	r3, [r3]
 800887e:	623b      	str	r3, [r7, #32]
   return(result);
 8008880:	6a3b      	ldr	r3, [r7, #32]
 8008882:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008886:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	461a      	mov	r2, r3
 800888e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008890:	633b      	str	r3, [r7, #48]	@ 0x30
 8008892:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008894:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008896:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008898:	e841 2300 	strex	r3, r2, [r1]
 800889c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800889e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d1e6      	bne.n	8008872 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	e853 3f00 	ldrex	r3, [r3]
 80088b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	461a      	mov	r2, r3
 80088c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088c2:	61fb      	str	r3, [r7, #28]
 80088c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c6:	69b9      	ldr	r1, [r7, #24]
 80088c8:	69fa      	ldr	r2, [r7, #28]
 80088ca:	e841 2300 	strex	r3, r2, [r1]
 80088ce:	617b      	str	r3, [r7, #20]
   return(result);
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d1e6      	bne.n	80088a4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80088d6:	e018      	b.n	800890a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80088de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088e0:	881b      	ldrh	r3, [r3, #0]
 80088e2:	461a      	mov	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088ec:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088f2:	1c9a      	adds	r2, r3, #2
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80088fe:	b29b      	uxth	r3, r3
 8008900:	3b01      	subs	r3, #1
 8008902:	b29a      	uxth	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800890a:	bf00      	nop
 800890c:	3744      	adds	r7, #68	@ 0x44
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr

08008916 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008916:	b480      	push	{r7}
 8008918:	b091      	sub	sp, #68	@ 0x44
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008924:	2b21      	cmp	r3, #33	@ 0x21
 8008926:	d160      	bne.n	80089ea <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800892e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008930:	e057      	b.n	80089e2 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008938:	b29b      	uxth	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d133      	bne.n	80089a6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	3308      	adds	r3, #8
 8008944:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008948:	e853 3f00 	ldrex	r3, [r3]
 800894c:	623b      	str	r3, [r7, #32]
   return(result);
 800894e:	6a3b      	ldr	r3, [r7, #32]
 8008950:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008954:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	3308      	adds	r3, #8
 800895c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800895e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008960:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008962:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008964:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008966:	e841 2300 	strex	r3, r2, [r1]
 800896a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800896c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1e5      	bne.n	800893e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	e853 3f00 	ldrex	r3, [r3]
 800897e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008986:	637b      	str	r3, [r7, #52]	@ 0x34
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	461a      	mov	r2, r3
 800898e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008990:	61fb      	str	r3, [r7, #28]
 8008992:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008994:	69b9      	ldr	r1, [r7, #24]
 8008996:	69fa      	ldr	r2, [r7, #28]
 8008998:	e841 2300 	strex	r3, r2, [r1]
 800899c:	617b      	str	r3, [r7, #20]
   return(result);
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d1e6      	bne.n	8008972 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80089a4:	e021      	b.n	80089ea <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	69db      	ldr	r3, [r3, #28]
 80089ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d013      	beq.n	80089dc <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089b8:	781a      	ldrb	r2, [r3, #0]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089c4:	1c5a      	adds	r2, r3, #1
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	3b01      	subs	r3, #1
 80089d4:	b29a      	uxth	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80089dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80089de:	3b01      	subs	r3, #1
 80089e0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80089e2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1a4      	bne.n	8008932 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80089e8:	e7ff      	b.n	80089ea <UART_TxISR_8BIT_FIFOEN+0xd4>
 80089ea:	bf00      	nop
 80089ec:	3744      	adds	r7, #68	@ 0x44
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b091      	sub	sp, #68	@ 0x44
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a04:	2b21      	cmp	r3, #33	@ 0x21
 8008a06:	d165      	bne.n	8008ad4 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008a0e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008a10:	e05c      	b.n	8008acc <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d133      	bne.n	8008a86 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	3308      	adds	r3, #8
 8008a24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a26:	6a3b      	ldr	r3, [r7, #32]
 8008a28:	e853 3f00 	ldrex	r3, [r3]
 8008a2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008a34:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	3308      	adds	r3, #8
 8008a3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a46:	e841 2300 	strex	r3, r2, [r1]
 8008a4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1e5      	bne.n	8008a1e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	e853 3f00 	ldrex	r3, [r3]
 8008a5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a66:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a70:	61bb      	str	r3, [r7, #24]
 8008a72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a74:	6979      	ldr	r1, [r7, #20]
 8008a76:	69ba      	ldr	r2, [r7, #24]
 8008a78:	e841 2300 	strex	r3, r2, [r1]
 8008a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d1e6      	bne.n	8008a52 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008a84:	e026      	b.n	8008ad4 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	69db      	ldr	r3, [r3, #28]
 8008a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d018      	beq.n	8008ac6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a98:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a9c:	881b      	ldrh	r3, [r3, #0]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008aa8:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008aae:	1c9a      	adds	r2, r3, #2
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	3b01      	subs	r3, #1
 8008abe:	b29a      	uxth	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008ac6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008acc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d19f      	bne.n	8008a12 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008ad2:	e7ff      	b.n	8008ad4 <UART_TxISR_16BIT_FIFOEN+0xde>
 8008ad4:	bf00      	nop
 8008ad6:	3744      	adds	r7, #68	@ 0x44
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b09c      	sub	sp, #112	@ 0x70
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008aee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008af8:	2b22      	cmp	r3, #34	@ 0x22
 8008afa:	f040 80be 	bne.w	8008c7a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b04:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008b08:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008b0c:	b2d9      	uxtb	r1, r3
 8008b0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008b12:	b2da      	uxtb	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b18:	400a      	ands	r2, r1
 8008b1a:	b2d2      	uxtb	r2, r2
 8008b1c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b22:	1c5a      	adds	r2, r3, #1
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	3b01      	subs	r3, #1
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f040 80a1 	bne.w	8008c8a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b50:	e853 3f00 	ldrex	r3, [r3]
 8008b54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	461a      	mov	r2, r3
 8008b64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008b66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b68:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008b6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b6e:	e841 2300 	strex	r3, r2, [r1]
 8008b72:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008b74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1e6      	bne.n	8008b48 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	3308      	adds	r3, #8
 8008b80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b84:	e853 3f00 	ldrex	r3, [r3]
 8008b88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b8c:	f023 0301 	bic.w	r3, r3, #1
 8008b90:	667b      	str	r3, [r7, #100]	@ 0x64
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	3308      	adds	r3, #8
 8008b98:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008b9a:	647a      	str	r2, [r7, #68]	@ 0x44
 8008b9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ba0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ba2:	e841 2300 	strex	r3, r2, [r1]
 8008ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1e5      	bne.n	8008b7a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2220      	movs	r2, #32
 8008bb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a33      	ldr	r2, [pc, #204]	@ (8008c94 <UART_RxISR_8BIT+0x1b4>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d01f      	beq.n	8008c0c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d018      	beq.n	8008c0c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be2:	e853 3f00 	ldrex	r3, [r3]
 8008be6:	623b      	str	r3, [r7, #32]
   return(result);
 8008be8:	6a3b      	ldr	r3, [r7, #32]
 8008bea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008bee:	663b      	str	r3, [r7, #96]	@ 0x60
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008bf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c00:	e841 2300 	strex	r3, r2, [r1]
 8008c04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1e6      	bne.n	8008bda <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d12e      	bne.n	8008c72 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	e853 3f00 	ldrex	r3, [r3]
 8008c26:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f023 0310 	bic.w	r3, r3, #16
 8008c2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	461a      	mov	r2, r3
 8008c36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c38:	61fb      	str	r3, [r7, #28]
 8008c3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3c:	69b9      	ldr	r1, [r7, #24]
 8008c3e:	69fa      	ldr	r2, [r7, #28]
 8008c40:	e841 2300 	strex	r3, r2, [r1]
 8008c44:	617b      	str	r3, [r7, #20]
   return(result);
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d1e6      	bne.n	8008c1a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	69db      	ldr	r3, [r3, #28]
 8008c52:	f003 0310 	and.w	r3, r3, #16
 8008c56:	2b10      	cmp	r3, #16
 8008c58:	d103      	bne.n	8008c62 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2210      	movs	r2, #16
 8008c60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008c68:	4619      	mov	r1, r3
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7fe fce0 	bl	8007630 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c70:	e00b      	b.n	8008c8a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f7f8 f8e6 	bl	8000e44 <HAL_UART_RxCpltCallback>
}
 8008c78:	e007      	b.n	8008c8a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	699a      	ldr	r2, [r3, #24]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f042 0208 	orr.w	r2, r2, #8
 8008c88:	619a      	str	r2, [r3, #24]
}
 8008c8a:	bf00      	nop
 8008c8c:	3770      	adds	r7, #112	@ 0x70
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	58000c00 	.word	0x58000c00

08008c98 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b09c      	sub	sp, #112	@ 0x70
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008ca6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008cb0:	2b22      	cmp	r3, #34	@ 0x22
 8008cb2:	f040 80be 	bne.w	8008e32 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cbc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cc4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008cc6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008cca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008cce:	4013      	ands	r3, r2
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008cd4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cda:	1c9a      	adds	r2, r3, #2
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	b29a      	uxth	r2, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f040 80a1 	bne.w	8008e42 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d08:	e853 3f00 	ldrex	r3, [r3]
 8008d0c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008d0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d14:	667b      	str	r3, [r7, #100]	@ 0x64
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d20:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d22:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008d24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008d26:	e841 2300 	strex	r3, r2, [r1]
 8008d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008d2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1e6      	bne.n	8008d00 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	3308      	adds	r3, #8
 8008d38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d3c:	e853 3f00 	ldrex	r3, [r3]
 8008d40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d44:	f023 0301 	bic.w	r3, r3, #1
 8008d48:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	3308      	adds	r3, #8
 8008d50:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008d52:	643a      	str	r2, [r7, #64]	@ 0x40
 8008d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d5a:	e841 2300 	strex	r3, r2, [r1]
 8008d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1e5      	bne.n	8008d32 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2220      	movs	r2, #32
 8008d6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a33      	ldr	r2, [pc, #204]	@ (8008e4c <UART_RxISR_16BIT+0x1b4>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d01f      	beq.n	8008dc4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d018      	beq.n	8008dc4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d98:	6a3b      	ldr	r3, [r7, #32]
 8008d9a:	e853 3f00 	ldrex	r3, [r3]
 8008d9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008da6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	461a      	mov	r2, r3
 8008dae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008db2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008db6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008db8:	e841 2300 	strex	r3, r2, [r1]
 8008dbc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d1e6      	bne.n	8008d92 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d12e      	bne.n	8008e2a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	e853 3f00 	ldrex	r3, [r3]
 8008dde:	60bb      	str	r3, [r7, #8]
   return(result);
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	f023 0310 	bic.w	r3, r3, #16
 8008de6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	461a      	mov	r2, r3
 8008dee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008df0:	61bb      	str	r3, [r7, #24]
 8008df2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df4:	6979      	ldr	r1, [r7, #20]
 8008df6:	69ba      	ldr	r2, [r7, #24]
 8008df8:	e841 2300 	strex	r3, r2, [r1]
 8008dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d1e6      	bne.n	8008dd2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	69db      	ldr	r3, [r3, #28]
 8008e0a:	f003 0310 	and.w	r3, r3, #16
 8008e0e:	2b10      	cmp	r3, #16
 8008e10:	d103      	bne.n	8008e1a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2210      	movs	r2, #16
 8008e18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e20:	4619      	mov	r1, r3
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f7fe fc04 	bl	8007630 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e28:	e00b      	b.n	8008e42 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f7f8 f80a 	bl	8000e44 <HAL_UART_RxCpltCallback>
}
 8008e30:	e007      	b.n	8008e42 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	699a      	ldr	r2, [r3, #24]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f042 0208 	orr.w	r2, r2, #8
 8008e40:	619a      	str	r2, [r3, #24]
}
 8008e42:	bf00      	nop
 8008e44:	3770      	adds	r7, #112	@ 0x70
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	58000c00 	.word	0x58000c00

08008e50 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b0ac      	sub	sp, #176	@ 0xb0
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008e5e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	69db      	ldr	r3, [r3, #28]
 8008e68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e86:	2b22      	cmp	r3, #34	@ 0x22
 8008e88:	f040 8180 	bne.w	800918c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008e92:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e96:	e123      	b.n	80090e0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e9e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008ea2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008ea6:	b2d9      	uxtb	r1, r3
 8008ea8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008eac:	b2da      	uxtb	r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008eb2:	400a      	ands	r2, r1
 8008eb4:	b2d2      	uxtb	r2, r2
 8008eb6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ebc:	1c5a      	adds	r2, r3, #1
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	3b01      	subs	r3, #1
 8008ecc:	b29a      	uxth	r2, r3
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	69db      	ldr	r3, [r3, #28]
 8008eda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008ede:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ee2:	f003 0307 	and.w	r3, r3, #7
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d053      	beq.n	8008f92 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008eea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008eee:	f003 0301 	and.w	r3, r3, #1
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d011      	beq.n	8008f1a <UART_RxISR_8BIT_FIFOEN+0xca>
 8008ef6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00b      	beq.n	8008f1a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2201      	movs	r2, #1
 8008f08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f10:	f043 0201 	orr.w	r2, r3, #1
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f1e:	f003 0302 	and.w	r3, r3, #2
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d011      	beq.n	8008f4a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008f26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f2a:	f003 0301 	and.w	r3, r3, #1
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00b      	beq.n	8008f4a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2202      	movs	r2, #2
 8008f38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f40:	f043 0204 	orr.w	r2, r3, #4
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f4e:	f003 0304 	and.w	r3, r3, #4
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d011      	beq.n	8008f7a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008f56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f5a:	f003 0301 	and.w	r3, r3, #1
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00b      	beq.n	8008f7a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2204      	movs	r2, #4
 8008f68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f70:	f043 0202 	orr.w	r2, r3, #2
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d006      	beq.n	8008f92 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f7fe fb49 	bl	800761c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f040 80a0 	bne.w	80090e0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008fa8:	e853 3f00 	ldrex	r3, [r3]
 8008fac:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008fae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008fb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008fc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008fc4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008fc8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008fca:	e841 2300 	strex	r3, r2, [r1]
 8008fce:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008fd0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1e4      	bne.n	8008fa0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	3308      	adds	r3, #8
 8008fdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fe0:	e853 3f00 	ldrex	r3, [r3]
 8008fe4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008fe6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008fe8:	4b6e      	ldr	r3, [pc, #440]	@ (80091a4 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8008fea:	4013      	ands	r3, r2
 8008fec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	3308      	adds	r3, #8
 8008ff6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008ffa:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008ffc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffe:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009000:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009002:	e841 2300 	strex	r3, r2, [r1]
 8009006:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009008:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800900a:	2b00      	cmp	r3, #0
 800900c:	d1e3      	bne.n	8008fd6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2220      	movs	r2, #32
 8009012:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a60      	ldr	r2, [pc, #384]	@ (80091a8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d021      	beq.n	8009070 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009036:	2b00      	cmp	r3, #0
 8009038:	d01a      	beq.n	8009070 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009040:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009042:	e853 3f00 	ldrex	r3, [r3]
 8009046:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009048:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800904a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800904e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	461a      	mov	r2, r3
 8009058:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800905c:	657b      	str	r3, [r7, #84]	@ 0x54
 800905e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009060:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009062:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009064:	e841 2300 	strex	r3, r2, [r1]
 8009068:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800906a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1e4      	bne.n	800903a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009074:	2b01      	cmp	r3, #1
 8009076:	d130      	bne.n	80090da <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009086:	e853 3f00 	ldrex	r3, [r3]
 800908a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800908c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800908e:	f023 0310 	bic.w	r3, r3, #16
 8009092:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	461a      	mov	r2, r3
 800909c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80090a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80090a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80090a8:	e841 2300 	strex	r3, r2, [r1]
 80090ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80090ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1e4      	bne.n	800907e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	69db      	ldr	r3, [r3, #28]
 80090ba:	f003 0310 	and.w	r3, r3, #16
 80090be:	2b10      	cmp	r3, #16
 80090c0:	d103      	bne.n	80090ca <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2210      	movs	r2, #16
 80090c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80090d0:	4619      	mov	r1, r3
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f7fe faac 	bl	8007630 <HAL_UARTEx_RxEventCallback>
 80090d8:	e002      	b.n	80090e0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f7f7 feb2 	bl	8000e44 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80090e0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d006      	beq.n	80090f6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80090e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090ec:	f003 0320 	and.w	r3, r3, #32
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f47f aed1 	bne.w	8008e98 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090fc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009100:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009104:	2b00      	cmp	r3, #0
 8009106:	d049      	beq.n	800919c <UART_RxISR_8BIT_FIFOEN+0x34c>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800910e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009112:	429a      	cmp	r2, r3
 8009114:	d242      	bcs.n	800919c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	3308      	adds	r3, #8
 800911c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911e:	6a3b      	ldr	r3, [r7, #32]
 8009120:	e853 3f00 	ldrex	r3, [r3]
 8009124:	61fb      	str	r3, [r7, #28]
   return(result);
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800912c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	3308      	adds	r3, #8
 8009136:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800913a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800913c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800913e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009140:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009142:	e841 2300 	strex	r3, r2, [r1]
 8009146:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914a:	2b00      	cmp	r3, #0
 800914c:	d1e3      	bne.n	8009116 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a16      	ldr	r2, [pc, #88]	@ (80091ac <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009152:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	e853 3f00 	ldrex	r3, [r3]
 8009160:	60bb      	str	r3, [r7, #8]
   return(result);
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	f043 0320 	orr.w	r3, r3, #32
 8009168:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	461a      	mov	r2, r3
 8009172:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009176:	61bb      	str	r3, [r7, #24]
 8009178:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917a:	6979      	ldr	r1, [r7, #20]
 800917c:	69ba      	ldr	r2, [r7, #24]
 800917e:	e841 2300 	strex	r3, r2, [r1]
 8009182:	613b      	str	r3, [r7, #16]
   return(result);
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1e4      	bne.n	8009154 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800918a:	e007      	b.n	800919c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	699a      	ldr	r2, [r3, #24]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f042 0208 	orr.w	r2, r2, #8
 800919a:	619a      	str	r2, [r3, #24]
}
 800919c:	bf00      	nop
 800919e:	37b0      	adds	r7, #176	@ 0xb0
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	effffffe 	.word	0xeffffffe
 80091a8:	58000c00 	.word	0x58000c00
 80091ac:	08008ae1 	.word	0x08008ae1

080091b0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b0ae      	sub	sp, #184	@ 0xb8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80091be:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	69db      	ldr	r3, [r3, #28]
 80091c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80091e6:	2b22      	cmp	r3, #34	@ 0x22
 80091e8:	f040 8184 	bne.w	80094f4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80091f2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091f6:	e127      	b.n	8009448 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091fe:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009206:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800920a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800920e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009212:	4013      	ands	r3, r2
 8009214:	b29a      	uxth	r2, r3
 8009216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800921a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009220:	1c9a      	adds	r2, r3, #2
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800922c:	b29b      	uxth	r3, r3
 800922e:	3b01      	subs	r3, #1
 8009230:	b29a      	uxth	r2, r3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	69db      	ldr	r3, [r3, #28]
 800923e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009242:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009246:	f003 0307 	and.w	r3, r3, #7
 800924a:	2b00      	cmp	r3, #0
 800924c:	d053      	beq.n	80092f6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800924e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009252:	f003 0301 	and.w	r3, r3, #1
 8009256:	2b00      	cmp	r3, #0
 8009258:	d011      	beq.n	800927e <UART_RxISR_16BIT_FIFOEN+0xce>
 800925a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800925e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00b      	beq.n	800927e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2201      	movs	r2, #1
 800926c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009274:	f043 0201 	orr.w	r2, r3, #1
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800927e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009282:	f003 0302 	and.w	r3, r3, #2
 8009286:	2b00      	cmp	r3, #0
 8009288:	d011      	beq.n	80092ae <UART_RxISR_16BIT_FIFOEN+0xfe>
 800928a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800928e:	f003 0301 	and.w	r3, r3, #1
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00b      	beq.n	80092ae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2202      	movs	r2, #2
 800929c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092a4:	f043 0204 	orr.w	r2, r3, #4
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80092b2:	f003 0304 	and.w	r3, r3, #4
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d011      	beq.n	80092de <UART_RxISR_16BIT_FIFOEN+0x12e>
 80092ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80092be:	f003 0301 	and.w	r3, r3, #1
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00b      	beq.n	80092de <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2204      	movs	r2, #4
 80092cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092d4:	f043 0202 	orr.w	r2, r3, #2
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d006      	beq.n	80092f6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f7fe f997 	bl	800761c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	2b00      	cmp	r3, #0
 8009300:	f040 80a2 	bne.w	8009448 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800930c:	e853 3f00 	ldrex	r3, [r3]
 8009310:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009312:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009318:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	461a      	mov	r2, r3
 8009322:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009326:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800932a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800932e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009332:	e841 2300 	strex	r3, r2, [r1]
 8009336:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009338:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1e2      	bne.n	8009304 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	3308      	adds	r3, #8
 8009344:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009346:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009348:	e853 3f00 	ldrex	r3, [r3]
 800934c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800934e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009350:	4b6e      	ldr	r3, [pc, #440]	@ (800950c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8009352:	4013      	ands	r3, r2
 8009354:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	3308      	adds	r3, #8
 800935e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009362:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009364:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009366:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009368:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800936a:	e841 2300 	strex	r3, r2, [r1]
 800936e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009370:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1e3      	bne.n	800933e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2220      	movs	r2, #32
 800937a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a60      	ldr	r2, [pc, #384]	@ (8009510 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d021      	beq.n	80093d8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d01a      	beq.n	80093d8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093aa:	e853 3f00 	ldrex	r3, [r3]
 80093ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80093b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80093b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	461a      	mov	r2, r3
 80093c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80093c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80093c6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80093ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80093cc:	e841 2300 	strex	r3, r2, [r1]
 80093d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80093d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d1e4      	bne.n	80093a2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d130      	bne.n	8009442 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ee:	e853 3f00 	ldrex	r3, [r3]
 80093f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093f6:	f023 0310 	bic.w	r3, r3, #16
 80093fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	461a      	mov	r2, r3
 8009404:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009408:	647b      	str	r3, [r7, #68]	@ 0x44
 800940a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800940e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009410:	e841 2300 	strex	r3, r2, [r1]
 8009414:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009418:	2b00      	cmp	r3, #0
 800941a:	d1e4      	bne.n	80093e6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	69db      	ldr	r3, [r3, #28]
 8009422:	f003 0310 	and.w	r3, r3, #16
 8009426:	2b10      	cmp	r3, #16
 8009428:	d103      	bne.n	8009432 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2210      	movs	r2, #16
 8009430:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009438:	4619      	mov	r1, r3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f7fe f8f8 	bl	8007630 <HAL_UARTEx_RxEventCallback>
 8009440:	e002      	b.n	8009448 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f7f7 fcfe 	bl	8000e44 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009448:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800944c:	2b00      	cmp	r3, #0
 800944e:	d006      	beq.n	800945e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8009450:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009454:	f003 0320 	and.w	r3, r3, #32
 8009458:	2b00      	cmp	r3, #0
 800945a:	f47f aecd 	bne.w	80091f8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009464:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009468:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800946c:	2b00      	cmp	r3, #0
 800946e:	d049      	beq.n	8009504 <UART_RxISR_16BIT_FIFOEN+0x354>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009476:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800947a:	429a      	cmp	r2, r3
 800947c:	d242      	bcs.n	8009504 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3308      	adds	r3, #8
 8009484:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009488:	e853 3f00 	ldrex	r3, [r3]
 800948c:	623b      	str	r3, [r7, #32]
   return(result);
 800948e:	6a3b      	ldr	r3, [r7, #32]
 8009490:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009494:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	3308      	adds	r3, #8
 800949e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80094a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80094a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094aa:	e841 2300 	strex	r3, r2, [r1]
 80094ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1e3      	bne.n	800947e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4a16      	ldr	r2, [pc, #88]	@ (8009514 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80094ba:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	e853 3f00 	ldrex	r3, [r3]
 80094c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f043 0320 	orr.w	r3, r3, #32
 80094d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	461a      	mov	r2, r3
 80094da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80094de:	61fb      	str	r3, [r7, #28]
 80094e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e2:	69b9      	ldr	r1, [r7, #24]
 80094e4:	69fa      	ldr	r2, [r7, #28]
 80094e6:	e841 2300 	strex	r3, r2, [r1]
 80094ea:	617b      	str	r3, [r7, #20]
   return(result);
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1e4      	bne.n	80094bc <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80094f2:	e007      	b.n	8009504 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	699a      	ldr	r2, [r3, #24]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f042 0208 	orr.w	r2, r2, #8
 8009502:	619a      	str	r2, [r3, #24]
}
 8009504:	bf00      	nop
 8009506:	37b8      	adds	r7, #184	@ 0xb8
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}
 800950c:	effffffe 	.word	0xeffffffe
 8009510:	58000c00 	.word	0x58000c00
 8009514:	08008c99 	.word	0x08008c99

08009518 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009518:	b480      	push	{r7}
 800951a:	b085      	sub	sp, #20
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009526:	2b01      	cmp	r3, #1
 8009528:	d101      	bne.n	800952e <HAL_UARTEx_DisableFifoMode+0x16>
 800952a:	2302      	movs	r3, #2
 800952c:	e027      	b.n	800957e <HAL_UARTEx_DisableFifoMode+0x66>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2201      	movs	r2, #1
 8009532:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2224      	movs	r2, #36	@ 0x24
 800953a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f022 0201 	bic.w	r2, r2, #1
 8009554:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800955c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2220      	movs	r2, #32
 8009570:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3714      	adds	r7, #20
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr

0800958a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b084      	sub	sp, #16
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800959a:	2b01      	cmp	r3, #1
 800959c:	d101      	bne.n	80095a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800959e:	2302      	movs	r3, #2
 80095a0:	e02d      	b.n	80095fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2224      	movs	r2, #36	@ 0x24
 80095ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f022 0201 	bic.w	r2, r2, #1
 80095c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	683a      	ldr	r2, [r7, #0]
 80095da:	430a      	orrs	r2, r1
 80095dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 f850 	bl	8009684 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2220      	movs	r2, #32
 80095f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009606:	b580      	push	{r7, lr}
 8009608:	b084      	sub	sp, #16
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
 800960e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009616:	2b01      	cmp	r3, #1
 8009618:	d101      	bne.n	800961e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800961a:	2302      	movs	r3, #2
 800961c:	e02d      	b.n	800967a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2201      	movs	r2, #1
 8009622:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2224      	movs	r2, #36	@ 0x24
 800962a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f022 0201 	bic.w	r2, r2, #1
 8009644:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	683a      	ldr	r2, [r7, #0]
 8009656:	430a      	orrs	r2, r1
 8009658:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 f812 	bl	8009684 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2220      	movs	r2, #32
 800966c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
	...

08009684 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009690:	2b00      	cmp	r3, #0
 8009692:	d108      	bne.n	80096a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80096a4:	e031      	b.n	800970a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80096a6:	2310      	movs	r3, #16
 80096a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80096aa:	2310      	movs	r3, #16
 80096ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	0e5b      	lsrs	r3, r3, #25
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	f003 0307 	and.w	r3, r3, #7
 80096bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	0f5b      	lsrs	r3, r3, #29
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	f003 0307 	and.w	r3, r3, #7
 80096cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096ce:	7bbb      	ldrb	r3, [r7, #14]
 80096d0:	7b3a      	ldrb	r2, [r7, #12]
 80096d2:	4911      	ldr	r1, [pc, #68]	@ (8009718 <UARTEx_SetNbDataToProcess+0x94>)
 80096d4:	5c8a      	ldrb	r2, [r1, r2]
 80096d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80096da:	7b3a      	ldrb	r2, [r7, #12]
 80096dc:	490f      	ldr	r1, [pc, #60]	@ (800971c <UARTEx_SetNbDataToProcess+0x98>)
 80096de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096ec:	7bfb      	ldrb	r3, [r7, #15]
 80096ee:	7b7a      	ldrb	r2, [r7, #13]
 80096f0:	4909      	ldr	r1, [pc, #36]	@ (8009718 <UARTEx_SetNbDataToProcess+0x94>)
 80096f2:	5c8a      	ldrb	r2, [r1, r2]
 80096f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80096f8:	7b7a      	ldrb	r2, [r7, #13]
 80096fa:	4908      	ldr	r1, [pc, #32]	@ (800971c <UARTEx_SetNbDataToProcess+0x98>)
 80096fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8009702:	b29a      	uxth	r2, r3
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800970a:	bf00      	nop
 800970c:	3714      	adds	r7, #20
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop
 8009718:	0800a764 	.word	0x0800a764
 800971c:	0800a76c 	.word	0x0800a76c

08009720 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009720:	b084      	sub	sp, #16
 8009722:	b580      	push	{r7, lr}
 8009724:	b084      	sub	sp, #16
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
 800972a:	f107 001c 	add.w	r0, r7, #28
 800972e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009732:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009736:	2b01      	cmp	r3, #1
 8009738:	d121      	bne.n	800977e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800973e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	68da      	ldr	r2, [r3, #12]
 800974a:	4b2c      	ldr	r3, [pc, #176]	@ (80097fc <USB_CoreInit+0xdc>)
 800974c:	4013      	ands	r3, r2
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800975e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009762:	2b01      	cmp	r3, #1
 8009764:	d105      	bne.n	8009772 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 faaa 	bl	8009ccc <USB_CoreReset>
 8009778:	4603      	mov	r3, r0
 800977a:	73fb      	strb	r3, [r7, #15]
 800977c:	e01b      	b.n	80097b6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	68db      	ldr	r3, [r3, #12]
 8009782:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 fa9e 	bl	8009ccc <USB_CoreReset>
 8009790:	4603      	mov	r3, r0
 8009792:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009794:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009798:	2b00      	cmp	r3, #0
 800979a:	d106      	bne.n	80097aa <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80097a8:	e005      	b.n	80097b6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80097b6:	7fbb      	ldrb	r3, [r7, #30]
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d116      	bne.n	80097ea <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80097ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009800 <USB_CoreInit+0xe0>)
 80097cc:	4313      	orrs	r3, r2
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	f043 0206 	orr.w	r2, r3, #6
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	f043 0220 	orr.w	r2, r3, #32
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80097ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097f6:	b004      	add	sp, #16
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	ffbdffbf 	.word	0xffbdffbf
 8009800:	03ee0000 	.word	0x03ee0000

08009804 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	f023 0201 	bic.w	r2, r3, #1
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	370c      	adds	r7, #12
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr

08009826 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009826:	b580      	push	{r7, lr}
 8009828:	b084      	sub	sp, #16
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
 800982e:	460b      	mov	r3, r1
 8009830:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009832:	2300      	movs	r3, #0
 8009834:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009842:	78fb      	ldrb	r3, [r7, #3]
 8009844:	2b01      	cmp	r3, #1
 8009846:	d115      	bne.n	8009874 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009854:	200a      	movs	r0, #10
 8009856:	f7f7 ff41 	bl	80016dc <HAL_Delay>
      ms += 10U;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	330a      	adds	r3, #10
 800985e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 fa25 	bl	8009cb0 <USB_GetMode>
 8009866:	4603      	mov	r3, r0
 8009868:	2b01      	cmp	r3, #1
 800986a:	d01e      	beq.n	80098aa <USB_SetCurrentMode+0x84>
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2bc7      	cmp	r3, #199	@ 0xc7
 8009870:	d9f0      	bls.n	8009854 <USB_SetCurrentMode+0x2e>
 8009872:	e01a      	b.n	80098aa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009874:	78fb      	ldrb	r3, [r7, #3]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d115      	bne.n	80098a6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009886:	200a      	movs	r0, #10
 8009888:	f7f7 ff28 	bl	80016dc <HAL_Delay>
      ms += 10U;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	330a      	adds	r3, #10
 8009890:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fa0c 	bl	8009cb0 <USB_GetMode>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d005      	beq.n	80098aa <USB_SetCurrentMode+0x84>
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2bc7      	cmp	r3, #199	@ 0xc7
 80098a2:	d9f0      	bls.n	8009886 <USB_SetCurrentMode+0x60>
 80098a4:	e001      	b.n	80098aa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	e005      	b.n	80098b6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2bc8      	cmp	r3, #200	@ 0xc8
 80098ae:	d101      	bne.n	80098b4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	e000      	b.n	80098b6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80098b4:	2300      	movs	r3, #0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
	...

080098c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80098c0:	b084      	sub	sp, #16
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b086      	sub	sp, #24
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
 80098ca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80098ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80098da:	2300      	movs	r3, #0
 80098dc:	613b      	str	r3, [r7, #16]
 80098de:	e009      	b.n	80098f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	3340      	adds	r3, #64	@ 0x40
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	4413      	add	r3, r2
 80098ea:	2200      	movs	r2, #0
 80098ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	3301      	adds	r3, #1
 80098f2:	613b      	str	r3, [r7, #16]
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	2b0e      	cmp	r3, #14
 80098f8:	d9f2      	bls.n	80098e0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80098fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d11c      	bne.n	800993c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009910:	f043 0302 	orr.w	r3, r3, #2
 8009914:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800991a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	601a      	str	r2, [r3, #0]
 800993a:	e005      	b.n	8009948 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009940:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800994e:	461a      	mov	r2, r3
 8009950:	2300      	movs	r3, #0
 8009952:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009954:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009958:	2b01      	cmp	r3, #1
 800995a:	d10d      	bne.n	8009978 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800995c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009960:	2b00      	cmp	r3, #0
 8009962:	d104      	bne.n	800996e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009964:	2100      	movs	r1, #0
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 f968 	bl	8009c3c <USB_SetDevSpeed>
 800996c:	e008      	b.n	8009980 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800996e:	2101      	movs	r1, #1
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 f963 	bl	8009c3c <USB_SetDevSpeed>
 8009976:	e003      	b.n	8009980 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009978:	2103      	movs	r1, #3
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 f95e 	bl	8009c3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009980:	2110      	movs	r1, #16
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 f8fa 	bl	8009b7c <USB_FlushTxFifo>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d001      	beq.n	8009992 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800998e:	2301      	movs	r3, #1
 8009990:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f924 	bl	8009be0 <USB_FlushRxFifo>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d001      	beq.n	80099a2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099a8:	461a      	mov	r2, r3
 80099aa:	2300      	movs	r3, #0
 80099ac:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099b4:	461a      	mov	r2, r3
 80099b6:	2300      	movs	r3, #0
 80099b8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099c0:	461a      	mov	r2, r3
 80099c2:	2300      	movs	r3, #0
 80099c4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099c6:	2300      	movs	r3, #0
 80099c8:	613b      	str	r3, [r7, #16]
 80099ca:	e043      	b.n	8009a54 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	015a      	lsls	r2, r3, #5
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	4413      	add	r3, r2
 80099d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80099de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099e2:	d118      	bne.n	8009a16 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d10a      	bne.n	8009a00 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	015a      	lsls	r2, r3, #5
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	4413      	add	r3, r2
 80099f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099f6:	461a      	mov	r2, r3
 80099f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80099fc:	6013      	str	r3, [r2, #0]
 80099fe:	e013      	b.n	8009a28 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	015a      	lsls	r2, r3, #5
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	4413      	add	r3, r2
 8009a08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009a12:	6013      	str	r3, [r2, #0]
 8009a14:	e008      	b.n	8009a28 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	015a      	lsls	r2, r3, #5
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a22:	461a      	mov	r2, r3
 8009a24:	2300      	movs	r3, #0
 8009a26:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	015a      	lsls	r2, r3, #5
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	4413      	add	r3, r2
 8009a30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a34:	461a      	mov	r2, r3
 8009a36:	2300      	movs	r3, #0
 8009a38:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	015a      	lsls	r2, r3, #5
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	4413      	add	r3, r2
 8009a42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a46:	461a      	mov	r2, r3
 8009a48:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009a4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	3301      	adds	r3, #1
 8009a52:	613b      	str	r3, [r7, #16]
 8009a54:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009a58:	461a      	mov	r2, r3
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d3b5      	bcc.n	80099cc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a60:	2300      	movs	r3, #0
 8009a62:	613b      	str	r3, [r7, #16]
 8009a64:	e043      	b.n	8009aee <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	015a      	lsls	r2, r3, #5
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a7c:	d118      	bne.n	8009ab0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d10a      	bne.n	8009a9a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	015a      	lsls	r2, r3, #5
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a90:	461a      	mov	r2, r3
 8009a92:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009a96:	6013      	str	r3, [r2, #0]
 8009a98:	e013      	b.n	8009ac2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	015a      	lsls	r2, r3, #5
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009aac:	6013      	str	r3, [r2, #0]
 8009aae:	e008      	b.n	8009ac2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	015a      	lsls	r2, r3, #5
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009abc:	461a      	mov	r2, r3
 8009abe:	2300      	movs	r3, #0
 8009ac0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	015a      	lsls	r2, r3, #5
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	4413      	add	r3, r2
 8009aca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ace:	461a      	mov	r2, r3
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	015a      	lsls	r2, r3, #5
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	4413      	add	r3, r2
 8009adc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009ae6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	3301      	adds	r3, #1
 8009aec:	613b      	str	r3, [r7, #16]
 8009aee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009af2:	461a      	mov	r2, r3
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d3b5      	bcc.n	8009a66 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b0c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009b1a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009b1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d105      	bne.n	8009b30 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	699b      	ldr	r3, [r3, #24]
 8009b28:	f043 0210 	orr.w	r2, r3, #16
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	699a      	ldr	r2, [r3, #24]
 8009b34:	4b0f      	ldr	r3, [pc, #60]	@ (8009b74 <USB_DevInit+0x2b4>)
 8009b36:	4313      	orrs	r3, r2
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009b3c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d005      	beq.n	8009b50 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	699b      	ldr	r3, [r3, #24]
 8009b48:	f043 0208 	orr.w	r2, r3, #8
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009b50:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d105      	bne.n	8009b64 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	699a      	ldr	r2, [r3, #24]
 8009b5c:	4b06      	ldr	r3, [pc, #24]	@ (8009b78 <USB_DevInit+0x2b8>)
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3718      	adds	r7, #24
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b70:	b004      	add	sp, #16
 8009b72:	4770      	bx	lr
 8009b74:	803c3800 	.word	0x803c3800
 8009b78:	40000004 	.word	0x40000004

08009b7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b085      	sub	sp, #20
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009b86:	2300      	movs	r3, #0
 8009b88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b96:	d901      	bls.n	8009b9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009b98:	2303      	movs	r3, #3
 8009b9a:	e01b      	b.n	8009bd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	691b      	ldr	r3, [r3, #16]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	daf2      	bge.n	8009b8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	019b      	lsls	r3, r3, #6
 8009bac:	f043 0220 	orr.w	r2, r3, #32
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009bc0:	d901      	bls.n	8009bc6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009bc2:	2303      	movs	r3, #3
 8009bc4:	e006      	b.n	8009bd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	691b      	ldr	r3, [r3, #16]
 8009bca:	f003 0320 	and.w	r3, r3, #32
 8009bce:	2b20      	cmp	r3, #32
 8009bd0:	d0f0      	beq.n	8009bb4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009bd2:	2300      	movs	r3, #0
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3714      	adds	r7, #20
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b085      	sub	sp, #20
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009be8:	2300      	movs	r3, #0
 8009bea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	3301      	adds	r3, #1
 8009bf0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009bf8:	d901      	bls.n	8009bfe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009bfa:	2303      	movs	r3, #3
 8009bfc:	e018      	b.n	8009c30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	691b      	ldr	r3, [r3, #16]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	daf2      	bge.n	8009bec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009c06:	2300      	movs	r3, #0
 8009c08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2210      	movs	r2, #16
 8009c0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	3301      	adds	r3, #1
 8009c14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009c1c:	d901      	bls.n	8009c22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009c1e:	2303      	movs	r3, #3
 8009c20:	e006      	b.n	8009c30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	f003 0310 	and.w	r3, r3, #16
 8009c2a:	2b10      	cmp	r3, #16
 8009c2c:	d0f0      	beq.n	8009c10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3714      	adds	r7, #20
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b085      	sub	sp, #20
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	460b      	mov	r3, r1
 8009c46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	78fb      	ldrb	r3, [r7, #3]
 8009c56:	68f9      	ldr	r1, [r7, #12]
 8009c58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3714      	adds	r7, #20
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr

08009c6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009c6e:	b480      	push	{r7}
 8009c70:	b085      	sub	sp, #20
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009c88:	f023 0303 	bic.w	r3, r3, #3
 8009c8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009c9c:	f043 0302 	orr.w	r3, r3, #2
 8009ca0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009ca2:	2300      	movs	r3, #0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3714      	adds	r7, #20
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	695b      	ldr	r3, [r3, #20]
 8009cbc:	f003 0301 	and.w	r3, r3, #1
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b085      	sub	sp, #20
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009ce4:	d901      	bls.n	8009cea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	e01b      	b.n	8009d22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	daf2      	bge.n	8009cd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	691b      	ldr	r3, [r3, #16]
 8009cfa:	f043 0201 	orr.w	r2, r3, #1
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	3301      	adds	r3, #1
 8009d06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009d0e:	d901      	bls.n	8009d14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009d10:	2303      	movs	r3, #3
 8009d12:	e006      	b.n	8009d22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	691b      	ldr	r3, [r3, #16]
 8009d18:	f003 0301 	and.w	r3, r3, #1
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d0f0      	beq.n	8009d02 <USB_CoreReset+0x36>

  return HAL_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3714      	adds	r7, #20
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr
	...

08009d30 <sniprintf>:
 8009d30:	b40c      	push	{r2, r3}
 8009d32:	b530      	push	{r4, r5, lr}
 8009d34:	4b17      	ldr	r3, [pc, #92]	@ (8009d94 <sniprintf+0x64>)
 8009d36:	1e0c      	subs	r4, r1, #0
 8009d38:	681d      	ldr	r5, [r3, #0]
 8009d3a:	b09d      	sub	sp, #116	@ 0x74
 8009d3c:	da08      	bge.n	8009d50 <sniprintf+0x20>
 8009d3e:	238b      	movs	r3, #139	@ 0x8b
 8009d40:	602b      	str	r3, [r5, #0]
 8009d42:	f04f 30ff 	mov.w	r0, #4294967295
 8009d46:	b01d      	add	sp, #116	@ 0x74
 8009d48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d4c:	b002      	add	sp, #8
 8009d4e:	4770      	bx	lr
 8009d50:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009d54:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009d58:	bf14      	ite	ne
 8009d5a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009d5e:	4623      	moveq	r3, r4
 8009d60:	9304      	str	r3, [sp, #16]
 8009d62:	9307      	str	r3, [sp, #28]
 8009d64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009d68:	9002      	str	r0, [sp, #8]
 8009d6a:	9006      	str	r0, [sp, #24]
 8009d6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009d70:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009d72:	ab21      	add	r3, sp, #132	@ 0x84
 8009d74:	a902      	add	r1, sp, #8
 8009d76:	4628      	mov	r0, r5
 8009d78:	9301      	str	r3, [sp, #4]
 8009d7a:	f000 f9a7 	bl	800a0cc <_svfiprintf_r>
 8009d7e:	1c43      	adds	r3, r0, #1
 8009d80:	bfbc      	itt	lt
 8009d82:	238b      	movlt	r3, #139	@ 0x8b
 8009d84:	602b      	strlt	r3, [r5, #0]
 8009d86:	2c00      	cmp	r4, #0
 8009d88:	d0dd      	beq.n	8009d46 <sniprintf+0x16>
 8009d8a:	9b02      	ldr	r3, [sp, #8]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	701a      	strb	r2, [r3, #0]
 8009d90:	e7d9      	b.n	8009d46 <sniprintf+0x16>
 8009d92:	bf00      	nop
 8009d94:	24000014 	.word	0x24000014

08009d98 <memset>:
 8009d98:	4402      	add	r2, r0
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d100      	bne.n	8009da2 <memset+0xa>
 8009da0:	4770      	bx	lr
 8009da2:	f803 1b01 	strb.w	r1, [r3], #1
 8009da6:	e7f9      	b.n	8009d9c <memset+0x4>

08009da8 <strncmp>:
 8009da8:	b510      	push	{r4, lr}
 8009daa:	b16a      	cbz	r2, 8009dc8 <strncmp+0x20>
 8009dac:	3901      	subs	r1, #1
 8009dae:	1884      	adds	r4, r0, r2
 8009db0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009db4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d103      	bne.n	8009dc4 <strncmp+0x1c>
 8009dbc:	42a0      	cmp	r0, r4
 8009dbe:	d001      	beq.n	8009dc4 <strncmp+0x1c>
 8009dc0:	2a00      	cmp	r2, #0
 8009dc2:	d1f5      	bne.n	8009db0 <strncmp+0x8>
 8009dc4:	1ad0      	subs	r0, r2, r3
 8009dc6:	bd10      	pop	{r4, pc}
 8009dc8:	4610      	mov	r0, r2
 8009dca:	e7fc      	b.n	8009dc6 <strncmp+0x1e>

08009dcc <__errno>:
 8009dcc:	4b01      	ldr	r3, [pc, #4]	@ (8009dd4 <__errno+0x8>)
 8009dce:	6818      	ldr	r0, [r3, #0]
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	24000014 	.word	0x24000014

08009dd8 <__libc_init_array>:
 8009dd8:	b570      	push	{r4, r5, r6, lr}
 8009dda:	4d0d      	ldr	r5, [pc, #52]	@ (8009e10 <__libc_init_array+0x38>)
 8009ddc:	4c0d      	ldr	r4, [pc, #52]	@ (8009e14 <__libc_init_array+0x3c>)
 8009dde:	1b64      	subs	r4, r4, r5
 8009de0:	10a4      	asrs	r4, r4, #2
 8009de2:	2600      	movs	r6, #0
 8009de4:	42a6      	cmp	r6, r4
 8009de6:	d109      	bne.n	8009dfc <__libc_init_array+0x24>
 8009de8:	4d0b      	ldr	r5, [pc, #44]	@ (8009e18 <__libc_init_array+0x40>)
 8009dea:	4c0c      	ldr	r4, [pc, #48]	@ (8009e1c <__libc_init_array+0x44>)
 8009dec:	f000 fc66 	bl	800a6bc <_init>
 8009df0:	1b64      	subs	r4, r4, r5
 8009df2:	10a4      	asrs	r4, r4, #2
 8009df4:	2600      	movs	r6, #0
 8009df6:	42a6      	cmp	r6, r4
 8009df8:	d105      	bne.n	8009e06 <__libc_init_array+0x2e>
 8009dfa:	bd70      	pop	{r4, r5, r6, pc}
 8009dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e00:	4798      	blx	r3
 8009e02:	3601      	adds	r6, #1
 8009e04:	e7ee      	b.n	8009de4 <__libc_init_array+0xc>
 8009e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e0a:	4798      	blx	r3
 8009e0c:	3601      	adds	r6, #1
 8009e0e:	e7f2      	b.n	8009df6 <__libc_init_array+0x1e>
 8009e10:	0800a7b0 	.word	0x0800a7b0
 8009e14:	0800a7b0 	.word	0x0800a7b0
 8009e18:	0800a7b0 	.word	0x0800a7b0
 8009e1c:	0800a7b4 	.word	0x0800a7b4

08009e20 <__retarget_lock_acquire_recursive>:
 8009e20:	4770      	bx	lr

08009e22 <__retarget_lock_release_recursive>:
 8009e22:	4770      	bx	lr

08009e24 <_free_r>:
 8009e24:	b538      	push	{r3, r4, r5, lr}
 8009e26:	4605      	mov	r5, r0
 8009e28:	2900      	cmp	r1, #0
 8009e2a:	d041      	beq.n	8009eb0 <_free_r+0x8c>
 8009e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e30:	1f0c      	subs	r4, r1, #4
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	bfb8      	it	lt
 8009e36:	18e4      	addlt	r4, r4, r3
 8009e38:	f000 f8e0 	bl	8009ffc <__malloc_lock>
 8009e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8009eb4 <_free_r+0x90>)
 8009e3e:	6813      	ldr	r3, [r2, #0]
 8009e40:	b933      	cbnz	r3, 8009e50 <_free_r+0x2c>
 8009e42:	6063      	str	r3, [r4, #4]
 8009e44:	6014      	str	r4, [r2, #0]
 8009e46:	4628      	mov	r0, r5
 8009e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e4c:	f000 b8dc 	b.w	800a008 <__malloc_unlock>
 8009e50:	42a3      	cmp	r3, r4
 8009e52:	d908      	bls.n	8009e66 <_free_r+0x42>
 8009e54:	6820      	ldr	r0, [r4, #0]
 8009e56:	1821      	adds	r1, r4, r0
 8009e58:	428b      	cmp	r3, r1
 8009e5a:	bf01      	itttt	eq
 8009e5c:	6819      	ldreq	r1, [r3, #0]
 8009e5e:	685b      	ldreq	r3, [r3, #4]
 8009e60:	1809      	addeq	r1, r1, r0
 8009e62:	6021      	streq	r1, [r4, #0]
 8009e64:	e7ed      	b.n	8009e42 <_free_r+0x1e>
 8009e66:	461a      	mov	r2, r3
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	b10b      	cbz	r3, 8009e70 <_free_r+0x4c>
 8009e6c:	42a3      	cmp	r3, r4
 8009e6e:	d9fa      	bls.n	8009e66 <_free_r+0x42>
 8009e70:	6811      	ldr	r1, [r2, #0]
 8009e72:	1850      	adds	r0, r2, r1
 8009e74:	42a0      	cmp	r0, r4
 8009e76:	d10b      	bne.n	8009e90 <_free_r+0x6c>
 8009e78:	6820      	ldr	r0, [r4, #0]
 8009e7a:	4401      	add	r1, r0
 8009e7c:	1850      	adds	r0, r2, r1
 8009e7e:	4283      	cmp	r3, r0
 8009e80:	6011      	str	r1, [r2, #0]
 8009e82:	d1e0      	bne.n	8009e46 <_free_r+0x22>
 8009e84:	6818      	ldr	r0, [r3, #0]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	6053      	str	r3, [r2, #4]
 8009e8a:	4408      	add	r0, r1
 8009e8c:	6010      	str	r0, [r2, #0]
 8009e8e:	e7da      	b.n	8009e46 <_free_r+0x22>
 8009e90:	d902      	bls.n	8009e98 <_free_r+0x74>
 8009e92:	230c      	movs	r3, #12
 8009e94:	602b      	str	r3, [r5, #0]
 8009e96:	e7d6      	b.n	8009e46 <_free_r+0x22>
 8009e98:	6820      	ldr	r0, [r4, #0]
 8009e9a:	1821      	adds	r1, r4, r0
 8009e9c:	428b      	cmp	r3, r1
 8009e9e:	bf04      	itt	eq
 8009ea0:	6819      	ldreq	r1, [r3, #0]
 8009ea2:	685b      	ldreq	r3, [r3, #4]
 8009ea4:	6063      	str	r3, [r4, #4]
 8009ea6:	bf04      	itt	eq
 8009ea8:	1809      	addeq	r1, r1, r0
 8009eaa:	6021      	streq	r1, [r4, #0]
 8009eac:	6054      	str	r4, [r2, #4]
 8009eae:	e7ca      	b.n	8009e46 <_free_r+0x22>
 8009eb0:	bd38      	pop	{r3, r4, r5, pc}
 8009eb2:	bf00      	nop
 8009eb4:	24000968 	.word	0x24000968

08009eb8 <sbrk_aligned>:
 8009eb8:	b570      	push	{r4, r5, r6, lr}
 8009eba:	4e0f      	ldr	r6, [pc, #60]	@ (8009ef8 <sbrk_aligned+0x40>)
 8009ebc:	460c      	mov	r4, r1
 8009ebe:	6831      	ldr	r1, [r6, #0]
 8009ec0:	4605      	mov	r5, r0
 8009ec2:	b911      	cbnz	r1, 8009eca <sbrk_aligned+0x12>
 8009ec4:	f000 fba6 	bl	800a614 <_sbrk_r>
 8009ec8:	6030      	str	r0, [r6, #0]
 8009eca:	4621      	mov	r1, r4
 8009ecc:	4628      	mov	r0, r5
 8009ece:	f000 fba1 	bl	800a614 <_sbrk_r>
 8009ed2:	1c43      	adds	r3, r0, #1
 8009ed4:	d103      	bne.n	8009ede <sbrk_aligned+0x26>
 8009ed6:	f04f 34ff 	mov.w	r4, #4294967295
 8009eda:	4620      	mov	r0, r4
 8009edc:	bd70      	pop	{r4, r5, r6, pc}
 8009ede:	1cc4      	adds	r4, r0, #3
 8009ee0:	f024 0403 	bic.w	r4, r4, #3
 8009ee4:	42a0      	cmp	r0, r4
 8009ee6:	d0f8      	beq.n	8009eda <sbrk_aligned+0x22>
 8009ee8:	1a21      	subs	r1, r4, r0
 8009eea:	4628      	mov	r0, r5
 8009eec:	f000 fb92 	bl	800a614 <_sbrk_r>
 8009ef0:	3001      	adds	r0, #1
 8009ef2:	d1f2      	bne.n	8009eda <sbrk_aligned+0x22>
 8009ef4:	e7ef      	b.n	8009ed6 <sbrk_aligned+0x1e>
 8009ef6:	bf00      	nop
 8009ef8:	24000964 	.word	0x24000964

08009efc <_malloc_r>:
 8009efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f00:	1ccd      	adds	r5, r1, #3
 8009f02:	f025 0503 	bic.w	r5, r5, #3
 8009f06:	3508      	adds	r5, #8
 8009f08:	2d0c      	cmp	r5, #12
 8009f0a:	bf38      	it	cc
 8009f0c:	250c      	movcc	r5, #12
 8009f0e:	2d00      	cmp	r5, #0
 8009f10:	4606      	mov	r6, r0
 8009f12:	db01      	blt.n	8009f18 <_malloc_r+0x1c>
 8009f14:	42a9      	cmp	r1, r5
 8009f16:	d904      	bls.n	8009f22 <_malloc_r+0x26>
 8009f18:	230c      	movs	r3, #12
 8009f1a:	6033      	str	r3, [r6, #0]
 8009f1c:	2000      	movs	r0, #0
 8009f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ff8 <_malloc_r+0xfc>
 8009f26:	f000 f869 	bl	8009ffc <__malloc_lock>
 8009f2a:	f8d8 3000 	ldr.w	r3, [r8]
 8009f2e:	461c      	mov	r4, r3
 8009f30:	bb44      	cbnz	r4, 8009f84 <_malloc_r+0x88>
 8009f32:	4629      	mov	r1, r5
 8009f34:	4630      	mov	r0, r6
 8009f36:	f7ff ffbf 	bl	8009eb8 <sbrk_aligned>
 8009f3a:	1c43      	adds	r3, r0, #1
 8009f3c:	4604      	mov	r4, r0
 8009f3e:	d158      	bne.n	8009ff2 <_malloc_r+0xf6>
 8009f40:	f8d8 4000 	ldr.w	r4, [r8]
 8009f44:	4627      	mov	r7, r4
 8009f46:	2f00      	cmp	r7, #0
 8009f48:	d143      	bne.n	8009fd2 <_malloc_r+0xd6>
 8009f4a:	2c00      	cmp	r4, #0
 8009f4c:	d04b      	beq.n	8009fe6 <_malloc_r+0xea>
 8009f4e:	6823      	ldr	r3, [r4, #0]
 8009f50:	4639      	mov	r1, r7
 8009f52:	4630      	mov	r0, r6
 8009f54:	eb04 0903 	add.w	r9, r4, r3
 8009f58:	f000 fb5c 	bl	800a614 <_sbrk_r>
 8009f5c:	4581      	cmp	r9, r0
 8009f5e:	d142      	bne.n	8009fe6 <_malloc_r+0xea>
 8009f60:	6821      	ldr	r1, [r4, #0]
 8009f62:	1a6d      	subs	r5, r5, r1
 8009f64:	4629      	mov	r1, r5
 8009f66:	4630      	mov	r0, r6
 8009f68:	f7ff ffa6 	bl	8009eb8 <sbrk_aligned>
 8009f6c:	3001      	adds	r0, #1
 8009f6e:	d03a      	beq.n	8009fe6 <_malloc_r+0xea>
 8009f70:	6823      	ldr	r3, [r4, #0]
 8009f72:	442b      	add	r3, r5
 8009f74:	6023      	str	r3, [r4, #0]
 8009f76:	f8d8 3000 	ldr.w	r3, [r8]
 8009f7a:	685a      	ldr	r2, [r3, #4]
 8009f7c:	bb62      	cbnz	r2, 8009fd8 <_malloc_r+0xdc>
 8009f7e:	f8c8 7000 	str.w	r7, [r8]
 8009f82:	e00f      	b.n	8009fa4 <_malloc_r+0xa8>
 8009f84:	6822      	ldr	r2, [r4, #0]
 8009f86:	1b52      	subs	r2, r2, r5
 8009f88:	d420      	bmi.n	8009fcc <_malloc_r+0xd0>
 8009f8a:	2a0b      	cmp	r2, #11
 8009f8c:	d917      	bls.n	8009fbe <_malloc_r+0xc2>
 8009f8e:	1961      	adds	r1, r4, r5
 8009f90:	42a3      	cmp	r3, r4
 8009f92:	6025      	str	r5, [r4, #0]
 8009f94:	bf18      	it	ne
 8009f96:	6059      	strne	r1, [r3, #4]
 8009f98:	6863      	ldr	r3, [r4, #4]
 8009f9a:	bf08      	it	eq
 8009f9c:	f8c8 1000 	streq.w	r1, [r8]
 8009fa0:	5162      	str	r2, [r4, r5]
 8009fa2:	604b      	str	r3, [r1, #4]
 8009fa4:	4630      	mov	r0, r6
 8009fa6:	f000 f82f 	bl	800a008 <__malloc_unlock>
 8009faa:	f104 000b 	add.w	r0, r4, #11
 8009fae:	1d23      	adds	r3, r4, #4
 8009fb0:	f020 0007 	bic.w	r0, r0, #7
 8009fb4:	1ac2      	subs	r2, r0, r3
 8009fb6:	bf1c      	itt	ne
 8009fb8:	1a1b      	subne	r3, r3, r0
 8009fba:	50a3      	strne	r3, [r4, r2]
 8009fbc:	e7af      	b.n	8009f1e <_malloc_r+0x22>
 8009fbe:	6862      	ldr	r2, [r4, #4]
 8009fc0:	42a3      	cmp	r3, r4
 8009fc2:	bf0c      	ite	eq
 8009fc4:	f8c8 2000 	streq.w	r2, [r8]
 8009fc8:	605a      	strne	r2, [r3, #4]
 8009fca:	e7eb      	b.n	8009fa4 <_malloc_r+0xa8>
 8009fcc:	4623      	mov	r3, r4
 8009fce:	6864      	ldr	r4, [r4, #4]
 8009fd0:	e7ae      	b.n	8009f30 <_malloc_r+0x34>
 8009fd2:	463c      	mov	r4, r7
 8009fd4:	687f      	ldr	r7, [r7, #4]
 8009fd6:	e7b6      	b.n	8009f46 <_malloc_r+0x4a>
 8009fd8:	461a      	mov	r2, r3
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	42a3      	cmp	r3, r4
 8009fde:	d1fb      	bne.n	8009fd8 <_malloc_r+0xdc>
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	6053      	str	r3, [r2, #4]
 8009fe4:	e7de      	b.n	8009fa4 <_malloc_r+0xa8>
 8009fe6:	230c      	movs	r3, #12
 8009fe8:	6033      	str	r3, [r6, #0]
 8009fea:	4630      	mov	r0, r6
 8009fec:	f000 f80c 	bl	800a008 <__malloc_unlock>
 8009ff0:	e794      	b.n	8009f1c <_malloc_r+0x20>
 8009ff2:	6005      	str	r5, [r0, #0]
 8009ff4:	e7d6      	b.n	8009fa4 <_malloc_r+0xa8>
 8009ff6:	bf00      	nop
 8009ff8:	24000968 	.word	0x24000968

08009ffc <__malloc_lock>:
 8009ffc:	4801      	ldr	r0, [pc, #4]	@ (800a004 <__malloc_lock+0x8>)
 8009ffe:	f7ff bf0f 	b.w	8009e20 <__retarget_lock_acquire_recursive>
 800a002:	bf00      	nop
 800a004:	24000960 	.word	0x24000960

0800a008 <__malloc_unlock>:
 800a008:	4801      	ldr	r0, [pc, #4]	@ (800a010 <__malloc_unlock+0x8>)
 800a00a:	f7ff bf0a 	b.w	8009e22 <__retarget_lock_release_recursive>
 800a00e:	bf00      	nop
 800a010:	24000960 	.word	0x24000960

0800a014 <__ssputs_r>:
 800a014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a018:	688e      	ldr	r6, [r1, #8]
 800a01a:	461f      	mov	r7, r3
 800a01c:	42be      	cmp	r6, r7
 800a01e:	680b      	ldr	r3, [r1, #0]
 800a020:	4682      	mov	sl, r0
 800a022:	460c      	mov	r4, r1
 800a024:	4690      	mov	r8, r2
 800a026:	d82d      	bhi.n	800a084 <__ssputs_r+0x70>
 800a028:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a02c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a030:	d026      	beq.n	800a080 <__ssputs_r+0x6c>
 800a032:	6965      	ldr	r5, [r4, #20]
 800a034:	6909      	ldr	r1, [r1, #16]
 800a036:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a03a:	eba3 0901 	sub.w	r9, r3, r1
 800a03e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a042:	1c7b      	adds	r3, r7, #1
 800a044:	444b      	add	r3, r9
 800a046:	106d      	asrs	r5, r5, #1
 800a048:	429d      	cmp	r5, r3
 800a04a:	bf38      	it	cc
 800a04c:	461d      	movcc	r5, r3
 800a04e:	0553      	lsls	r3, r2, #21
 800a050:	d527      	bpl.n	800a0a2 <__ssputs_r+0x8e>
 800a052:	4629      	mov	r1, r5
 800a054:	f7ff ff52 	bl	8009efc <_malloc_r>
 800a058:	4606      	mov	r6, r0
 800a05a:	b360      	cbz	r0, 800a0b6 <__ssputs_r+0xa2>
 800a05c:	6921      	ldr	r1, [r4, #16]
 800a05e:	464a      	mov	r2, r9
 800a060:	f000 fae8 	bl	800a634 <memcpy>
 800a064:	89a3      	ldrh	r3, [r4, #12]
 800a066:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a06a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a06e:	81a3      	strh	r3, [r4, #12]
 800a070:	6126      	str	r6, [r4, #16]
 800a072:	6165      	str	r5, [r4, #20]
 800a074:	444e      	add	r6, r9
 800a076:	eba5 0509 	sub.w	r5, r5, r9
 800a07a:	6026      	str	r6, [r4, #0]
 800a07c:	60a5      	str	r5, [r4, #8]
 800a07e:	463e      	mov	r6, r7
 800a080:	42be      	cmp	r6, r7
 800a082:	d900      	bls.n	800a086 <__ssputs_r+0x72>
 800a084:	463e      	mov	r6, r7
 800a086:	6820      	ldr	r0, [r4, #0]
 800a088:	4632      	mov	r2, r6
 800a08a:	4641      	mov	r1, r8
 800a08c:	f000 faa8 	bl	800a5e0 <memmove>
 800a090:	68a3      	ldr	r3, [r4, #8]
 800a092:	1b9b      	subs	r3, r3, r6
 800a094:	60a3      	str	r3, [r4, #8]
 800a096:	6823      	ldr	r3, [r4, #0]
 800a098:	4433      	add	r3, r6
 800a09a:	6023      	str	r3, [r4, #0]
 800a09c:	2000      	movs	r0, #0
 800a09e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0a2:	462a      	mov	r2, r5
 800a0a4:	f000 fad4 	bl	800a650 <_realloc_r>
 800a0a8:	4606      	mov	r6, r0
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	d1e0      	bne.n	800a070 <__ssputs_r+0x5c>
 800a0ae:	6921      	ldr	r1, [r4, #16]
 800a0b0:	4650      	mov	r0, sl
 800a0b2:	f7ff feb7 	bl	8009e24 <_free_r>
 800a0b6:	230c      	movs	r3, #12
 800a0b8:	f8ca 3000 	str.w	r3, [sl]
 800a0bc:	89a3      	ldrh	r3, [r4, #12]
 800a0be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0c2:	81a3      	strh	r3, [r4, #12]
 800a0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c8:	e7e9      	b.n	800a09e <__ssputs_r+0x8a>
	...

0800a0cc <_svfiprintf_r>:
 800a0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d0:	4698      	mov	r8, r3
 800a0d2:	898b      	ldrh	r3, [r1, #12]
 800a0d4:	061b      	lsls	r3, r3, #24
 800a0d6:	b09d      	sub	sp, #116	@ 0x74
 800a0d8:	4607      	mov	r7, r0
 800a0da:	460d      	mov	r5, r1
 800a0dc:	4614      	mov	r4, r2
 800a0de:	d510      	bpl.n	800a102 <_svfiprintf_r+0x36>
 800a0e0:	690b      	ldr	r3, [r1, #16]
 800a0e2:	b973      	cbnz	r3, 800a102 <_svfiprintf_r+0x36>
 800a0e4:	2140      	movs	r1, #64	@ 0x40
 800a0e6:	f7ff ff09 	bl	8009efc <_malloc_r>
 800a0ea:	6028      	str	r0, [r5, #0]
 800a0ec:	6128      	str	r0, [r5, #16]
 800a0ee:	b930      	cbnz	r0, 800a0fe <_svfiprintf_r+0x32>
 800a0f0:	230c      	movs	r3, #12
 800a0f2:	603b      	str	r3, [r7, #0]
 800a0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f8:	b01d      	add	sp, #116	@ 0x74
 800a0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0fe:	2340      	movs	r3, #64	@ 0x40
 800a100:	616b      	str	r3, [r5, #20]
 800a102:	2300      	movs	r3, #0
 800a104:	9309      	str	r3, [sp, #36]	@ 0x24
 800a106:	2320      	movs	r3, #32
 800a108:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a10c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a110:	2330      	movs	r3, #48	@ 0x30
 800a112:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a2b0 <_svfiprintf_r+0x1e4>
 800a116:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a11a:	f04f 0901 	mov.w	r9, #1
 800a11e:	4623      	mov	r3, r4
 800a120:	469a      	mov	sl, r3
 800a122:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a126:	b10a      	cbz	r2, 800a12c <_svfiprintf_r+0x60>
 800a128:	2a25      	cmp	r2, #37	@ 0x25
 800a12a:	d1f9      	bne.n	800a120 <_svfiprintf_r+0x54>
 800a12c:	ebba 0b04 	subs.w	fp, sl, r4
 800a130:	d00b      	beq.n	800a14a <_svfiprintf_r+0x7e>
 800a132:	465b      	mov	r3, fp
 800a134:	4622      	mov	r2, r4
 800a136:	4629      	mov	r1, r5
 800a138:	4638      	mov	r0, r7
 800a13a:	f7ff ff6b 	bl	800a014 <__ssputs_r>
 800a13e:	3001      	adds	r0, #1
 800a140:	f000 80a7 	beq.w	800a292 <_svfiprintf_r+0x1c6>
 800a144:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a146:	445a      	add	r2, fp
 800a148:	9209      	str	r2, [sp, #36]	@ 0x24
 800a14a:	f89a 3000 	ldrb.w	r3, [sl]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	f000 809f 	beq.w	800a292 <_svfiprintf_r+0x1c6>
 800a154:	2300      	movs	r3, #0
 800a156:	f04f 32ff 	mov.w	r2, #4294967295
 800a15a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a15e:	f10a 0a01 	add.w	sl, sl, #1
 800a162:	9304      	str	r3, [sp, #16]
 800a164:	9307      	str	r3, [sp, #28]
 800a166:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a16a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a16c:	4654      	mov	r4, sl
 800a16e:	2205      	movs	r2, #5
 800a170:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a174:	484e      	ldr	r0, [pc, #312]	@ (800a2b0 <_svfiprintf_r+0x1e4>)
 800a176:	f7f6 f8bb 	bl	80002f0 <memchr>
 800a17a:	9a04      	ldr	r2, [sp, #16]
 800a17c:	b9d8      	cbnz	r0, 800a1b6 <_svfiprintf_r+0xea>
 800a17e:	06d0      	lsls	r0, r2, #27
 800a180:	bf44      	itt	mi
 800a182:	2320      	movmi	r3, #32
 800a184:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a188:	0711      	lsls	r1, r2, #28
 800a18a:	bf44      	itt	mi
 800a18c:	232b      	movmi	r3, #43	@ 0x2b
 800a18e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a192:	f89a 3000 	ldrb.w	r3, [sl]
 800a196:	2b2a      	cmp	r3, #42	@ 0x2a
 800a198:	d015      	beq.n	800a1c6 <_svfiprintf_r+0xfa>
 800a19a:	9a07      	ldr	r2, [sp, #28]
 800a19c:	4654      	mov	r4, sl
 800a19e:	2000      	movs	r0, #0
 800a1a0:	f04f 0c0a 	mov.w	ip, #10
 800a1a4:	4621      	mov	r1, r4
 800a1a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1aa:	3b30      	subs	r3, #48	@ 0x30
 800a1ac:	2b09      	cmp	r3, #9
 800a1ae:	d94b      	bls.n	800a248 <_svfiprintf_r+0x17c>
 800a1b0:	b1b0      	cbz	r0, 800a1e0 <_svfiprintf_r+0x114>
 800a1b2:	9207      	str	r2, [sp, #28]
 800a1b4:	e014      	b.n	800a1e0 <_svfiprintf_r+0x114>
 800a1b6:	eba0 0308 	sub.w	r3, r0, r8
 800a1ba:	fa09 f303 	lsl.w	r3, r9, r3
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	9304      	str	r3, [sp, #16]
 800a1c2:	46a2      	mov	sl, r4
 800a1c4:	e7d2      	b.n	800a16c <_svfiprintf_r+0xa0>
 800a1c6:	9b03      	ldr	r3, [sp, #12]
 800a1c8:	1d19      	adds	r1, r3, #4
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	9103      	str	r1, [sp, #12]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	bfbb      	ittet	lt
 800a1d2:	425b      	neglt	r3, r3
 800a1d4:	f042 0202 	orrlt.w	r2, r2, #2
 800a1d8:	9307      	strge	r3, [sp, #28]
 800a1da:	9307      	strlt	r3, [sp, #28]
 800a1dc:	bfb8      	it	lt
 800a1de:	9204      	strlt	r2, [sp, #16]
 800a1e0:	7823      	ldrb	r3, [r4, #0]
 800a1e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a1e4:	d10a      	bne.n	800a1fc <_svfiprintf_r+0x130>
 800a1e6:	7863      	ldrb	r3, [r4, #1]
 800a1e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1ea:	d132      	bne.n	800a252 <_svfiprintf_r+0x186>
 800a1ec:	9b03      	ldr	r3, [sp, #12]
 800a1ee:	1d1a      	adds	r2, r3, #4
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	9203      	str	r2, [sp, #12]
 800a1f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a1f8:	3402      	adds	r4, #2
 800a1fa:	9305      	str	r3, [sp, #20]
 800a1fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a2c0 <_svfiprintf_r+0x1f4>
 800a200:	7821      	ldrb	r1, [r4, #0]
 800a202:	2203      	movs	r2, #3
 800a204:	4650      	mov	r0, sl
 800a206:	f7f6 f873 	bl	80002f0 <memchr>
 800a20a:	b138      	cbz	r0, 800a21c <_svfiprintf_r+0x150>
 800a20c:	9b04      	ldr	r3, [sp, #16]
 800a20e:	eba0 000a 	sub.w	r0, r0, sl
 800a212:	2240      	movs	r2, #64	@ 0x40
 800a214:	4082      	lsls	r2, r0
 800a216:	4313      	orrs	r3, r2
 800a218:	3401      	adds	r4, #1
 800a21a:	9304      	str	r3, [sp, #16]
 800a21c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a220:	4824      	ldr	r0, [pc, #144]	@ (800a2b4 <_svfiprintf_r+0x1e8>)
 800a222:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a226:	2206      	movs	r2, #6
 800a228:	f7f6 f862 	bl	80002f0 <memchr>
 800a22c:	2800      	cmp	r0, #0
 800a22e:	d036      	beq.n	800a29e <_svfiprintf_r+0x1d2>
 800a230:	4b21      	ldr	r3, [pc, #132]	@ (800a2b8 <_svfiprintf_r+0x1ec>)
 800a232:	bb1b      	cbnz	r3, 800a27c <_svfiprintf_r+0x1b0>
 800a234:	9b03      	ldr	r3, [sp, #12]
 800a236:	3307      	adds	r3, #7
 800a238:	f023 0307 	bic.w	r3, r3, #7
 800a23c:	3308      	adds	r3, #8
 800a23e:	9303      	str	r3, [sp, #12]
 800a240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a242:	4433      	add	r3, r6
 800a244:	9309      	str	r3, [sp, #36]	@ 0x24
 800a246:	e76a      	b.n	800a11e <_svfiprintf_r+0x52>
 800a248:	fb0c 3202 	mla	r2, ip, r2, r3
 800a24c:	460c      	mov	r4, r1
 800a24e:	2001      	movs	r0, #1
 800a250:	e7a8      	b.n	800a1a4 <_svfiprintf_r+0xd8>
 800a252:	2300      	movs	r3, #0
 800a254:	3401      	adds	r4, #1
 800a256:	9305      	str	r3, [sp, #20]
 800a258:	4619      	mov	r1, r3
 800a25a:	f04f 0c0a 	mov.w	ip, #10
 800a25e:	4620      	mov	r0, r4
 800a260:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a264:	3a30      	subs	r2, #48	@ 0x30
 800a266:	2a09      	cmp	r2, #9
 800a268:	d903      	bls.n	800a272 <_svfiprintf_r+0x1a6>
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d0c6      	beq.n	800a1fc <_svfiprintf_r+0x130>
 800a26e:	9105      	str	r1, [sp, #20]
 800a270:	e7c4      	b.n	800a1fc <_svfiprintf_r+0x130>
 800a272:	fb0c 2101 	mla	r1, ip, r1, r2
 800a276:	4604      	mov	r4, r0
 800a278:	2301      	movs	r3, #1
 800a27a:	e7f0      	b.n	800a25e <_svfiprintf_r+0x192>
 800a27c:	ab03      	add	r3, sp, #12
 800a27e:	9300      	str	r3, [sp, #0]
 800a280:	462a      	mov	r2, r5
 800a282:	4b0e      	ldr	r3, [pc, #56]	@ (800a2bc <_svfiprintf_r+0x1f0>)
 800a284:	a904      	add	r1, sp, #16
 800a286:	4638      	mov	r0, r7
 800a288:	f3af 8000 	nop.w
 800a28c:	1c42      	adds	r2, r0, #1
 800a28e:	4606      	mov	r6, r0
 800a290:	d1d6      	bne.n	800a240 <_svfiprintf_r+0x174>
 800a292:	89ab      	ldrh	r3, [r5, #12]
 800a294:	065b      	lsls	r3, r3, #25
 800a296:	f53f af2d 	bmi.w	800a0f4 <_svfiprintf_r+0x28>
 800a29a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a29c:	e72c      	b.n	800a0f8 <_svfiprintf_r+0x2c>
 800a29e:	ab03      	add	r3, sp, #12
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	462a      	mov	r2, r5
 800a2a4:	4b05      	ldr	r3, [pc, #20]	@ (800a2bc <_svfiprintf_r+0x1f0>)
 800a2a6:	a904      	add	r1, sp, #16
 800a2a8:	4638      	mov	r0, r7
 800a2aa:	f000 f879 	bl	800a3a0 <_printf_i>
 800a2ae:	e7ed      	b.n	800a28c <_svfiprintf_r+0x1c0>
 800a2b0:	0800a774 	.word	0x0800a774
 800a2b4:	0800a77e 	.word	0x0800a77e
 800a2b8:	00000000 	.word	0x00000000
 800a2bc:	0800a015 	.word	0x0800a015
 800a2c0:	0800a77a 	.word	0x0800a77a

0800a2c4 <_printf_common>:
 800a2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2c8:	4616      	mov	r6, r2
 800a2ca:	4698      	mov	r8, r3
 800a2cc:	688a      	ldr	r2, [r1, #8]
 800a2ce:	690b      	ldr	r3, [r1, #16]
 800a2d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	bfb8      	it	lt
 800a2d8:	4613      	movlt	r3, r2
 800a2da:	6033      	str	r3, [r6, #0]
 800a2dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a2e0:	4607      	mov	r7, r0
 800a2e2:	460c      	mov	r4, r1
 800a2e4:	b10a      	cbz	r2, 800a2ea <_printf_common+0x26>
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	6033      	str	r3, [r6, #0]
 800a2ea:	6823      	ldr	r3, [r4, #0]
 800a2ec:	0699      	lsls	r1, r3, #26
 800a2ee:	bf42      	ittt	mi
 800a2f0:	6833      	ldrmi	r3, [r6, #0]
 800a2f2:	3302      	addmi	r3, #2
 800a2f4:	6033      	strmi	r3, [r6, #0]
 800a2f6:	6825      	ldr	r5, [r4, #0]
 800a2f8:	f015 0506 	ands.w	r5, r5, #6
 800a2fc:	d106      	bne.n	800a30c <_printf_common+0x48>
 800a2fe:	f104 0a19 	add.w	sl, r4, #25
 800a302:	68e3      	ldr	r3, [r4, #12]
 800a304:	6832      	ldr	r2, [r6, #0]
 800a306:	1a9b      	subs	r3, r3, r2
 800a308:	42ab      	cmp	r3, r5
 800a30a:	dc26      	bgt.n	800a35a <_printf_common+0x96>
 800a30c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a310:	6822      	ldr	r2, [r4, #0]
 800a312:	3b00      	subs	r3, #0
 800a314:	bf18      	it	ne
 800a316:	2301      	movne	r3, #1
 800a318:	0692      	lsls	r2, r2, #26
 800a31a:	d42b      	bmi.n	800a374 <_printf_common+0xb0>
 800a31c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a320:	4641      	mov	r1, r8
 800a322:	4638      	mov	r0, r7
 800a324:	47c8      	blx	r9
 800a326:	3001      	adds	r0, #1
 800a328:	d01e      	beq.n	800a368 <_printf_common+0xa4>
 800a32a:	6823      	ldr	r3, [r4, #0]
 800a32c:	6922      	ldr	r2, [r4, #16]
 800a32e:	f003 0306 	and.w	r3, r3, #6
 800a332:	2b04      	cmp	r3, #4
 800a334:	bf02      	ittt	eq
 800a336:	68e5      	ldreq	r5, [r4, #12]
 800a338:	6833      	ldreq	r3, [r6, #0]
 800a33a:	1aed      	subeq	r5, r5, r3
 800a33c:	68a3      	ldr	r3, [r4, #8]
 800a33e:	bf0c      	ite	eq
 800a340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a344:	2500      	movne	r5, #0
 800a346:	4293      	cmp	r3, r2
 800a348:	bfc4      	itt	gt
 800a34a:	1a9b      	subgt	r3, r3, r2
 800a34c:	18ed      	addgt	r5, r5, r3
 800a34e:	2600      	movs	r6, #0
 800a350:	341a      	adds	r4, #26
 800a352:	42b5      	cmp	r5, r6
 800a354:	d11a      	bne.n	800a38c <_printf_common+0xc8>
 800a356:	2000      	movs	r0, #0
 800a358:	e008      	b.n	800a36c <_printf_common+0xa8>
 800a35a:	2301      	movs	r3, #1
 800a35c:	4652      	mov	r2, sl
 800a35e:	4641      	mov	r1, r8
 800a360:	4638      	mov	r0, r7
 800a362:	47c8      	blx	r9
 800a364:	3001      	adds	r0, #1
 800a366:	d103      	bne.n	800a370 <_printf_common+0xac>
 800a368:	f04f 30ff 	mov.w	r0, #4294967295
 800a36c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a370:	3501      	adds	r5, #1
 800a372:	e7c6      	b.n	800a302 <_printf_common+0x3e>
 800a374:	18e1      	adds	r1, r4, r3
 800a376:	1c5a      	adds	r2, r3, #1
 800a378:	2030      	movs	r0, #48	@ 0x30
 800a37a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a37e:	4422      	add	r2, r4
 800a380:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a384:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a388:	3302      	adds	r3, #2
 800a38a:	e7c7      	b.n	800a31c <_printf_common+0x58>
 800a38c:	2301      	movs	r3, #1
 800a38e:	4622      	mov	r2, r4
 800a390:	4641      	mov	r1, r8
 800a392:	4638      	mov	r0, r7
 800a394:	47c8      	blx	r9
 800a396:	3001      	adds	r0, #1
 800a398:	d0e6      	beq.n	800a368 <_printf_common+0xa4>
 800a39a:	3601      	adds	r6, #1
 800a39c:	e7d9      	b.n	800a352 <_printf_common+0x8e>
	...

0800a3a0 <_printf_i>:
 800a3a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3a4:	7e0f      	ldrb	r7, [r1, #24]
 800a3a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a3a8:	2f78      	cmp	r7, #120	@ 0x78
 800a3aa:	4691      	mov	r9, r2
 800a3ac:	4680      	mov	r8, r0
 800a3ae:	460c      	mov	r4, r1
 800a3b0:	469a      	mov	sl, r3
 800a3b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a3b6:	d807      	bhi.n	800a3c8 <_printf_i+0x28>
 800a3b8:	2f62      	cmp	r7, #98	@ 0x62
 800a3ba:	d80a      	bhi.n	800a3d2 <_printf_i+0x32>
 800a3bc:	2f00      	cmp	r7, #0
 800a3be:	f000 80d2 	beq.w	800a566 <_printf_i+0x1c6>
 800a3c2:	2f58      	cmp	r7, #88	@ 0x58
 800a3c4:	f000 80b9 	beq.w	800a53a <_printf_i+0x19a>
 800a3c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a3cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a3d0:	e03a      	b.n	800a448 <_printf_i+0xa8>
 800a3d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a3d6:	2b15      	cmp	r3, #21
 800a3d8:	d8f6      	bhi.n	800a3c8 <_printf_i+0x28>
 800a3da:	a101      	add	r1, pc, #4	@ (adr r1, 800a3e0 <_printf_i+0x40>)
 800a3dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a3e0:	0800a439 	.word	0x0800a439
 800a3e4:	0800a44d 	.word	0x0800a44d
 800a3e8:	0800a3c9 	.word	0x0800a3c9
 800a3ec:	0800a3c9 	.word	0x0800a3c9
 800a3f0:	0800a3c9 	.word	0x0800a3c9
 800a3f4:	0800a3c9 	.word	0x0800a3c9
 800a3f8:	0800a44d 	.word	0x0800a44d
 800a3fc:	0800a3c9 	.word	0x0800a3c9
 800a400:	0800a3c9 	.word	0x0800a3c9
 800a404:	0800a3c9 	.word	0x0800a3c9
 800a408:	0800a3c9 	.word	0x0800a3c9
 800a40c:	0800a54d 	.word	0x0800a54d
 800a410:	0800a477 	.word	0x0800a477
 800a414:	0800a507 	.word	0x0800a507
 800a418:	0800a3c9 	.word	0x0800a3c9
 800a41c:	0800a3c9 	.word	0x0800a3c9
 800a420:	0800a56f 	.word	0x0800a56f
 800a424:	0800a3c9 	.word	0x0800a3c9
 800a428:	0800a477 	.word	0x0800a477
 800a42c:	0800a3c9 	.word	0x0800a3c9
 800a430:	0800a3c9 	.word	0x0800a3c9
 800a434:	0800a50f 	.word	0x0800a50f
 800a438:	6833      	ldr	r3, [r6, #0]
 800a43a:	1d1a      	adds	r2, r3, #4
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	6032      	str	r2, [r6, #0]
 800a440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a444:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a448:	2301      	movs	r3, #1
 800a44a:	e09d      	b.n	800a588 <_printf_i+0x1e8>
 800a44c:	6833      	ldr	r3, [r6, #0]
 800a44e:	6820      	ldr	r0, [r4, #0]
 800a450:	1d19      	adds	r1, r3, #4
 800a452:	6031      	str	r1, [r6, #0]
 800a454:	0606      	lsls	r6, r0, #24
 800a456:	d501      	bpl.n	800a45c <_printf_i+0xbc>
 800a458:	681d      	ldr	r5, [r3, #0]
 800a45a:	e003      	b.n	800a464 <_printf_i+0xc4>
 800a45c:	0645      	lsls	r5, r0, #25
 800a45e:	d5fb      	bpl.n	800a458 <_printf_i+0xb8>
 800a460:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a464:	2d00      	cmp	r5, #0
 800a466:	da03      	bge.n	800a470 <_printf_i+0xd0>
 800a468:	232d      	movs	r3, #45	@ 0x2d
 800a46a:	426d      	negs	r5, r5
 800a46c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a470:	4859      	ldr	r0, [pc, #356]	@ (800a5d8 <_printf_i+0x238>)
 800a472:	230a      	movs	r3, #10
 800a474:	e011      	b.n	800a49a <_printf_i+0xfa>
 800a476:	6821      	ldr	r1, [r4, #0]
 800a478:	6833      	ldr	r3, [r6, #0]
 800a47a:	0608      	lsls	r0, r1, #24
 800a47c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a480:	d402      	bmi.n	800a488 <_printf_i+0xe8>
 800a482:	0649      	lsls	r1, r1, #25
 800a484:	bf48      	it	mi
 800a486:	b2ad      	uxthmi	r5, r5
 800a488:	2f6f      	cmp	r7, #111	@ 0x6f
 800a48a:	4853      	ldr	r0, [pc, #332]	@ (800a5d8 <_printf_i+0x238>)
 800a48c:	6033      	str	r3, [r6, #0]
 800a48e:	bf14      	ite	ne
 800a490:	230a      	movne	r3, #10
 800a492:	2308      	moveq	r3, #8
 800a494:	2100      	movs	r1, #0
 800a496:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a49a:	6866      	ldr	r6, [r4, #4]
 800a49c:	60a6      	str	r6, [r4, #8]
 800a49e:	2e00      	cmp	r6, #0
 800a4a0:	bfa2      	ittt	ge
 800a4a2:	6821      	ldrge	r1, [r4, #0]
 800a4a4:	f021 0104 	bicge.w	r1, r1, #4
 800a4a8:	6021      	strge	r1, [r4, #0]
 800a4aa:	b90d      	cbnz	r5, 800a4b0 <_printf_i+0x110>
 800a4ac:	2e00      	cmp	r6, #0
 800a4ae:	d04b      	beq.n	800a548 <_printf_i+0x1a8>
 800a4b0:	4616      	mov	r6, r2
 800a4b2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a4b6:	fb03 5711 	mls	r7, r3, r1, r5
 800a4ba:	5dc7      	ldrb	r7, [r0, r7]
 800a4bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a4c0:	462f      	mov	r7, r5
 800a4c2:	42bb      	cmp	r3, r7
 800a4c4:	460d      	mov	r5, r1
 800a4c6:	d9f4      	bls.n	800a4b2 <_printf_i+0x112>
 800a4c8:	2b08      	cmp	r3, #8
 800a4ca:	d10b      	bne.n	800a4e4 <_printf_i+0x144>
 800a4cc:	6823      	ldr	r3, [r4, #0]
 800a4ce:	07df      	lsls	r7, r3, #31
 800a4d0:	d508      	bpl.n	800a4e4 <_printf_i+0x144>
 800a4d2:	6923      	ldr	r3, [r4, #16]
 800a4d4:	6861      	ldr	r1, [r4, #4]
 800a4d6:	4299      	cmp	r1, r3
 800a4d8:	bfde      	ittt	le
 800a4da:	2330      	movle	r3, #48	@ 0x30
 800a4dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a4e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a4e4:	1b92      	subs	r2, r2, r6
 800a4e6:	6122      	str	r2, [r4, #16]
 800a4e8:	f8cd a000 	str.w	sl, [sp]
 800a4ec:	464b      	mov	r3, r9
 800a4ee:	aa03      	add	r2, sp, #12
 800a4f0:	4621      	mov	r1, r4
 800a4f2:	4640      	mov	r0, r8
 800a4f4:	f7ff fee6 	bl	800a2c4 <_printf_common>
 800a4f8:	3001      	adds	r0, #1
 800a4fa:	d14a      	bne.n	800a592 <_printf_i+0x1f2>
 800a4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a500:	b004      	add	sp, #16
 800a502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a506:	6823      	ldr	r3, [r4, #0]
 800a508:	f043 0320 	orr.w	r3, r3, #32
 800a50c:	6023      	str	r3, [r4, #0]
 800a50e:	4833      	ldr	r0, [pc, #204]	@ (800a5dc <_printf_i+0x23c>)
 800a510:	2778      	movs	r7, #120	@ 0x78
 800a512:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a516:	6823      	ldr	r3, [r4, #0]
 800a518:	6831      	ldr	r1, [r6, #0]
 800a51a:	061f      	lsls	r7, r3, #24
 800a51c:	f851 5b04 	ldr.w	r5, [r1], #4
 800a520:	d402      	bmi.n	800a528 <_printf_i+0x188>
 800a522:	065f      	lsls	r7, r3, #25
 800a524:	bf48      	it	mi
 800a526:	b2ad      	uxthmi	r5, r5
 800a528:	6031      	str	r1, [r6, #0]
 800a52a:	07d9      	lsls	r1, r3, #31
 800a52c:	bf44      	itt	mi
 800a52e:	f043 0320 	orrmi.w	r3, r3, #32
 800a532:	6023      	strmi	r3, [r4, #0]
 800a534:	b11d      	cbz	r5, 800a53e <_printf_i+0x19e>
 800a536:	2310      	movs	r3, #16
 800a538:	e7ac      	b.n	800a494 <_printf_i+0xf4>
 800a53a:	4827      	ldr	r0, [pc, #156]	@ (800a5d8 <_printf_i+0x238>)
 800a53c:	e7e9      	b.n	800a512 <_printf_i+0x172>
 800a53e:	6823      	ldr	r3, [r4, #0]
 800a540:	f023 0320 	bic.w	r3, r3, #32
 800a544:	6023      	str	r3, [r4, #0]
 800a546:	e7f6      	b.n	800a536 <_printf_i+0x196>
 800a548:	4616      	mov	r6, r2
 800a54a:	e7bd      	b.n	800a4c8 <_printf_i+0x128>
 800a54c:	6833      	ldr	r3, [r6, #0]
 800a54e:	6825      	ldr	r5, [r4, #0]
 800a550:	6961      	ldr	r1, [r4, #20]
 800a552:	1d18      	adds	r0, r3, #4
 800a554:	6030      	str	r0, [r6, #0]
 800a556:	062e      	lsls	r6, r5, #24
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	d501      	bpl.n	800a560 <_printf_i+0x1c0>
 800a55c:	6019      	str	r1, [r3, #0]
 800a55e:	e002      	b.n	800a566 <_printf_i+0x1c6>
 800a560:	0668      	lsls	r0, r5, #25
 800a562:	d5fb      	bpl.n	800a55c <_printf_i+0x1bc>
 800a564:	8019      	strh	r1, [r3, #0]
 800a566:	2300      	movs	r3, #0
 800a568:	6123      	str	r3, [r4, #16]
 800a56a:	4616      	mov	r6, r2
 800a56c:	e7bc      	b.n	800a4e8 <_printf_i+0x148>
 800a56e:	6833      	ldr	r3, [r6, #0]
 800a570:	1d1a      	adds	r2, r3, #4
 800a572:	6032      	str	r2, [r6, #0]
 800a574:	681e      	ldr	r6, [r3, #0]
 800a576:	6862      	ldr	r2, [r4, #4]
 800a578:	2100      	movs	r1, #0
 800a57a:	4630      	mov	r0, r6
 800a57c:	f7f5 feb8 	bl	80002f0 <memchr>
 800a580:	b108      	cbz	r0, 800a586 <_printf_i+0x1e6>
 800a582:	1b80      	subs	r0, r0, r6
 800a584:	6060      	str	r0, [r4, #4]
 800a586:	6863      	ldr	r3, [r4, #4]
 800a588:	6123      	str	r3, [r4, #16]
 800a58a:	2300      	movs	r3, #0
 800a58c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a590:	e7aa      	b.n	800a4e8 <_printf_i+0x148>
 800a592:	6923      	ldr	r3, [r4, #16]
 800a594:	4632      	mov	r2, r6
 800a596:	4649      	mov	r1, r9
 800a598:	4640      	mov	r0, r8
 800a59a:	47d0      	blx	sl
 800a59c:	3001      	adds	r0, #1
 800a59e:	d0ad      	beq.n	800a4fc <_printf_i+0x15c>
 800a5a0:	6823      	ldr	r3, [r4, #0]
 800a5a2:	079b      	lsls	r3, r3, #30
 800a5a4:	d413      	bmi.n	800a5ce <_printf_i+0x22e>
 800a5a6:	68e0      	ldr	r0, [r4, #12]
 800a5a8:	9b03      	ldr	r3, [sp, #12]
 800a5aa:	4298      	cmp	r0, r3
 800a5ac:	bfb8      	it	lt
 800a5ae:	4618      	movlt	r0, r3
 800a5b0:	e7a6      	b.n	800a500 <_printf_i+0x160>
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	4632      	mov	r2, r6
 800a5b6:	4649      	mov	r1, r9
 800a5b8:	4640      	mov	r0, r8
 800a5ba:	47d0      	blx	sl
 800a5bc:	3001      	adds	r0, #1
 800a5be:	d09d      	beq.n	800a4fc <_printf_i+0x15c>
 800a5c0:	3501      	adds	r5, #1
 800a5c2:	68e3      	ldr	r3, [r4, #12]
 800a5c4:	9903      	ldr	r1, [sp, #12]
 800a5c6:	1a5b      	subs	r3, r3, r1
 800a5c8:	42ab      	cmp	r3, r5
 800a5ca:	dcf2      	bgt.n	800a5b2 <_printf_i+0x212>
 800a5cc:	e7eb      	b.n	800a5a6 <_printf_i+0x206>
 800a5ce:	2500      	movs	r5, #0
 800a5d0:	f104 0619 	add.w	r6, r4, #25
 800a5d4:	e7f5      	b.n	800a5c2 <_printf_i+0x222>
 800a5d6:	bf00      	nop
 800a5d8:	0800a785 	.word	0x0800a785
 800a5dc:	0800a796 	.word	0x0800a796

0800a5e0 <memmove>:
 800a5e0:	4288      	cmp	r0, r1
 800a5e2:	b510      	push	{r4, lr}
 800a5e4:	eb01 0402 	add.w	r4, r1, r2
 800a5e8:	d902      	bls.n	800a5f0 <memmove+0x10>
 800a5ea:	4284      	cmp	r4, r0
 800a5ec:	4623      	mov	r3, r4
 800a5ee:	d807      	bhi.n	800a600 <memmove+0x20>
 800a5f0:	1e43      	subs	r3, r0, #1
 800a5f2:	42a1      	cmp	r1, r4
 800a5f4:	d008      	beq.n	800a608 <memmove+0x28>
 800a5f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5fe:	e7f8      	b.n	800a5f2 <memmove+0x12>
 800a600:	4402      	add	r2, r0
 800a602:	4601      	mov	r1, r0
 800a604:	428a      	cmp	r2, r1
 800a606:	d100      	bne.n	800a60a <memmove+0x2a>
 800a608:	bd10      	pop	{r4, pc}
 800a60a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a60e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a612:	e7f7      	b.n	800a604 <memmove+0x24>

0800a614 <_sbrk_r>:
 800a614:	b538      	push	{r3, r4, r5, lr}
 800a616:	4d06      	ldr	r5, [pc, #24]	@ (800a630 <_sbrk_r+0x1c>)
 800a618:	2300      	movs	r3, #0
 800a61a:	4604      	mov	r4, r0
 800a61c:	4608      	mov	r0, r1
 800a61e:	602b      	str	r3, [r5, #0]
 800a620:	f7f6 fee2 	bl	80013e8 <_sbrk>
 800a624:	1c43      	adds	r3, r0, #1
 800a626:	d102      	bne.n	800a62e <_sbrk_r+0x1a>
 800a628:	682b      	ldr	r3, [r5, #0]
 800a62a:	b103      	cbz	r3, 800a62e <_sbrk_r+0x1a>
 800a62c:	6023      	str	r3, [r4, #0]
 800a62e:	bd38      	pop	{r3, r4, r5, pc}
 800a630:	2400095c 	.word	0x2400095c

0800a634 <memcpy>:
 800a634:	440a      	add	r2, r1
 800a636:	4291      	cmp	r1, r2
 800a638:	f100 33ff 	add.w	r3, r0, #4294967295
 800a63c:	d100      	bne.n	800a640 <memcpy+0xc>
 800a63e:	4770      	bx	lr
 800a640:	b510      	push	{r4, lr}
 800a642:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a646:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a64a:	4291      	cmp	r1, r2
 800a64c:	d1f9      	bne.n	800a642 <memcpy+0xe>
 800a64e:	bd10      	pop	{r4, pc}

0800a650 <_realloc_r>:
 800a650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a654:	4680      	mov	r8, r0
 800a656:	4615      	mov	r5, r2
 800a658:	460c      	mov	r4, r1
 800a65a:	b921      	cbnz	r1, 800a666 <_realloc_r+0x16>
 800a65c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a660:	4611      	mov	r1, r2
 800a662:	f7ff bc4b 	b.w	8009efc <_malloc_r>
 800a666:	b92a      	cbnz	r2, 800a674 <_realloc_r+0x24>
 800a668:	f7ff fbdc 	bl	8009e24 <_free_r>
 800a66c:	2400      	movs	r4, #0
 800a66e:	4620      	mov	r0, r4
 800a670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a674:	f000 f81a 	bl	800a6ac <_malloc_usable_size_r>
 800a678:	4285      	cmp	r5, r0
 800a67a:	4606      	mov	r6, r0
 800a67c:	d802      	bhi.n	800a684 <_realloc_r+0x34>
 800a67e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a682:	d8f4      	bhi.n	800a66e <_realloc_r+0x1e>
 800a684:	4629      	mov	r1, r5
 800a686:	4640      	mov	r0, r8
 800a688:	f7ff fc38 	bl	8009efc <_malloc_r>
 800a68c:	4607      	mov	r7, r0
 800a68e:	2800      	cmp	r0, #0
 800a690:	d0ec      	beq.n	800a66c <_realloc_r+0x1c>
 800a692:	42b5      	cmp	r5, r6
 800a694:	462a      	mov	r2, r5
 800a696:	4621      	mov	r1, r4
 800a698:	bf28      	it	cs
 800a69a:	4632      	movcs	r2, r6
 800a69c:	f7ff ffca 	bl	800a634 <memcpy>
 800a6a0:	4621      	mov	r1, r4
 800a6a2:	4640      	mov	r0, r8
 800a6a4:	f7ff fbbe 	bl	8009e24 <_free_r>
 800a6a8:	463c      	mov	r4, r7
 800a6aa:	e7e0      	b.n	800a66e <_realloc_r+0x1e>

0800a6ac <_malloc_usable_size_r>:
 800a6ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6b0:	1f18      	subs	r0, r3, #4
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	bfbc      	itt	lt
 800a6b6:	580b      	ldrlt	r3, [r1, r0]
 800a6b8:	18c0      	addlt	r0, r0, r3
 800a6ba:	4770      	bx	lr

0800a6bc <_init>:
 800a6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6be:	bf00      	nop
 800a6c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6c2:	bc08      	pop	{r3}
 800a6c4:	469e      	mov	lr, r3
 800a6c6:	4770      	bx	lr

0800a6c8 <_fini>:
 800a6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ca:	bf00      	nop
 800a6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ce:	bc08      	pop	{r3}
 800a6d0:	469e      	mov	lr, r3
 800a6d2:	4770      	bx	lr
